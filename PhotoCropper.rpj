(lp1
(dp2
S'ModulePrevious'
p3
S'scancropper'
p4
sS'ModuleCurrent'
p5
S'PhotoCropper'
p6
sS'Version'
p7
I1
sS'Geometry'
p8
S'3834x2065+3+28'
p9
sS'ProjectName'
p10
g6
sS'ImportTypes'
p11
(lp12
(S'Pmw'
p13
S'import'
p14
tp15
a(S'Tkinter'
p16
S'import'
p17
tp18
asS'EditorWidths'
p19
((lp20
I411
aI324
a(lp21
I378
aI357
a(lp22
I369
aI366
atp23
sS'ID'
p24
S'Rapyd Project'
p25
sS'ParkingLot'
p26
(dp27
S'SelectedWidreq'
p28
NsS'Widreqs'
p29
(lp30
ssa(dp31
S'PreviousForm'
p32
S'-Main-'
p33
sS'OnTab'
p34
I1
sg33
(dp35
S'Cursor'
p36
S'1.0'
p37
sS'Text'
p38
(lp39
S''
aS"#!/usr/bin/env python2\n# -*- coding: utf-8 -*-\n\n'''\n"
p40
aS'import rpErrorHandler\nimport Tkinter\n'
p41
aS'\ndef window_close():\n    conf[\'geometry\'] = Root.geometry()\n    conf.save() # Save configuration to keep window geometry\n    Root.destroy()\n\ntry:\n    #--------------------------------------------------------------------------#\n    # User code should go after this comment so it is inside the "try".        #\n    #     This allows rpErrorHandler to gain control on an error so it         #\n    #     can properly display a Rapyd-aware error message.                    #\n    #--------------------------------------------------------------------------#\n\n    # Adjust sys.path so we can find other modules of this project\n    if \'.\' not in sys.path:\n        sys.path.append(\'.\')\n    #Put lines to import other modules of this project here\n \n    if __name__ == \'__main__\':\n        # Parse arguments\n        parser = argparse.ArgumentParser(description=\'Picture cropper\')\n        parser.add_argument(\'-c\', \'--config\', \'--config-file\', dest=\'configFile\', default=None, help=\'Configuration file path\')\n        parser.add_argument(\'-d\', \'--debug\', default=0, help=\'Debug level\')\n        args = parser.parse_args()\n\n        \'\'\'\n'
p42
aS"        Root = Tkinter.Tk()\n        Tkinter.CallWrapper = rpErrorHandler.CallWrapper\n        App = PhotoCropper(Root)\n        App.pack(expand='yes',fill='both')\n"
p43
aS'        \'\'\'\n        Root = Tkinter.Tk()\n        App = PhotoCropper(Root)\n        App.pack(expand=\'yes\', fill=\'both\')\n        # Load configuration\n        conf = ScanConfig(args.configFile, App.__class__.__name__)\n        # Set window\n        Root.geometry(conf[\'geometry\'])\n        # Allow closing windows by clicking "X"\n        Root.protocol("WM_DELETE_WINDOW", window_close)\n        Root.title(\'Photo Cropper\')\n        App.config = conf\n        App.load_image_list()\n        Root.mainloop()\n    #--------------------------------------------------------------------------#\n    # User code should go above this comment.                                  #\n    #--------------------------------------------------------------------------#\nexcept:\n    \'\'\'\n    rpErrorHandler.RunError()\n    \'\'\'\n    raise'
p44
asg7
I0
sS'Sha'
p45
I6399615
ssS'Forms'
p46
(lp47
(dp48
S'Requested'
p49
g38
sS'Name'
p50
S'PhotoCropper'
p51
sg28
S'canvas'
p52
sS'Type'
p53
S'Tkinter.Frame'
p54
sS'Lines'
p55
(lp56
(lp57
I2415
aI5000
aI1
aa(lp58
I6206
aI7908
aI0
aa(lp59
I6206
aI9702
aI0
aasg38
(dp60
g36
S'308.65'
p61
sg38
(lp62
S"#------------------------------------------------------------------------------#\n#                                                                              #\n#                                 PhotoCropper                                 #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass PhotoCropper(Tkinter.Frame):\n    def __init__(self,Master=None,*pos,**kw):\n        kw['borderwidth'] = '5'\n        kw['height'] = '1'\n        kw['width'] = '1'\n"
p63
aS"# This code was deliberately ugly in order to prevent Rapyd-Tk from being\n# too smart\n\n'''\nimport argparse\nimport os\nimport re\nimport sys\n\nimport ConfigParser as confpars\nimport Tkinter, tkMessageBox\nfrom PIL import Image, ImageTk\n    \nclass PhotoCropper(Tkinter.Frame):\n    def __init__(self, Master=None, *pos, **kw):\n        kw['borderwidth'] = '5'\n        kw['height'] = '1'\n        kw['width'] = '1'\n        #\n        #Your code here\n        #\n"
p64
aS"\n        apply(Tkinter.Frame.__init__,(self,Master),kw)\n        self.bind('<Configure>',self.on_PhotoCropper_Config)\n        self.textStatus = Tkinter.StringVar()\n        self.frameFiles = Tkinter.Frame(self)\n        self.frameFiles.pack(anchor='nw',fill='y',side='left')\n        self.sbFiles = Tkinter.Scrollbar(self.frameFiles)\n        self.sbFiles.pack(anchor='nw',fill='y',side='right')\n        self.lbFiles = Tkinter.Listbox(self.frameFiles,takefocus=1)\n        self.lbFiles.pack(anchor='nw',fill='y',side='right')\n        self.lbFiles.bind('<ButtonRelease-1>',self.on_lbFiles_mouseClick_1)\n        self.frameMain = Tkinter.Frame(self,borderwidth='1')\n        self.frameMain.pack(expand='yes',fill='both',side='left')\n        self.framePicture = Tkinter.Frame(self.frameMain,borderwidth='1'\n            ,relief='raised')\n        self.framePicture.pack(anchor='nw',expand='yes',fill='both',side='top')\n        self.canvas = Tkinter.Canvas(self.framePicture,borderwidth='1'\n            ,takefocus=1)\n        self.canvas.pack(anchor='nw',expand='yes',fill='both',side='bottom')\n        self.canvas.bind('<B1-Motion>',self.canvas_mouseb1move_callback)\n        self.canvas.bind('<Button-1>',self.canvas_mouse1_callback)\n        self.canvas.bind('<ButtonRelease-1>',self.canvas_mouseup1_callback)\n        self.canvas.bind('<KeyRelease-Down>',self.canvas_ArrowDown)\n        self.canvas.bind('<Control-KeyRelease-Down>' \\\n            ,self.canvas_ArrowDown_Control)\n        self.canvas.bind('<Shift-KeyRelease-Down>',self.canvas_ArrowDown_Shift)\n        self.canvas.bind('<KeyRelease-KP_Add>',self.canvas_KP_Add)\n        self.canvas.bind('<KeyRelease-KP_Down>',self.canvas_ArrowDown_KP)\n        self.canvas.bind('<KeyRelease-KP_Enter>',self.canvas_KP_Enter)\n        self.canvas.bind('<KeyRelease-KP_Left>',self.canvas_ArrowLeft_KP)\n        self.canvas.bind('<KeyRelease-KP_Next>',self.canvas_KP_PageDown)\n        self.canvas.bind('<KeyRelease-KP_Prior>',self.canvas_KP_PageUp)\n        self.canvas.bind('<KeyRelease-KP_Right>',self.canvas_ArrowRight_KP)\n        self.canvas.bind('<KeyRelease-KP_Subtract>',self.canvas_KP_Subtract)\n        self.canvas.bind('<KeyRelease-KP_Up>',self.canvas_ArrowUp_KP)\n        self.canvas.bind('<KeyRelease-Left>',self.canvas_ArrowLeft)\n        self.canvas.bind('<Control-KeyRelease-Left>' \\\n            ,self.canvas_ArrowLeft_Control)\n        self.canvas.bind('<Shift-KeyRelease-Left>',self.canvas_ArrowLeft_Shift)\n        self.canvas.bind('<KeyRelease-Next>',self.canvas_PageDown)\n        self.canvas.bind('<KeyRelease-Prior>',self.canvas_PageUp)\n        self.canvas.bind('<KeyRelease-Return>',self.canvas_Return)\n        self.canvas.bind('<KeyRelease-Right>',self.canvas_ArrowRight)\n        self.canvas.bind('<Control-KeyRelease-Right>' \\\n            ,self.canvas_ArrowRight_Control)\n        self.canvas.bind('<Shift-KeyRelease-Right>' \\\n            ,self.canvas_ArrowRight_Shift)\n        self.canvas.bind('<KeyRelease-Up>',self.canvas_ArrowUp)\n        self.canvas.bind('<Control-KeyRelease-Up>',self.canvas_ArrowUp_Control)\n        self.canvas.bind('<Shift-KeyRelease-Up>',self.canvas_ArrowUp_Shift)\n        self.canvas.bind('<KeyRelease-space>',self.canvas_SPACE)\n        self.frameButtons = Tkinter.Frame(self.frameMain,borderwidth='1'\n            ,height='1')\n        self.frameButtons.pack(anchor='nw',fill='x',side='top')\n        self.btnSettings = Tkinter.Button(self.frameButtons,text='Settings ...')\n        self.btnSettings.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.btnSettings.bind('<ButtonRelease-1>',self.on_btnSettings_ButRel_1)\n        self.resetButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#F00',command=self.reset,text='Reset')\n        self.resetButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.undoButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#FF0',command=self.undo_last,text='Undo')\n        self.undoButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.zoomButton = Tkinter.Checkbutton(self.frameButtons\n            ,command=self.zoom_mode,text='Zoom')\n        self.zoomButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.unzoomButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#00F',command=self.unzoom_image,text='<-|->')\n        self.unzoomButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.plusButton = Tkinter.Button(self.frameButtons,command=self.plus_box\n            ,text='+')\n        self.plusButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.goButton = Tkinter.Button(self.frameButtons,activebackground='#0F0'\n            ,command=self.start_cropping,text='Crops')\n        self.goButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.quitButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#F00',command=self.quit,text='Quit')\n        self.quitButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.quitButton.bind('<ButtonRelease-1>',self.on_quitButton_ButRel_1)\n        self.frmStatus = Tkinter.Frame(self.frameMain)\n        self.frmStatus.pack(anchor='nw',fill='y',side='top')\n        self.lblStatus = Tkinter.Label(self.frmStatus,relief='sunken'\n            ,text='This is label',textvariable=self.textStatus)\n        self.lblStatus.pack(anchor='sw',expand='yes',fill='y',side='top')\n"
p65
aS'        #\n        #Your code here\n        #\n        self.quitButton_ttp = CreateToolTip(self.quitButton, "Exit")\n        self.resetButton_ttp = CreateToolTip(self.resetButton, "Reset all rectangles")\n        self.undoButton_ttp = CreateToolTip(self.undoButton, "Undo last rectangle")\n        self.zoomButton_ttp = CreateToolTip(self.zoomButton, "On/Off Zoom mode")\n        self.unzoomButton_ttp = CreateToolTip(self.unzoomButton, "Unzoom, view all image")\n        self.plusButton_ttp = CreateToolTip(self.plusButton, "Plus box, extent rectangle")\n        self.goButton_ttp = CreateToolTip(self.goButton, "Go, begin cropping")\n        self.btnInputDirSettings_ttp = CreateToolTip(self.btnSettings, "Settings")\n        self.croprect_start = None\n        self.croprect_end = None\n        self.crop_count = 0\n        self.canvas_rects = []\n        self.crop_rects = []\n        self.current_rect = None\n        self.zoommode = False\n        self.w = 1\n        self.h = 1\n        self.x0 = 0\n        self.y0 = 0\n        self.n = 0\n        self.config = None\n        self.delimiters = \' |,|\\t|#|\\|\' # String delimiters\n        self._after_id = None\n        self.filename = None\n        self.lbIndex = None # Keeps item index in listbox\n        self.cropIndex = 0\n'
p66
aS'    #\n    #Start of event handler methods\n    #\n'
p67
aS'\n'
aS'\n    def canvas_ArrowDown(self'
p68
aS', event=None):\n        # MOVES crop rectangle ONE pixel DOWN\n        self.move_rect(self.cropIndex, 0, 1)\n'
p69
aS'\n    def canvas_ArrowDown_Control(self'
p70
aS',Event=None):\n        # INCREASES size of crop rectangle by ONE pixel on Y-axis\n        self.resize_rect(self.cropIndex, 0, 1)\n'
p71
aS'\n    def canvas_ArrowDown_KP(self'
p72
aS', event=None):\n        # MOVES crop rectangle ONE pixel DOWN\n        self.move_rect(self.cropIndex, 0, 1)\n'
p73
aS'\n    def canvas_ArrowDown_Shift(self'
p74
aS",Event=None):\n        # MOVES crop rectangle AMOUNT OF pixels DOWN\n        self.move_rect(self.cropIndex, 0, int(self.config['move-step']))\n"
p75
aS'\n    def canvas_ArrowLeft(self'
p76
aS', event=None):\n        # MOVES crop rectangle ONE pixel LEFT\n        self.move_rect(self.cropIndex, -1, 0)\n'
p77
aS'\n    def canvas_ArrowLeft_Control(self'
p78
aS', event=None):\n        # REDUCES size of crop rectangle by ONE pixel on X-axis\n        self.resize_rect(self.cropIndex, -1, 0)\n'
p79
aS'\n    def canvas_ArrowLeft_KP(self'
p80
aS', event=None):\n        # MOVES crop rectangle ONE pixel LEFT\n        self.move_rect(self.cropIndex, -1, 0)\n'
p81
aS'\n    def canvas_ArrowLeft_Shift(self'
p82
aS", event=None):\n        # MOVES crop rectangle AMOUNT OF pixels LEFT\n        self.move_rect(self.cropIndex, -int(self.config['move-step']), 0)\n"
p83
aS'\n    def canvas_ArrowRight(self'
p84
aS', event=None):\n        # MOVES crop rectangle ONE pixel RIGHT\n        self.move_rect(self.cropIndex, 1, 0)\n'
p85
aS'\n    def canvas_ArrowRight_Control(self'
p86
aS',Event=None):\n        # INCREASES size of crop rectangle by ONE pixel on X-axis\n        self.resize_rect(self.cropIndex, 1, 0)\n'
p87
aS'\n    def canvas_ArrowRight_KP(self'
p88
aS', event=None):\n        # MOVES crop rectangle ONE pixel RIGHT\n        self.move_rect(self.cropIndex, 1, 0)\n'
p89
aS'\n    def canvas_ArrowRight_Shift(self'
p90
aS", event=None):\n        # MOVES crop rectangle AMOUNT OF pixels RIGHT\n        self.move_rect(self.cropIndex, int(self.config['move-step']), 0)\n"
p91
aS'\n    def canvas_ArrowUp(self'
p92
aS', event=None):\n        # MOVES crop rectangle ONE pixel UP\n        self.move_rect(self.cropIndex, 0, -1)\n'
p93
aS'\n    def canvas_ArrowUp_Control(self'
p94
aS', event=None):\n        # REDUCES size of crop rectangle by ONE pixel on Y-axis\n        self.resize_rect(self.cropIndex, 0, -1)\n'
p95
aS'\n    def canvas_ArrowUp_KP(self'
p96
aS', event=None):\n        # MOVES crop rectangle ONE pixel UP\n        self.move_rect(self.cropIndex, 0, -1)\n'
p97
aS'\n    def canvas_ArrowUp_Shift(self'
p98
aS", event=None):\n        # MOVES crop rectangle AMOUNT OF pixels UP\n        self.move_rect(self.cropIndex, 0, -int(self.config['move-step']))\n"
p99
aS'\n    def canvas_KP_Add(self'
p100
aS", event=None):\n        # Enlarges rectangle for AMOUNT OF pixels\n        self.resize_rect(self.cropIndex, int(self.config['resize-step']), int(self.config['resize-step']))\n"
p101
aS'\n    def canvas_KP_Enter(self'
p102
aS', event=None):\n        # CROPS selected areas\n        self.start_cropping()\n'
p103
aS'\n    def canvas_KP_PageDown(self'
p104
aS', event=None):\n        # Moves file selection in listbox one down\n        self.pressPage(self.PAGE_DOWN)\n'
p105
aS'\n    def canvas_KP_PageUp(self'
p106
aS', event=None):\n        # Moves file selection in listbox one up\n        self.pressPage(self.PAGE_UP)\n'
p107
aS'\n    def canvas_KP_Subtract(self'
p108
aS", event=None):\n        # Reduces rectangle by AMOUNT OF pixels\n        self.resize_rect(self.cropIndex, -int(self.config['resize-step']), -int(self.config['resize-step']))\n"
p109
aS'\n    def canvas_PageDown(self'
p110
aS', event=None):\n        # Moves file selection in listbox one DOWN\n        self.pressPage(self.PAGE_DOWN)\n'
p111
aS'\n    def canvas_PageUp(self'
p112
aS', event=None):\n        # Moves file selection in listbox one UP\n        self.pressPage(self.PAGE_UP)\n'
p113
aS'\n    def canvas_Return(self'
p114
aS',Event=None):\n        # CROPS selected areas\n        self.start_cropping()\n'
p115
aS'\n    def canvas_SPACE(self'
p116
aS', event=None):\n        # CROPS selected areas\n        self.start_cropping()\n'
p117
aS'\n    def canvas_mouse1_callback(self'
p118
aS', event=None):\n        self.croprect_start = (event.x, event.y)\n'
p119
aS'\n    def canvas_mouseb1move_callback(self'
p120
aS', event=None):\n        if self.current_rect:\n            self.canvas.delete(self.current_rect)\n        x1 = self.croprect_start[0]\n        y1 = self.croprect_start[1]\n        x2 = event.x\n        y2 = event.y\n        bbox = (x1, y1, x2, y2)\n        cr = self.canvas.create_rectangle(bbox)\n        self.current_rect = cr\n'
p121
aS'\n    def canvas_mouseup1_callback(self'
p122
aS', event=None):\n        self.croprect_end = (event.x, event.y)\n        self.set_crop_area()\n        self.canvas.delete(self.current_rect)\n        self.current_rect = None\n'
p123
aS'\n    def on_PhotoCropper_Config(self'
p124
aS', event=None):\n        if self._after_id:\n            self.after_cancel(self._after_id)\n        self._after_id = self.after(1200, self.draw_after_resize)\n'
p125
aS'\n    def on_btnSettings_ButRel_1(self'
p126
aS', event=None):\n        tkMessageBox.showinfo("Information", "Not yet implemented.", parent=self)\n'
p127
aS'\n    def on_lbFiles_mouseClick_1(self'
p128
aS', event=None):\n        self.lbIndex = self.lbFiles.curselection()[0]\n        self.load_lbFiles_image(self.lbFiles.get(Tkinter.ACTIVE))\n'
p129
aS'\n    def on_quitButton_ButRel_1(self'
p130
aS", event=None):\n        conf['geometry'] = self.winfo_toplevel().geometry()\n        conf.save()\n        self.quit()\n"
p131
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p132
aS'    \n    # Constants for listbox with image file names\n    PAGE_UP = -1\n    PAGE_DOWN = 1\n    \n    # Moves rectangle with "index" by "step" pixels\n    def move_rect(self, index, xstep, ystep):\n        if len(self.crop_rects) == index + 1:\n            cr = self.crop_rects[index]\n            self.canvas.delete(self.canvas_rects[index])\n            self.canvas_rects.pop(index)\n            self.crop_rects[index] = cr.move_rect(xstep, ystep)\n            self.redraw_rect()\n\n    def resize_rect(self, index, xstep, ystep):\n        if len(self.crop_rects) == index + 1:\n            cr = self.crop_rects[index]\n            self.canvas.delete(self.canvas_rects[index])\n            self.canvas_rects.pop(index)\n            self.crop_rects[index] = cr.resize_rect(xstep, ystep)\n            self.redraw_rect()\n        \n    def pressPage(self, direction=0):\n        index = self.lbFiles.curselection()[0] + direction\n        self.lbFiles.selection_clear(0, Tkinter.END)\n        self.lbSelect(index)\n\n    # Programmatically select image in a listbox\n    def lbSelect(self, index):\n        if index < 0:\n            index = 0\n        elif index == self.lbFiles.size():\n            index = self.lbFiles.size()-1  \n        self.lbFiles.select_set(index)\n        self.lbFiles.activate(index)\n        if index != self.lbIndex:\n            self.load_lbFiles_image(self.lbFiles.get(Tkinter.ACTIVE))\n            self.lbIndex = index\n        \n    def draw_after_resize(self):\n        # Check if there is a selection in file list\n        if self.filename:\n            self.loadimage()\n \n    def load_lbFiles_image(self, imagePath):\n        self.filename = os.path.join(self.config[\'input-directory\'], imagePath)\n        if os.path.exists(self.filename):\n            self.loadimage()\n            self.winfo_toplevel().title(\'Photo Cropper - \' + imagePath)\n            self.redraw_rect()\n       \n    def set_crop_area(self):\n        r = Rect(self.croprect_start, self.croprect_end)\n        r.set_thumboffset(int(self.config[\'thumb-offset\']))\n        \n        # adjust dimensions\n        r.clip_to(self.image_thumb_rect)\n\n        # ignore rects smaller than this size\n        if min(r.h, r.w) < 10:\n            return\n\n        ra = r\n        ra = ra.scale_rect(self.scale)\n        ra = ra.move_rect(self.x0, self.y0)\n        ra = ra.valid_rect(self.w, self.h)\n        if self.zoommode:\n            self.canvas.delete(Tkinter.ALL)\n            self.x0 = ra.left\n            self.y0 = ra.top\n            za = (ra.left, ra.top, ra.right, ra.bottom)\n            self.image_thumb = self.image.crop(za)\n            self.image_thumb.thumbnail(thumbsize)\n            self.image_thumb_rect = Rect(self.image_thumb.size)\n            self.image_thumb_rect.set_thumboffset(int(self.config[\'thumb-offset\']))\n            self.displayimage()\n            x_scale = float(ra.w) / self.image_thumb_rect.w\n            y_scale = float(ra.h) / self.image_thumb_rect.h\n            self.scale = (x_scale, y_scale)\n            self.redraw_rect()\n            self.zoommode = False\n            self.zoomButton.deselect()\n        else:\n            self.drawrect(r)\n            self.crop_rects.append(ra)\n            self.n = self.n + 1\n\n    def zoom_mode(self):\n        if self.zoommode:\n            self.zoommode = False\n        else:\n            self.zoommode = True\n\n    def unzoom_image(self):\n        self.canvas.delete(Tkinter.ALL)\n        self.zoommode = False\n        self.zoomButton.deselect()\n        self.x0 = 0\n        self.y0 = 0\n        self.image_thumb = self.image.copy()\n        self.image_thumb.thumbnail(thumbsize)\n        self.image_thumb_rect = Rect(self.image_thumb.size)\n        self.image_thumb_rect.set_thumboffset(int(self.config[\'thumb-offset\']))\n        self.displayimage()\n        x_scale = float(self.image_rect.w) / self.image_thumb_rect.w\n        y_scale = float(self.image_rect.h) / self.image_thumb_rect.h\n        self.scale = (x_scale, y_scale)\n        self.redraw_rect()\n\n    def plus_box(self):\n        if self.n > 1:\n            self.canvas.delete(Tkinter.ALL)\n            if self.crop_rects:\n                ra = self.crop_rects[self.n - 1]\n                self.crop_rects.pop()\n                self.n = self.n - 1\n                ra0 = self.crop_rects[self.n - 1]\n                ra0 = ra0.plus_rect(ra)\n                self.crop_rects[self.n - 1] = ra0\n                self.displayimage()\n                self.redraw_rect()\n                self.zoommode = False\n                self.zoomButton.deselect()\n\n    def redraw_rect(self):\n        for croparea in self.crop_rects:\n            self.drawrect(croparea.rescale_rect(self.scale, self.x0, self.y0))\n\n    def undo_last(self):\n        if self.canvas_rects:\n            r = self.canvas_rects.pop()\n            self.canvas.delete(r)\n\n        if self.crop_rects:\n            self.crop_rects.pop()\n\n    def drawrect(self, rect):\n        bbox = (rect.left, rect.top, rect.right, rect.bottom)\n        cr = self.canvas.create_rectangle(\n            bbox, activefill=\'\', fill=\'yellow\', stipple=self.config[\'stipple\'])\n        self.canvas_rects.append(cr)\n\n    def reset(self):\n        self.canvas.delete(Tkinter.ALL)\n        self.zoommode = False\n        self.zoomButton.deselect()\n        self.canvas_rects = []\n        self.crop_rects = []\n        self.displayimage()\n        \n    def displayimage(self):\n        self.photoimage = ImageTk.PhotoImage(self.image_thumb)\n        w, h = self.image_thumb.size\n        self.canvas.delete("all") # Remove remnants of previous crop area\n        \n        self.canvas.create_image(\n            int(self.config[\'thumb-offset\']),\n            int(self.config[\'thumb-offset\']),\n            anchor=Tkinter.NW,\n            image=self.photoimage)\n\n    def loadimage(self):\n        self.image = Image.open(self.filename)\n        self.textStatus.set(self.lbFiles.get(Tkinter.ACTIVE))\n        self.image_rect = Rect(self.image.size)\n        self.image_rect.set_thumboffset(int(self.config[\'thumb-offset\']))\n        self.w = self.image_rect.w\n        self.h = self.image_rect.h\n        # TODO: needed? borderwidth = self.canvas.config()[\'borderwidth\'][4]\n        \n        self.image_thumb = self.image.copy()\n        self.image_thumb.thumbnail(\n            [ self.canvas.winfo_width() - int(self.config[\'thumb-offset\']),\n              self.canvas.winfo_height() - int(self.config[\'thumb-offset\']) ]\n        )\n        self.image_thumb_rect = Rect(self.image_thumb.size)\n        self.image_thumb_rect.set_thumboffset(int(self.config[\'thumb-offset\']))\n\n        self.displayimage()\n        x_scale = float(self.image_rect.w) / self.image_thumb_rect.w\n        y_scale = float(self.image_rect.h) / self.image_thumb_rect.h\n        self.scale = (x_scale, y_scale)\n\n    def newfilename(self, filenum):\n        f, e = os.path.splitext(self.filename)\n        return \'%s_crop_%s%s\' % (f, filenum, e)\n\n    def start_cropping(self):\n        cropcount = 0\n        status = "{0} cropped: ".format(self.lbFiles.get(Tkinter.ACTIVE))\n        for croparea in self.crop_rects:\n            cropcount += 1\n            filename = self.newfilename(cropcount)\n            _, tail = os.path.split(filename) # Remove input directory\n            self.crop(croparea, tail)\n            status += "{0}:{1} ".format(cropcount, croparea)\n        self.textStatus.set(status.strip())\n\n    def crop(self, croparea, filename):\n        ca = (croparea.left, croparea.top, croparea.right, croparea.bottom)\n        newimg = self.image.crop(ca)\n        imagePath = os.path.join(self.config[\'output-directory\'], filename)\n        newimg.save(imagePath)\n        \n    def load_image_list(self):\n        if self.config is not None:\n            self.lbFiles.delete(0, Tkinter.END)\n            suffixtuple = tuple(re.split(self.delimiters, self.config[\'image-extensions\']))\n            for item in os.listdir(self.config[\'input-directory\']):\n                if os.path.isfile(os.path.join(self.config[\'input-directory\'], item)):\n                    if item.lower().endswith(suffixtuple): # The arg can be a tuple of suffixes to look for\n                        self.lbFiles.insert(Tkinter.END, item)\n            self.update_idletasks()\n            # If there are items in listbox, select the 1st one\n            if self.lbFiles.size() > 0:\n                self.lbFiles.select_set(0)\n                self.load_lbFiles_image(self.lbFiles.get(Tkinter.ACTIVE))\n                self.canvas.focus_set()\n\n\nclass CreateToolTip(object):\n    """\n    create a tooltip for a given widget\n    """\n    def __init__(self, widget, text=\'widget info\'):\n        self.waittime = 500     #miliseconds\n        self.wraplength = 180   #pixels\n        self.widget = widget\n        self.text = text\n        self.widget.bind("<Enter>", self.enter)\n        self.widget.bind("<Leave>", self.leave)\n        self.widget.bind("<ButtonPress>", self.leave)\n        self.id = None\n        self.tw = None\n\n    def enter(self, event=None):\n        self.schedule()\n\n    def leave(self, event=None):\n        self.unschedule()\n        self.hidetip()\n\n    def schedule(self):\n        self.unschedule()\n        self.id = self.widget.after(self.waittime, self.showtip)\n\n    def unschedule(self):\n        id = self.id\n        self.id = None\n        if id:\n            self.widget.after_cancel(id)\n\n    def showtip(self, event=None):\n        x = y = 0\n        x, y, cx, cy = self.widget.bbox("insert")\n        x += self.widget.winfo_rootx() + 25\n        y += self.widget.winfo_rooty() + 20\n        # creates a toplevel window\n        self.tw = Tkinter.Toplevel(self.widget)\n        # Leaves only the label and removes the app window\n        self.tw.wm_overrideredirect(True)\n        self.tw.wm_geometry("+%d+%d" % (x, y))\n        label = Tkinter.Label(self.tw, text=self.text, justify=\'left\',\n            background="#fef9e7", relief=\'solid\', borderwidth=1,\n            wraplength = self.wraplength)\n        label.pack(ipadx=1)\n\n    def hidetip(self):\n        tw = self.tw\n        self.tw= None\n        if tw:\n            tw.destroy()\n            \nclass Rect(object):\n    def __init__(self, *args):\n        self.set_points(*args)\n        self.thumboffset = 0\n\n    def set_points(self, *args):\n        if len(args) == 2:\n            pt1 = args[0]\n            pt2 = args[1]\n        elif len(args) == 1:\n            pt1 = (0, 0)\n            pt2 = args[0]\n        elif len(args) == 0:\n            pt1 = (0, 0)\n            pt2 = (0, 0)\n\n        x1, y1 = pt1\n        x2, y2 = pt2\n\n        self.left = min(x1, x2)\n        self.top = min(y1, y2)\n        self.right = max(x1, x2)\n        self.bottom = max(y1, y2)\n\n        self._update_dims()\n\n    def clip_to(self, containing_rect):\n        cr = containing_rect\n        self.top = max(self.top, cr.top + self.thumboffset)\n        self.bottom = min(self.bottom, cr.bottom + self.thumboffset)\n        self.left = max(self.left, cr.left + self.thumboffset)\n        self.right = min(self.right, cr.right + self.thumboffset)\n        self._update_dims()\n\n    def _update_dims(self):\n        """added to provide w and h dimensions."""\n        self.w = self.right - self.left\n        self.h = self.bottom - self.top\n\n    def scale_rect(self, scale):\n        x_scale = scale[0]\n        y_scale = scale[1]\n\n        r = Rect()\n        r.top = int((self.top - self.thumboffset) * y_scale)\n        r.bottom = int((self.bottom - self.thumboffset) * y_scale)\n        r.right = int((self.right - self.thumboffset) * x_scale)\n        r.left = int((self.left - self.thumboffset) * x_scale)\n        r._update_dims()\n\n        return r\n\n    def move_rect(self, x0, y0):\n        r = Rect()\n        r.top = int(self.top + y0)\n        r.bottom = int(self.bottom + y0)\n        r.right = int(self.right + x0)\n        r.left = int(self.left + x0)\n        r._update_dims()\n        return r\n\n    # Rezire rectangle by certain amount on X- and Y- axis\n    def resize_rect(self, x0, y0):\n        r = Rect()\n        r.top = self.top\n        r.left = self.left\n        r.bottom = int(self.bottom + y0)\n        r.right = int(self.right + x0)\n        # Make sure rectangle does not disappear!\n        if r.bottom - r.top < 10:\n            r.bottom = self.bottom\n        if r.right - r.left < 10:\n            r.right = self.right\n        r._update_dims()\n        return r\n        \n    def rescale_rect(self, scale, x0, y0):\n        x_scale = scale[0]\n        y_scale = scale[1]\n\n        r = Rect()\n        r.top = int((self.top - y0) / y_scale + self.thumboffset)\n        r.bottom = int((self.bottom - y0) / y_scale + self.thumboffset)\n        r.right = int((self.right - x0) / x_scale + self.thumboffset)\n        r.left = int((self.left - x0) / x_scale + self.thumboffset)\n        r._update_dims()\n        return r\n\n    def plus_rect(self, r0):\n        r = Rect()\n        r.top = min(self.top, r0.top)\n        r.bottom = max(self.bottom, r0.bottom)\n        r.right = max(self.right, r0.right)\n        r.left = min(self.left, r0.left)\n        r._update_dims()\n        return r\n\n    def valid_rect(self, w, h):\n        r = Rect()\n        r.top = self.top\n        if r.top < 0:\n            r.top = 0\n        if r.top > h - 1:\n            r.top = h - 1\n        r.bottom = self.bottom\n        if r.bottom < 1:\n            r.bottom = 1\n        if r.bottom > h:\n            r.bottom = h\n        r.right = self.right\n        if r.right < 1:\n            r.right = 1\n        if r.right > w:\n            r.right = w\n        r.left = self.left\n        if r.left < 0:\n            r.left = 0\n        if r.left > w - 1:\n            r.left = w - 1\n        r._update_dims()\n        return r\n\n    def set_thumboffset(self, thumboffset=0):\n        self.thumboffset = thumboffset\n\n    def __repr__(self):\n        return \'(%d,%d)-(%d,%d)\' % (self.left, self.top, self.right, self.bottom)\n\n# Class that handles configuration\nclass ScanConfig(object):\n\n    def __init__(self, configFile=None, appName=\'PhotoCropper\'):\n        self.section = appName.upper()\n        self.get_default_config()\n        \n        if configFile is None:\n            # Create default configuration in OS-independent "home" directory\n            configPath = os.path.join(os.path.expanduser(\'~\'), \'.config\', appName.lower())\n            if not os.path.exists(configPath):\n                os.makedirs(configPath)\n            self.configFile = os.path.join(configPath, \'config.ini\')\n            self.config = confpars.SafeConfigParser(self.get_default_config())\n            if os.path.exists(self.configFile):\n                self.config.read(self.configFile)\n            else:\n                self.config.add_section(self.section)\n        elif os.path.exists(configFile):\n            self.configFile = os.path.normpath(configFile)\n            self.config = confpars.SafeConfigParser(self.get_default_config())\n            self.config.read(self.configFile)\n        else:\n            # Path given, but does not exist\n            raise Exception("Configuration file \'{0}\' does not exist".format(configFile))\n    \n    # Gets default configuration\n    def get_default_config(self):\n        return {\n            \'geometry\'         : \'1024x768+10+10\', # Position and size of main window\n            \'input-directory\'  : os.path.expanduser(\'~\'), # Directory with pictures to process\n            \'output-directory\' : os.path.expanduser(\'~\'), # Directory to write resulting pictures into\n            \'image-extensions\' : \'tif tiff jpg jpeg gif png\', # Extensions of files considered to be pictures\n            \'thumb-offset\'     : \'4\', # Thumbnail offset\n            \'stipple\'          : \'gray12\', # Stipple pattern\n            \'move-step\'        : \'10\', # Amount of pixels to move rectangle in all directions\n            \'resize-step\'      : \'10\' # Amount of pixels to resize rectangle\n        }\n\n    def __getitem__(self, key):\n        return self.config.get(self.section, key)\n\n    def __setitem__(self, key, value):\n        self.config.set(self.section, key, value)\n\n    def save(self):\n        with open(self.configFile, \'w\') as cf:\n            self.config.write(cf)'
p133
asg7
I0
sg45
I15247999
ssg29
(lp134
(dp135
S'ModuleName'
p136
S'Tkinter'
p137
sg50
g51
sS'WidgetName'
p138
S'Frame'
p139
sS'PackOptions'
p140
(lp141
sg24
(I0
tp142
sS'XY'
p143
(I0
I0
tp144
sS'Bindings'
p145
(lp146
(dp147
S'Handler'
p148
S'on_PhotoCropper_Config'
p149
sS'Component'
p150
S''
sS'Event'
p151
S'<Configure>'
p152
sasS'Options'
p153
(lp154
(dp155
g50
S'borderwidth'
p156
sS'Value'
p157
S'n:5'
p158
sS'Extra'
p159
Nsa(dp160
g50
S'width'
p161
sg157
S'n:1'
p162
sg159
Nsa(dp163
g50
S'height'
p164
sg157
S'n:1'
p165
sg159
Nsasa(dp166
g136
S'Tkinter'
p167
sg50
S'btnSettings'
p168
sg138
S'Button'
p169
sg140
(lp170
(dp171
g50
S'anchor'
p172
sg157
S'sw'
p173
sa(dp174
g50
S'expand'
p175
sg157
S'yes'
p176
sa(dp177
g50
S'fill'
p178
sg157
S'x'
sasg24
Nsg143
(lp179
I2609
aI9332
asg145
(lp180
(dp181
g148
S'on_btnSettings_ButRel_1'
p182
sg150
S''
sg151
S'<ButtonRelease-1>'
p183
sasg153
(lp184
(dp185
g50
S'text'
p186
sg157
S'Settings ...'
p187
sg159
Nsasa(dp188
g136
S'Tkinter'
p189
sg50
S'canvas'
p190
sg138
S'Canvas'
p191
sg140
(lp192
(dp193
g50
g172
sg157
S'nw'
p194
sa(dp195
g50
g175
sg157
S'yes'
p196
sa(dp197
g50
g178
sg157
S'both'
p198
sasg24
Nsg143
(lp199
I5114
aI5331
asg145
(lp200
(dp201
g148
S'canvas_mouseb1move_callback'
p202
sg150
S''
sg151
S'<B1-Motion>'
p203
sa(dp204
g148
S'canvas_mouse1_callback'
p205
sg150
S''
sg151
S'<Button-1>'
p206
sa(dp207
g148
S'canvas_mouseup1_callback'
p208
sg150
S''
sg151
S'<ButtonRelease-1>'
p209
sa(dp210
g148
S'canvas_ArrowDown'
p211
sg150
S''
sg151
S'<KeyRelease-Down>'
p212
sa(dp213
g148
S'canvas_ArrowDown_Control'
p214
sg150
S''
sg151
S'<Control-KeyRelease-Down>'
p215
sa(dp216
g148
S'canvas_ArrowDown_Shift'
p217
sg150
S''
sg151
S'<Shift-KeyRelease-Down>'
p218
sa(dp219
g148
S'canvas_KP_Add'
p220
sg150
S''
sg151
S'<KeyRelease-KP_Add>'
p221
sa(dp222
g148
S'canvas_ArrowDown_KP'
p223
sg150
S''
sg151
S'<KeyRelease-KP_Down>'
p224
sa(dp225
g148
S'canvas_KP_Enter'
p226
sg150
S''
sg151
S'<KeyRelease-KP_Enter>'
p227
sa(dp228
g148
S'canvas_ArrowLeft_KP'
p229
sg150
S''
sg151
S'<KeyRelease-KP_Left>'
p230
sa(dp231
g148
S'canvas_KP_PageDown'
p232
sg150
S''
sg151
S'<KeyRelease-KP_Next>'
p233
sa(dp234
g148
S'canvas_KP_PageUp'
p235
sg150
S''
sg151
S'<KeyRelease-KP_Prior>'
p236
sa(dp237
g148
S'canvas_ArrowRight_KP'
p238
sg150
S''
sg151
S'<KeyRelease-KP_Right>'
p239
sa(dp240
g148
S'canvas_KP_Subtract'
p241
sg150
S''
sg151
S'<KeyRelease-KP_Subtract>'
p242
sa(dp243
g148
S'canvas_ArrowUp_KP'
p244
sg150
S''
sg151
S'<KeyRelease-KP_Up>'
p245
sa(dp246
g148
S'canvas_ArrowLeft'
p247
sg150
S''
sg151
S'<KeyRelease-Left>'
p248
sa(dp249
g148
S'canvas_ArrowLeft_Control'
p250
sg150
S''
sg151
S'<Control-KeyRelease-Left>'
p251
sa(dp252
g148
S'canvas_ArrowLeft_Shift'
p253
sg150
S''
sg151
S'<Shift-KeyRelease-Left>'
p254
sa(dp255
g148
S'canvas_PageDown'
p256
sg150
S''
sg151
S'<KeyRelease-Next>'
p257
sa(dp258
g148
S'canvas_PageUp'
p259
sg150
S''
sg151
S'<KeyRelease-Prior>'
p260
sa(dp261
g148
S'canvas_Return'
p262
sg150
S''
sg151
S'<KeyRelease-Return>'
p263
sa(dp264
g148
S'canvas_ArrowRight'
p265
sg150
S''
sg151
S'<KeyRelease-Right>'
p266
sa(dp267
g148
S'canvas_ArrowRight_Control'
p268
sg150
S''
sg151
S'<Control-KeyRelease-Right>'
p269
sa(dp270
g148
S'canvas_ArrowRight_Shift'
p271
sg150
S''
sg151
S'<Shift-KeyRelease-Right>'
p272
sa(dp273
g148
S'canvas_ArrowUp'
p274
sg150
S''
sg151
S'<KeyRelease-Up>'
p275
sa(dp276
g148
S'canvas_ArrowUp_Control'
p277
sg150
S''
sg151
S'<Control-KeyRelease-Up>'
p278
sa(dp279
g148
S'canvas_ArrowUp_Shift'
p280
sg150
S''
sg151
S'<Shift-KeyRelease-Up>'
p281
sa(dp282
g148
S'canvas_SPACE'
p283
sg150
S''
sg151
S'<KeyRelease-space>'
p284
sasg153
(lp285
(dp286
g50
S'borderwidth'
p287
sg157
S'n:1'
p288
sg159
Nsa(dp289
g50
S'takefocus'
p290
sg157
I1
sg159
Nsasa(dp291
g136
S'Tkinter'
p292
sg50
S'frameButtons'
p293
sg138
S'Frame'
p294
sg140
(lp295
(dp296
g50
g172
sg157
S'nw'
p297
sa(dp298
g50
g178
sg157
S'x'
sasg24
(I0
I1
I1
tp299
sg143
g144
sg145
(lp300
sg153
(lp301
(dp302
g50
g156
sg157
S'n:1'
p303
sg159
Nsa(dp304
g50
g164
sg157
S'n:1'
p305
sg159
Nsasa(dp306
g136
S'Tkinter'
p307
sg50
S'frameFiles'
p308
sg138
S'Frame'
p309
sg140
(lp310
(dp311
g50
g172
sg157
g194
sa(dp312
g50
g178
sg157
S'y'
sasg24
(I0
I0
tp313
sg143
g144
sg145
(lp314
sg153
(lp315
sa(dp316
g136
g307
sg50
S'frameMain'
p317
sg138
g309
sg140
(lp318
(dp319
g50
g175
sg157
S'yes'
p320
sa(dp321
g50
g178
sg157
S'both'
p322
sasg24
(I0
I1
tp323
sg143
g144
sg145
(lp324
sg153
(lp325
(dp326
g50
g156
sg157
S'n:1'
p327
sg159
Nsasa(dp328
g136
g292
sg50
S'framePicture'
p329
sg138
g294
sg140
(lp330
(dp331
g50
g172
sg157
g194
sa(dp332
g50
g175
sg157
g320
sa(dp333
g50
g178
sg157
g322
sasg24
(I0
I1
I0
tp334
sg143
g144
sg145
(lp335
sg153
(lp336
(dp337
g50
g156
sg157
S'n:1'
p338
sg159
Nsa(dp339
g50
S'relief'
p340
sg157
S'raised'
p341
sg159
Nsasa(dp342
g136
S'Tkinter'
p343
sg50
S'frmStatus'
p344
sg138
S'Frame'
p345
sg140
(lp346
(dp347
g50
g172
sg157
S'nw'
p348
sa(dp349
g50
g178
sg157
S'y'
sasg24
(I0
I1
I2
tp350
sg143
g144
sg145
(lp351
sg153
(lp352
sa(dp353
g136
S'Tkinter'
p354
sg50
S'goButton'
p355
sg138
S'Button'
p356
sg140
(lp357
(dp358
g50
g172
sg157
S'sw'
p359
sa(dp360
g50
g175
sg157
g320
sa(dp361
g50
g178
sg157
S'x'
sasg24
Nsg143
(lp362
I6606
aI9332
asg145
(lp363
sg153
(lp364
(dp365
g50
g186
sg157
S'Crops'
p366
sg159
Nsa(dp367
g50
S'activebackground'
p368
sg157
S'c:#0F0'
p369
sg159
Nsa(dp370
g50
S'command'
p371
sg157
S'start_cropping'
p372
sg159
I0
sasa(dp373
g136
g189
sg50
S'lbFiles'
p374
sg138
S'Listbox'
p375
sg140
(lp376
(dp377
g50
g172
sg157
g194
sa(dp378
g50
g178
sg157
S'y'
sasg24
Nsg143
(lp379
I1220
aI7964
asg145
(lp380
(dp381
g148
S'on_lbFiles_mouseClick_1'
p382
sg150
S''
sg151
S'<ButtonRelease-1>'
p383
sasg153
(lp384
(dp385
g50
S'takefocus'
p386
sg157
I1
sg159
Nsasa(dp387
g136
g167
sg50
S'lblStatus'
p388
sg138
S'Label'
p389
sg140
(lp390
(dp391
g50
g172
sg157
g173
sa(dp392
g50
g175
sg157
S'yes'
p393
sa(dp394
g50
g178
sg157
S'y'
sasg24
Nsg143
(lp395
I4407
aI9790
asg145
(lp396
sg153
(lp397
(dp398
g50
S'text'
p399
sg157
S'This is label'
p400
sg159
Nsa(dp401
g50
S'textvariable'
p402
sg157
S'textStatus'
p403
sg159
S's.as'
p404
sa(dp405
g50
S'relief'
p406
sg157
S'sunken'
p407
sg159
Nsasa(dp408
g136
g354
sg50
S'plusButton'
p409
sg138
g356
sg140
(lp410
(dp411
g50
g172
sg157
g359
sa(dp412
g50
g175
sg157
g320
sa(dp413
g50
g178
sg157
S'x'
sasg24
Nsg143
(lp414
I5602
aI9332
asg145
(lp415
sg153
(lp416
(dp417
g50
g186
sg157
S'+'
sg159
Nsa(dp418
g50
g371
sg157
S'plus_box'
p419
sg159
I0
sasa(dp420
g136
g354
sg50
S'quitButton'
p421
sg138
g356
sg140
(lp422
(dp423
g50
g172
sg157
g359
sa(dp424
g50
g175
sg157
g320
sa(dp425
g50
g178
sg157
S'x'
sasg24
Nsg143
(lp426
I7376
aI9332
asg145
(lp427
(dp428
g148
S'on_quitButton_ButRel_1'
p429
sg150
S''
sg151
S'<ButtonRelease-1>'
p430
sasg153
(lp431
(dp432
g50
g186
sg157
S'Quit'
p433
sg159
Nsa(dp434
g50
g368
sg157
S'c:#F00'
p435
sg159
Nsa(dp436
g50
g371
sg157
S'quit'
p437
sg159
I0
sasa(dp438
g136
g354
sg50
S'resetButton'
p439
sg138
g356
sg140
(lp440
(dp441
g50
g172
sg157
g359
sa(dp442
g50
g175
sg157
g320
sa(dp443
g50
g178
sg157
S'x'
sasg24
Nsg143
(lp444
I3172
aI9332
asg145
(lp445
sg153
(lp446
(dp447
g50
g186
sg157
S'Reset'
p448
sg159
Nsa(dp449
g50
g368
sg157
S'c:#F00'
p450
sg159
Nsa(dp451
g50
g371
sg157
S'reset'
p452
sg159
I0
sasa(dp453
g136
g189
sg50
S'sbFiles'
p454
sg138
S'Scrollbar'
p455
sg140
(lp456
(dp457
g50
g172
sg157
g194
sa(dp458
g50
g178
sg157
S'y'
sasg24
Nsg143
(lp459
I1842
aI7964
asg145
(lp460
sg153
(lp461
sa(dp462
g136
g354
sg50
S'undoButton'
p463
sg138
g356
sg140
(lp464
(dp465
g50
g172
sg157
g359
sa(dp466
g50
g175
sg157
g320
sa(dp467
g50
g178
sg157
S'x'
sasg24
Nsg143
(lp468
I3794
aI9332
asg145
(lp469
sg153
(lp470
(dp471
g50
g186
sg157
S'Undo'
p472
sg159
Nsa(dp473
g50
g368
sg157
S'c:#FF0'
p474
sg159
Nsa(dp475
g50
g371
sg157
S'undo_last'
p476
sg159
I0
sasa(dp477
g136
g354
sg50
S'unzoomButton'
p478
sg138
g356
sg140
(lp479
(dp480
g50
g172
sg157
g359
sa(dp481
g50
g175
sg157
g320
sa(dp482
g50
g178
sg157
S'x'
sasg24
Nsg143
(lp483
I4898
aI9327
asg145
(lp484
sg153
(lp485
(dp486
g50
g186
sg157
S'<-|->'
p487
sg159
Nsa(dp488
g50
g368
sg157
S'c:#00F'
p489
sg159
Nsa(dp490
g50
g371
sg157
S'unzoom_image'
p491
sg159
I0
sasa(dp492
g136
g354
sg50
S'zoomButton'
p493
sg138
S'Checkbutton'
p494
sg140
(lp495
(dp496
g50
g172
sg157
g359
sa(dp497
g50
g175
sg157
g320
sa(dp498
g50
g178
sg157
S'x'
sasg24
Nsg143
(lp499
I4176
aI9332
asg145
(lp500
sg153
(lp501
(dp502
g50
S'text'
p503
sg157
S'Zoom'
p504
sg159
Nsa(dp505
g50
S'command'
p506
sg157
S'zoom_mode'
p507
sg159
I0
sasasS'BaseClass'
p508
g54
sg34
I1
sa(dp509
g49
S'Gui'
p510
sg50
S'Preferences'
p511
sg28
Nsg53
S'Tkinter.Frame'
p512
sg55
(lp513
(lp514
I4998
aI1545
aI0
aasg38
(dp515
g36
S'27.0'
p516
sg38
(lp517
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                 Preferences                                  #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass Preferences(Tkinter.Frame):\n    def __init__(self,Master=None,*pos,**kw):\n'
p518
aS'        #\n        #Your code here\n        #\n'
p519
aS"\n        apply(Tkinter.Frame.__init__,(self,Master),kw)\n        self._Frame2 = Tkinter.Frame(self)\n        self._Frame2.pack(side='top')\n        self._Frame1 = Tkinter.Frame(self)\n        self._Frame1.pack(side='top')\n"
p520
aS'        #\n        #Your code here\n        #\n'
p521
aS'    #\n    #Start of event handler methods\n    #\n'
p522
aS'\n'
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p523
aS''
asg7
I0
sg45
I12881023
ssg29
(lp524
(dp525
g136
S'Tkinter'
p526
sg50
g511
sg138
S'Frame'
p527
sg140
(lp528
sg24
g142
sg143
g144
sg145
(lp529
sg153
(lp530
sa(dp531
g136
S'Tkinter'
p532
sg50
S'_Frame1'
p533
sg138
S'Frame'
p534
sg140
(lp535
sg24
(I0
I1
tp536
sg143
g144
sg145
(lp537
sg153
(lp538
sa(dp539
g136
g532
sg50
S'_Frame2'
p540
sg138
g534
sg140
(lp541
sg24
(I0
I0
tp542
sg143
g144
sg145
(lp543
sg153
(lp544
sasg508
g512
sg34
I1
sasS'VisibleForm'
p545
g51
sS'SelectedForm'
p546
g51
sg50
g6
sa.