(lp1
(dp2
S'ModulePrevious'
p3
S'scancropper'
p4
sS'ModuleCurrent'
p5
S'PhotoCropper'
p6
sS'Version'
p7
I1
sS'Geometry'
p8
S'3834x2065+3+28'
p9
sS'ProjectName'
p10
g6
sS'ImportTypes'
p11
(lp12
(S'Pmw'
p13
S'import'
p14
tp15
a(S'Tkinter'
p16
S'import'
p17
tp18
asS'EditorWidths'
p19
((lp20
I411
aI324
a(lp21
I378
aI357
a(lp22
I369
aI366
atp23
sS'ID'
p24
S'Rapyd Project'
p25
sS'ParkingLot'
p26
(dp27
S'SelectedWidreq'
p28
NsS'Widreqs'
p29
(lp30
ssa(dp31
S'PreviousForm'
p32
S'-Main-'
p33
sS'OnTab'
p34
I1
sg33
(dp35
S'Cursor'
p36
S'49.28'
p37
sS'Text'
p38
(lp39
S''
aS'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n'
p40
aS'import rpErrorHandler\nimport Tkinter\n'
p41
aS'\ndef window_close():\n    conf[\'geometry\'] = Root.geometry()\n    conf.save() # Save configuration to keep window geometry\n    Root.destroy()\n\ntry:\n    #--------------------------------------------------------------------------#\n    # User code should go after this comment so it is inside the "try".        #\n    #     This allows rpErrorHandler to gain control on an error so it         #\n    #     can properly display a Rapyd-aware error message.                    #\n    #--------------------------------------------------------------------------#\n\n    #Adjust sys.path so we can find other modules of this project\n    import sys\n    if \'.\' not in sys.path:\n        sys.path.append(\'.\')\n    #Put lines to import other modules of this project here\n    import argparse    \n    import tkFileDialog\n    import os\n    import re\n    try:\n        # for Python2\n        import ConfigParser as confpars\n    except ImportError:\n        # for Python3\n        import configparser as confpars\n    #\n    from PIL import Image, ImageTk\n    tk = Tkinter\n \n    if __name__ == \'__main__\':\n        # Parse arguments\n        parser = argparse.ArgumentParser(description=\'Picture cropper\')\n        parser.add_argument(\'-c\', \'--config\', \'--config-file\', dest=\'configFile\', default=None, help=\'Configuration file path\')\n        parser.add_argument(\'-d\', \'--debug\', default=0, help=\'Debug level\')\n        args = parser.parse_args()\n\n'
p42
aS"        Root = Tkinter.Tk()\n        Tkinter.CallWrapper = rpErrorHandler.CallWrapper\n        App = PhotoCropper(Root)\n        App.pack(expand='yes',fill='both')\n"
p43
aS'        # Load configuration\n        conf = ScanConfig(args.configFile, App.__class__.__name__)\n        # Set window\n        Root.geometry(conf[\'geometry\'])\n        # Allow closing windows by clicking "X"\n        Root.protocol("WM_DELETE_WINDOW", window_close)\n        Root.title(\'Photo Cropper\')\n        App.config = conf\n        App.load_image_list()\n        Root.mainloop()\n    #--------------------------------------------------------------------------#\n    # User code should go above this comment.                                  #\n    #--------------------------------------------------------------------------#\nexcept:\n    rpErrorHandler.RunError()'
p44
asg7
I0
sS'Sha'
p45
I9899391
ssS'Forms'
p46
(lp47
(dp48
S'Requested'
p49
g38
sS'Name'
p50
g6
sg28
S'canvas'
p51
sS'Type'
p52
S'Tkinter.Frame'
p53
sS'Lines'
p54
(lp55
(lp56
I2416
aI5000
aI1
aa(lp57
I6206
aI7908
aI0
aa(lp58
I6206
aI9702
aI0
aasg38
(dp59
g36
S'627.23'
p60
sg38
(lp61
S"#------------------------------------------------------------------------------#\n#                                                                              #\n#                                 PhotoCropper                                 #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass PhotoCropper(Tkinter.Frame):\n    def __init__(self,Master=None,*pos,**kw):\n        kw['borderwidth'] = '5'\n        kw['height'] = '1'\n        kw['width'] = '1'\n"
p62
aS'        #\n        #Your code here\n        #\n'
p63
aS"\n        apply(Tkinter.Frame.__init__,(self,Master),kw)\n        self.bind('<Configure>',self.on_PhotoCropper_Config)\n        self.frameFiles = Tkinter.Frame(self)\n        self.frameFiles.pack(anchor='nw',fill='y',side='left')\n        self.sbFiles = Tkinter.Scrollbar(self.frameFiles)\n        self.sbFiles.pack(anchor='nw',fill='y',side='right')\n        self.lbFiles = Tkinter.Listbox(self.frameFiles,takefocus=1)\n        self.lbFiles.pack(anchor='nw',fill='y',side='right')\n        self.lbFiles.bind('<ButtonRelease-1>',self.on_lbFiles_mouseClick_1)\n        self.frameMain = Tkinter.Frame(self,borderwidth='1')\n        self.frameMain.pack(expand='yes',fill='both',side='left')\n        self.framePicture = Tkinter.Frame(self.frameMain,borderwidth='1'\n            ,relief='raised')\n        self.framePicture.pack(anchor='nw',expand='yes',fill='both',side='top')\n        self.canvas = Tkinter.Canvas(self.framePicture,borderwidth='1'\n            ,takefocus=1)\n        self.canvas.pack(anchor='nw',expand='yes',fill='both',side='bottom')\n        self.canvas.bind('<B1-Motion>',self.canvas_mouseb1move_callback)\n        self.canvas.bind('<Button-1>',self.canvas_mouse1_callback)\n        self.canvas.bind('<ButtonRelease-1>',self.canvas_mouseup1_callback)\n        self.canvas.bind('<KeyRelease-Down>',self.canvas_ArrowDown)\n        self.canvas.bind('<Shift-KeyRelease-Down>',self.canvas_ArrowDown_Shift)\n        self.canvas.bind('<KeyRelease-KP_Add>',self.canvas_KP_Add)\n        self.canvas.bind('<KeyRelease-KP_Down>',self.canvas_KP_ArrowDown)\n        self.canvas.bind('<KeyRelease-KP_Enter>',self.canvas_KP_Enter)\n        self.canvas.bind('<KeyRelease-KP_Left>',self.canvas_KP_ArrowLeft)\n        self.canvas.bind('<KeyRelease-KP_Next>',self.canvas_KP_PageDown)\n        self.canvas.bind('<KeyRelease-KP_Prior>',self.canvas_KP_PageUp)\n        self.canvas.bind('<KeyRelease-KP_Right>',self.canvas_KP_ArrowRight)\n        self.canvas.bind('<KeyRelease-KP_Subtract>',self.canvas_KP_Subtract)\n        self.canvas.bind('<KeyRelease-KP_Up>',self.canvas_KP_ArrowUp)\n        self.canvas.bind('<KeyRelease-Left>',self.canvas_ArrowLeft)\n        self.canvas.bind('<Shift-KeyRelease-Left>',self.canvas_ArrowLeft_Shift)\n        self.canvas.bind('<KeyRelease-Next>',self.canvas_PageDown)\n        self.canvas.bind('<KeyRelease-Prior>',self.canvas_PageUp)\n        self.canvas.bind('<KeyRelease-Return>',self.canvas_Return)\n        self.canvas.bind('<KeyRelease-Right>',self.canvas_ArrowRight)\n        self.canvas.bind('<Shift-KeyRelease-Right>' \\\n            ,self.canvas_ArrowRight_Shift)\n        self.canvas.bind('<KeyRelease-Up>',self.canvas_ArrowUp)\n        self.canvas.bind('<Shift-KeyRelease-Up>',self.canvas_ArrowUp_Shift)\n        self.canvas.bind('<KeyRelease-space>',self.canvas_SPACE)\n        self.frameButtons = Tkinter.Frame(self.frameMain,borderwidth='1'\n            ,height='1')\n        self.frameButtons.pack(anchor='nw',fill='x',side='top')\n        self.btnSettings = Tkinter.Button(self.frameButtons,text='Settings ...')\n        self.btnSettings.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.btnSettings.bind('<ButtonRelease-1>',self.on_btnSettings_ButRel_1)\n        self.resetButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#F00',command=self.reset,text='Reset')\n        self.resetButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.undoButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#FF0',command=self.undo_last,text='Undo')\n        self.undoButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.zoomButton = Tkinter.Checkbutton(self.frameButtons\n            ,command=self.zoom_mode,text='Zoom')\n        self.zoomButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.unzoomButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#00F',command=self.unzoom_image,text='<-|->')\n        self.unzoomButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.plusButton = Tkinter.Button(self.frameButtons,command=self.plus_box\n            ,text='+')\n        self.plusButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.goButton = Tkinter.Button(self.frameButtons,activebackground='#0F0'\n            ,command=self.start_cropping,text='Crops')\n        self.goButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.quitButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#F00',command=self.quit,text='Quit')\n        self.quitButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.quitButton.bind('<ButtonRelease-1>',self.on_quitButton_ButRel_1)\n        self.frmStatus = Tkinter.Frame(self.frameMain)\n        self.frmStatus.pack(anchor='nw',fill='y',side='top')\n        self._Label1 = Tkinter.Label(self.frmStatus,relief='sunken'\n            ,text='This is label')\n        self._Label1.pack(anchor='sw',expand='yes',fill='y',side='top')\n"
p64
aS'        #\n        #Your code here\n        #\n        self.quitButton_ttp = CreateToolTip(self.quitButton, "Exit")\n        self.resetButton_ttp = CreateToolTip(self.resetButton, "Reset all rectangles")\n        self.undoButton_ttp = CreateToolTip(self.undoButton, "Undo last rectangle")\n        self.zoomButton_ttp = CreateToolTip(self.zoomButton, "On/Off Zoom mode")\n        self.unzoomButton_ttp = CreateToolTip(self.unzoomButton, "Unzoom, view all image")\n        self.plusButton_ttp = CreateToolTip(self.plusButton, "Plus box, extent rectangle")\n        self.goButton_ttp = CreateToolTip(self.goButton, "Go, begin cropping")\n        self.btnInputDirSettings_ttp = CreateToolTip(self.btnSettings, "Settings")\n        self.croprect_start = None\n        self.croprect_end = None\n        self.crop_count = 0\n        self.canvas_rects = []\n        self.crop_rects = []\n        self.current_rect = None\n        self.zoommode = False\n        self.w = 1\n        self.h = 1\n        self.x0 = 0\n        self.y0 = 0\n        self.n = 0\n        self.config = None\n        self.delimiters = \' |,|\\t|#|\\|\'\n        self._after_id = None\n        self.filename = None\n        self.lbIndex = None # Keeps item index in listbox\n        self.cropIndex = 0\n'
p65
aS'    #\n    #Start of event handler methods\n    #\n'
p66
aS'\n'
aS'\n    def canvas_ArrowDown(self'
p67
aS', event=None):\n        # Moves crop rectangle one pixel DOWN\n        self.move_rect(self.cropIndex, 0, 1)\n'
p68
aS'\n    def canvas_ArrowDown_Shift(self'
p69
aS",Event=None):\n        # Moves crop rectangle AMOUNT OF pixels DOWN\n        self.move_rect(self.cropIndex, 0, int(self.config['move-step']))\n"
p70
aS'\n    def canvas_ArrowLeft(self'
p71
aS', event=None):\n        # Moves crop rectangle one pixel LEFT\n        self.move_rect(self.cropIndex, -1, 0)\n'
p72
aS'\n    def canvas_ArrowLeft_Shift(self'
p73
aS", event=None):\n        # Moves crop rectangle AMOUNT OF pixels LEFT\n        self.move_rect(self.cropIndex, -int(self.config['move-step']), 0)\n"
p74
aS'\n    def canvas_ArrowRight(self'
p75
aS', event=None):\n        # Moves crop rectangle one pixel RIGHT\n        self.move_rect(self.cropIndex, 1, 0)\n'
p76
aS'\n    def canvas_ArrowRight_Shift(self'
p77
aS", event=None):\n        # Moves crop rectangle AMOUNT OF pixels RIGHT\n        self.move_rect(self.cropIndex, int(self.config['move-step']), 0)\n"
p78
aS'\n    def canvas_ArrowUp(self'
p79
aS', event=None):\n        # Moves crop rectangle one pixel UP\n        self.move_rect(self.cropIndex, 0, -1)\n'
p80
aS'\n    def canvas_ArrowUp_Shift(self'
p81
aS", event=None):\n        # Moves crop rectangle AMOUNT OF pixels UP\n        self.move_rect(self.cropIndex, 0, -int(self.config['move-step']))\n"
p82
aS'\n    def canvas_KP_Add(self'
p83
aS',Event=None):\n        pass\n'
p84
aS'\n    def canvas_KP_ArrowDown(self'
p85
aS', event=None):\n        # Moves crop rectangle one pixel DOWN\n        self.move_rect(self.cropIndex, 0, 1)\n'
p86
aS'\n    def canvas_KP_ArrowLeft(self'
p87
aS', event=None):\n        # Moves crop rectangle one pixel LEFT\n        self.move_rect(self.cropIndex, -1, 0)\n'
p88
aS'\n    def canvas_KP_ArrowRight(self'
p89
aS', event=None):\n        # Moves crop rectangle one pixel RIGHT\n        self.move_rect(self.cropIndex, 1, 0)\n'
p90
aS'\n    def canvas_KP_ArrowUp(self'
p91
aS', event=None):\n        # Moves crop rectangle one pixel UP\n        self.move_rect(self.cropIndex, 0, -1)\n'
p92
aS'\n    def canvas_KP_Enter(self'
p93
aS',Event=None):\n        # Crops selected areas\n        self.start_cropping()\n'
p94
aS'\n    def canvas_KP_PageDown(self'
p95
aS', event=None):\n        # Moves file selection in listbox one down\n        self.pressPage(self.PAGE_DOWN)\n'
p96
aS'\n    def canvas_KP_PageUp(self'
p97
aS', event=None):\n        # Moves file selection in listbox one up\n        self.pressPage(self.PAGE_UP)\n'
p98
aS'\n    def canvas_KP_Subtract(self'
p99
aS',Event=None):\n        pass\n'
p100
aS'\n    def canvas_PageDown(self'
p101
aS', event=None):\n        # Moves file selection in listbox one DOWN\n        self.pressPage(self.PAGE_DOWN)\n'
p102
aS'\n    def canvas_PageUp(self'
p103
aS', event=None):\n        # Moves file selection in listbox one UP\n        self.pressPage(self.PAGE_UP)\n'
p104
aS'\n    def canvas_Return(self'
p105
aS',Event=None):\n        # Crops selected areas\n        self.start_cropping()\n'
p106
aS'\n    def canvas_SPACE(self'
p107
aS', event=None):\n        # Crops selected areas\n        self.start_cropping()\n'
p108
aS'\n    def canvas_mouse1_callback(self'
p109
aS', event=None):\n        self.croprect_start = (event.x, event.y)\n'
p110
aS'\n    def canvas_mouseb1move_callback(self'
p111
aS', event=None):\n        if self.current_rect:\n            self.canvas.delete(self.current_rect)\n        x1 = self.croprect_start[0]\n        y1 = self.croprect_start[1]\n        x2 = event.x\n        y2 = event.y\n        bbox = (x1, y1, x2, y2)\n        cr = self.canvas.create_rectangle(bbox)\n        self.current_rect = cr\n'
p112
aS'\n    def canvas_mouseup1_callback(self'
p113
aS', event=None):\n        self.croprect_end = (event.x, event.y)\n        self.set_crop_area()\n        self.canvas.delete(self.current_rect)\n        self.current_rect = None\n'
p114
aS'\n    def on_PhotoCropper_Config(self'
p115
aS', event=None):\n        if self._after_id:\n            self.after_cancel(self._after_id)\n        self._after_id = self.after(1200, self.draw_after_resize)\n'
p116
aS'\n    def on_btnSettings_ButRel_1(self'
p117
aS', event=None):\n        pass\n'
p118
aS'\n    def on_lbFiles_mouseClick_1(self'
p119
aS', event=None):\n        self.lbIndex = self.lbFiles.curselection()[0]\n        self.load_lbFiles_image(self.lbFiles.get(tk.ACTIVE))\n'
p120
aS'\n    def on_quitButton_ButRel_1(self'
p121
aS", event=None):\n        conf['geometry'] = self.winfo_toplevel().geometry()\n        conf.save()\n        self.quit()\n"
p122
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p123
aS'    \n    # Constants for listbox with image file names\n    PAGE_UP = -1\n    PAGE_DOWN = 1\n    \n    # Moves rectangle with "index" by "step" pixels\n    def move_rect(self, index, xstep, ystep):\n        if len(self.crop_rects) == index + 1:\n            cr = self.crop_rects[index]\n            self.canvas.delete(self.canvas_rects[index])\n            self.canvas_rects.pop(index)\n            self.crop_rects[index] = cr.move_rect(xstep, ystep)\n            self.redraw_rect()\n\n    def resize_rect(self, index, xstep, ystep):\n        pass\n        \n    def pressPage(self, direction=0):\n        index = self.lbFiles.curselection()[0] + direction\n        self.lbFiles.selection_clear(0, tk.END)\n        self.lbSelect(index)\n\n    # Programmatically select image in a listbox\n    def lbSelect(self, index):\n        if index < 0:\n            index = 0\n        elif index == self.lbFiles.size():\n            index = self.lbFiles.size()-1  \n        self.lbFiles.select_set(index)\n        self.lbFiles.activate(index)\n        if index != self.lbIndex:\n            self.load_lbFiles_image(self.lbFiles.get(tk.ACTIVE))\n            self.lbIndex = index\n        \n    def draw_after_resize(self):\n        # Check if there is a selection in file list\n        if self.filename:\n            self.loadimage()\n \n    def load_lbFiles_image(self, imagePath):\n        self.filename = os.path.join(self.config[\'input-directory\'], imagePath)\n        if os.path.exists(self.filename):\n            self.loadimage()\n            self.winfo_toplevel().title(\'Scan Cropper - \' + imagePath)\n            self.redraw_rect()\n       \n    def set_crop_area(self):\n        r = Rect(self.croprect_start, self.croprect_end)\n        r.set_thumboffset(int(self.config[\'thumb-offset\']))\n        \n        # adjust dimensions\n        r.clip_to(self.image_thumb_rect)\n\n        # ignore rects smaller than this size\n        if min(r.h, r.w) < 10:\n            return\n\n        ra = r\n        ra = ra.scale_rect(self.scale)\n        ra = ra.move_rect(self.x0, self.y0)\n        ra = ra.valid_rect(self.w, self.h)\n        if self.zoommode:\n            self.canvas.delete(tk.ALL)\n            self.x0 = ra.left\n            self.y0 = ra.top\n            za = (ra.left, ra.top, ra.right, ra.bottom)\n            self.image_thumb = self.image.crop(za)\n            self.image_thumb.thumbnail(thumbsize)\n            self.image_thumb_rect = Rect(self.image_thumb.size)\n            self.image_thumb_rect.set_thumboffset(int(self.config[\'thumb-offset\']))\n            self.displayimage()\n            x_scale = float(ra.w) / self.image_thumb_rect.w\n            y_scale = float(ra.h) / self.image_thumb_rect.h\n            self.scale = (x_scale, y_scale)\n            self.redraw_rect()\n            self.zoommode = False\n            self.zoomButton.deselect()\n        else:\n            self.drawrect(r)\n            self.crop_rects.append(ra)\n            self.n = self.n + 1\n\n    def zoom_mode(self):\n        if self.zoommode:\n            self.zoommode = False\n        else:\n            self.zoommode = True\n\n    def unzoom_image(self):\n        self.canvas.delete(tk.ALL)\n        self.zoommode = False\n        self.zoomButton.deselect()\n        self.x0 = 0\n        self.y0 = 0\n        self.image_thumb = self.image.copy()\n        self.image_thumb.thumbnail(thumbsize)\n        self.image_thumb_rect = Rect(self.image_thumb.size)\n        self.image_thumb_rect.set_thumboffset(int(self.config[\'thumb-offset\']))\n        self.displayimage()\n        x_scale = float(self.image_rect.w) / self.image_thumb_rect.w\n        y_scale = float(self.image_rect.h) / self.image_thumb_rect.h\n        self.scale = (x_scale, y_scale)\n        self.redraw_rect()\n\n    def plus_box(self):\n        if self.n > 1:\n            self.canvas.delete(tk.ALL)\n            if self.crop_rects:\n                ra = self.crop_rects[self.n - 1]\n                self.crop_rects.pop()\n                self.n = self.n - 1\n                ra0 = self.crop_rects[self.n - 1]\n                ra0 = ra0.plus_rect(ra)\n                self.crop_rects[self.n - 1] = ra0\n                self.displayimage()\n                self.redraw_rect()\n                self.zoommode = False\n                self.zoomButton.deselect()\n\n    def redraw_rect(self):\n        for croparea in self.crop_rects:\n            self.drawrect(croparea.rescale_rect(self.scale, self.x0, self.y0))\n\n    def undo_last(self):\n        if self.canvas_rects:\n            r = self.canvas_rects.pop()\n            self.canvas.delete(r)\n\n        if self.crop_rects:\n            self.crop_rects.pop()\n\n    def drawrect(self, rect):\n        bbox = (rect.left, rect.top, rect.right, rect.bottom)\n        cr = self.canvas.create_rectangle(\n            bbox, activefill=\'\', fill=\'yellow\', stipple=self.config[\'stipple\'])\n        self.canvas_rects.append(cr)\n\n    def reset(self):\n        self.canvas.delete(tk.ALL)\n        self.zoommode = False\n        self.zoomButton.deselect()\n        self.canvas_rects = []\n        self.crop_rects = []\n        self.displayimage()\n        \n    def displayimage(self):\n        self.photoimage = ImageTk.PhotoImage(self.image_thumb)\n        w, h = self.image_thumb.size\n        self.canvas.delete("all") # Remove remnants of previous crop area\n        \n        self.canvas.create_image(\n            int(self.config[\'thumb-offset\']),\n            int(self.config[\'thumb-offset\']),\n            anchor=tk.NW,\n            image=self.photoimage)\n\n    def loadimage(self):\n        self.image = Image.open(self.filename)\n        self.image_rect = Rect(self.image.size)\n        self.image_rect.set_thumboffset(int(self.config[\'thumb-offset\']))\n        self.w = self.image_rect.w\n        self.h = self.image_rect.h\n        # TODO: needed? borderwidth = self.canvas.config()[\'borderwidth\'][4]\n        \n        self.image_thumb = self.image.copy()\n        self.image_thumb.thumbnail(\n            [ self.canvas.winfo_width() - int(self.config[\'thumb-offset\']),\n              self.canvas.winfo_height() - int(self.config[\'thumb-offset\']) ]\n        )\n        self.image_thumb_rect = Rect(self.image_thumb.size)\n        self.image_thumb_rect.set_thumboffset(int(self.config[\'thumb-offset\']))\n\n        self.displayimage()\n        x_scale = float(self.image_rect.w) / self.image_thumb_rect.w\n        y_scale = float(self.image_rect.h) / self.image_thumb_rect.h\n        self.scale = (x_scale, y_scale)\n\n    def newfilename(self, filenum):\n        f, e = os.path.splitext(self.filename)\n        return \'%s_crop_%s%s\' % (f, filenum, e)\n\n    def start_cropping(self):\n        cropcount = 0\n        for croparea in self.crop_rects:\n            cropcount += 1\n            filename = self.newfilename(cropcount)\n            _, tail = os.path.split(filename) # Remove input directory\n            self.crop(croparea, tail)\n\n    def crop(self, croparea, filename):\n        ca = (croparea.left, croparea.top, croparea.right, croparea.bottom)\n        newimg = self.image.crop(ca)\n        imagePath = os.path.join(self.config[\'output-directory\'], filename)\n        newimg.save(imagePath)\n        \n    def load_image_list(self):\n        if self.config is not None:\n            self.lbFiles.delete(0, tk.END)\n            suffixtuple = tuple(re.split(self.delimiters, self.config[\'image-extensions\']))\n            for item in os.listdir(self.config[\'input-directory\']):\n                if os.path.isfile(os.path.join(self.config[\'input-directory\'], item)):\n                    if item.lower().endswith(suffixtuple): # The arg can be a tuple of suffixes to look for\n                        self.lbFiles.insert(tk.END, item)\n            self.update_idletasks()\n            # If there are items in listbox, select the 1st one\n            if self.lbFiles.size() > 0:\n                self.lbFiles.select_set(0)\n                self.load_lbFiles_image(self.lbFiles.get(tk.ACTIVE))\n                self.canvas.focus_set()\n\n\nclass CreateToolTip(object):\n    """\n    create a tooltip for a given widget\n    """\n    def __init__(self, widget, text=\'widget info\'):\n        self.waittime = 500     #miliseconds\n        self.wraplength = 180   #pixels\n        self.widget = widget\n        self.text = text\n        self.widget.bind("<Enter>", self.enter)\n        self.widget.bind("<Leave>", self.leave)\n        self.widget.bind("<ButtonPress>", self.leave)\n        self.id = None\n        self.tw = None\n\n    def enter(self, event=None):\n        self.schedule()\n\n    def leave(self, event=None):\n        self.unschedule()\n        self.hidetip()\n\n    def schedule(self):\n        self.unschedule()\n        self.id = self.widget.after(self.waittime, self.showtip)\n\n    def unschedule(self):\n        id = self.id\n        self.id = None\n        if id:\n            self.widget.after_cancel(id)\n\n    def showtip(self, event=None):\n        x = y = 0\n        x, y, cx, cy = self.widget.bbox("insert")\n        x += self.widget.winfo_rootx() + 25\n        y += self.widget.winfo_rooty() + 20\n        # creates a toplevel window\n        self.tw = tk.Toplevel(self.widget)\n        # Leaves only the label and removes the app window\n        self.tw.wm_overrideredirect(True)\n        self.tw.wm_geometry("+%d+%d" % (x, y))\n        label = tk.Label(self.tw, text=self.text, justify=\'left\',\n            background="#fef9e7", relief=\'solid\', borderwidth=1,\n            wraplength = self.wraplength)\n        label.pack(ipadx=1)\n\n    def hidetip(self):\n        tw = self.tw\n        self.tw= None\n        if tw:\n            tw.destroy()\n            \nclass Rect(object):\n    def __init__(self, *args):\n        self.set_points(*args)\n        self.thumboffset = 0\n\n    def set_points(self, *args):\n        if len(args) == 2:\n            pt1 = args[0]\n            pt2 = args[1]\n        elif len(args) == 1:\n            pt1 = (0, 0)\n            pt2 = args[0]\n        elif len(args) == 0:\n            pt1 = (0, 0)\n            pt2 = (0, 0)\n\n        x1, y1 = pt1\n        x2, y2 = pt2\n\n        self.left = min(x1, x2)\n        self.top = min(y1, y2)\n        self.right = max(x1, x2)\n        self.bottom = max(y1, y2)\n\n        self._update_dims()\n\n    def clip_to(self, containing_rect):\n        cr = containing_rect\n        self.top = max(self.top, cr.top + self.thumboffset)\n        self.bottom = min(self.bottom, cr.bottom + self.thumboffset)\n        self.left = max(self.left, cr.left + self.thumboffset)\n        self.right = min(self.right, cr.right + self.thumboffset)\n        self._update_dims()\n\n    def _update_dims(self):\n        """added to provide w and h dimensions."""\n\n        self.w = self.right - self.left\n        self.h = self.bottom - self.top\n\n    def scale_rect(self, scale):\n        x_scale = scale[0]\n        y_scale = scale[1]\n\n        r = Rect()\n        r.top = int((self.top - self.thumboffset) * y_scale)\n        r.bottom = int((self.bottom - self.thumboffset) * y_scale)\n        r.right = int((self.right - self.thumboffset) * x_scale)\n        r.left = int((self.left - self.thumboffset) * x_scale)\n        r._update_dims()\n\n        return r\n\n    def move_rect(self, x0, y0):\n        r = Rect()\n        r.top = int(self.top + y0)\n        r.bottom = int(self.bottom + y0)\n        r.right = int(self.right + x0)\n        r.left = int(self.left + x0)\n        r._update_dims()\n        return r\n\n    def rescale_rect(self, scale, x0, y0):\n        x_scale = scale[0]\n        y_scale = scale[1]\n\n        r = Rect()\n        r.top = int((self.top - y0) / y_scale + self.thumboffset)\n        r.bottom = int((self.bottom - y0) / y_scale + self.thumboffset)\n        r.right = int((self.right - x0) / x_scale + self.thumboffset)\n        r.left = int((self.left - x0) / x_scale + self.thumboffset)\n        r._update_dims()\n        return r\n\n    def plus_rect(self, r0):\n        r = Rect()\n        r.top = min(self.top, r0.top)\n        r.bottom = max(self.bottom, r0.bottom)\n        r.right = max(self.right, r0.right)\n        r.left = min(self.left, r0.left)\n        r._update_dims()\n        return r\n\n    def valid_rect(self, w, h):\n        r = Rect()\n        r.top = self.top\n        if r.top < 0:\n            r.top = 0\n        if r.top > h - 1:\n            r.top = h - 1\n        r.bottom = self.bottom\n        if r.bottom < 1:\n            r.bottom = 1\n        if r.bottom > h:\n            r.bottom = h\n        r.right = self.right\n        if r.right < 1:\n            r.right = 1\n        if r.right > w:\n            r.right = w\n        r.left = self.left\n        if r.left < 0:\n            r.left = 0\n        if r.left > w - 1:\n            r.left = w - 1\n        r._update_dims()\n        return r\n\n    def set_thumboffset(self, thumboffset=0):\n        self.thumboffset = thumboffset\n\n    def __repr__(self):\n        return \'(%d,%d)-(%d,%d)\' % (self.left, self.top, self.right, self.bottom)\n\n# Class that handles configuration\nclass ScanConfig(object):\n\n    def __init__(self, configFile=None, appName=\'PhotoCropper\'):\n        self.section = appName.upper()\n        self.get_default_config()\n        \n        if configFile is None:\n            # Create default configuration in OS-independent "home" directory\n            configPath = os.path.join(os.path.expanduser(\'~\'), \'.config\', self.__class__.__name__.lower())\n            if not os.path.exists(configPath):\n                os.makedirs(configPath)\n            self.configFile = os.path.join(configPath, \'config.ini\')\n            self.config = confpars.SafeConfigParser(self.get_default_config())\n            if os.path.exists(self.configFile):\n                self.config.read(self.configFile)\n            else:\n                self.config.add_section(self.section)\n        elif os.path.exists(configFile):\n            self.configFile = os.path.normpath(configFile)\n            self.config = confpars.SafeConfigParser(self.get_default_config())\n            self.config.read(self.configFile)\n        else:\n            # Path given, but does not exist\n            raise Exception("Configuration file \'{0}\' does not exist".format(configFile))\n    \n    # Gets default configuration\n    def get_default_config(self):\n        return {\n            \'geometry\'         : \'1024x768+10+10\', # Position and size of main window\n            \'input-directory\'  : os.path.expanduser(\'~\'), # Directory with pictures to process\n            \'output-directory\' : os.path.expanduser(\'~\'), # Directory to write resulting pictures into\n            \'image-extensions\' : \'tif tiff jpg jpeg gif png\', # Extensions of files considered to be pictures\n            \'thumb-offset\'     : \'4\', # Thumbnail offset\n            \'stipple\'          : \'gray12\', # Stipple pattern\n            \'move-step\'        : \'10\', # Amount of pixels to move rectangle in all directions\n            \'resize-step\'      : \'10\' # Amount of pixels to resize rectangle\n        }\n\n    def __getitem__(self, key):\n        return self.config.get(self.section, key)\n\n    def __setitem__(self, key, value):\n        self.config.set(self.section, key, value)\n\n    def save(self):\n        with open(self.configFile, \'wb\') as cf:\n            self.config.write(cf)'
p124
asg7
I0
sg45
I5299327
ssg29
(lp125
(dp126
S'ModuleName'
p127
S'Tkinter'
p128
sg50
g6
sS'WidgetName'
p129
S'Frame'
p130
sS'PackOptions'
p131
(lp132
sg24
(I0
tp133
sS'XY'
p134
(I0
I0
tp135
sS'Bindings'
p136
(lp137
(dp138
S'Handler'
p139
S'on_PhotoCropper_Config'
p140
sS'Component'
p141
S''
sS'Event'
p142
S'<Configure>'
p143
sasS'Options'
p144
(lp145
(dp146
g50
S'borderwidth'
p147
sS'Value'
p148
S'n:5'
p149
sS'Extra'
p150
Nsa(dp151
g50
S'width'
p152
sg148
S'n:1'
p153
sg150
Nsa(dp154
g50
S'height'
p155
sg148
S'n:1'
p156
sg150
Nsasa(dp157
g127
S'Tkinter'
p158
sg50
S'_Label1'
p159
sg129
S'Label'
p160
sg131
(lp161
(dp162
g50
S'anchor'
p163
sg148
S'sw'
p164
sa(dp165
g50
S'expand'
p166
sg148
S'yes'
p167
sa(dp168
g50
S'fill'
p169
sg148
S'y'
sasg24
Nsg134
(lp170
I4408
aI9790
asg136
(lp171
sg144
(lp172
(dp173
g50
S'text'
p174
sg148
S'This is label'
p175
sg150
Nsa(dp176
g50
S'relief'
p177
sg148
S'sunken'
p178
sg150
Nsasa(dp179
g127
g158
sg50
S'btnSettings'
p180
sg129
S'Button'
p181
sg131
(lp182
(dp183
g50
g163
sg148
g164
sa(dp184
g50
g166
sg148
S'yes'
p185
sa(dp186
g50
g169
sg148
S'x'
sasg24
Nsg134
(lp187
I2610
aI9332
asg136
(lp188
(dp189
g139
S'on_btnSettings_ButRel_1'
p190
sg141
S''
sg142
S'<ButtonRelease-1>'
p191
sasg144
(lp192
(dp193
g50
S'text'
p194
sg148
S'Settings ...'
p195
sg150
Nsasa(dp196
g127
S'Tkinter'
p197
sg50
S'canvas'
p198
sg129
S'Canvas'
p199
sg131
(lp200
(dp201
g50
g163
sg148
S'nw'
p202
sa(dp203
g50
g166
sg148
S'yes'
p204
sa(dp205
g50
g169
sg148
S'both'
p206
sasg24
Nsg134
(lp207
I5113
aI5331
asg136
(lp208
(dp209
g139
S'canvas_mouseb1move_callback'
p210
sg141
S''
sg142
S'<B1-Motion>'
p211
sa(dp212
g139
S'canvas_mouse1_callback'
p213
sg141
S''
sg142
S'<Button-1>'
p214
sa(dp215
g139
S'canvas_mouseup1_callback'
p216
sg141
S''
sg142
S'<ButtonRelease-1>'
p217
sa(dp218
g139
S'canvas_ArrowDown'
p219
sg141
S''
sg142
S'<KeyRelease-Down>'
p220
sa(dp221
g139
S'canvas_ArrowDown_Shift'
p222
sg141
S''
sg142
S'<Shift-KeyRelease-Down>'
p223
sa(dp224
g139
S'canvas_KP_Add'
p225
sg141
S''
sg142
S'<KeyRelease-KP_Add>'
p226
sa(dp227
g139
S'canvas_KP_ArrowDown'
p228
sg141
S''
sg142
S'<KeyRelease-KP_Down>'
p229
sa(dp230
g139
S'canvas_KP_Enter'
p231
sg141
S''
sg142
S'<KeyRelease-KP_Enter>'
p232
sa(dp233
g139
S'canvas_KP_ArrowLeft'
p234
sg141
S''
sg142
S'<KeyRelease-KP_Left>'
p235
sa(dp236
g139
S'canvas_KP_PageDown'
p237
sg141
S''
sg142
S'<KeyRelease-KP_Next>'
p238
sa(dp239
g139
S'canvas_KP_PageUp'
p240
sg141
S''
sg142
S'<KeyRelease-KP_Prior>'
p241
sa(dp242
g139
S'canvas_KP_ArrowRight'
p243
sg141
S''
sg142
S'<KeyRelease-KP_Right>'
p244
sa(dp245
g139
S'canvas_KP_Subtract'
p246
sg141
S''
sg142
S'<KeyRelease-KP_Subtract>'
p247
sa(dp248
g139
S'canvas_KP_ArrowUp'
p249
sg141
S''
sg142
S'<KeyRelease-KP_Up>'
p250
sa(dp251
g139
S'canvas_ArrowLeft'
p252
sg141
S''
sg142
S'<KeyRelease-Left>'
p253
sa(dp254
g139
S'canvas_ArrowLeft_Shift'
p255
sg141
S''
sg142
S'<Shift-KeyRelease-Left>'
p256
sa(dp257
g139
S'canvas_PageDown'
p258
sg141
S''
sg142
S'<KeyRelease-Next>'
p259
sa(dp260
g139
S'canvas_PageUp'
p261
sg141
S''
sg142
S'<KeyRelease-Prior>'
p262
sa(dp263
g139
S'canvas_Return'
p264
sg141
S''
sg142
S'<KeyRelease-Return>'
p265
sa(dp266
g139
S'canvas_ArrowRight'
p267
sg141
S''
sg142
S'<KeyRelease-Right>'
p268
sa(dp269
g139
S'canvas_ArrowRight_Shift'
p270
sg141
S''
sg142
S'<Shift-KeyRelease-Right>'
p271
sa(dp272
g139
S'canvas_ArrowUp'
p273
sg141
S''
sg142
S'<KeyRelease-Up>'
p274
sa(dp275
g139
S'canvas_ArrowUp_Shift'
p276
sg141
S''
sg142
S'<Shift-KeyRelease-Up>'
p277
sa(dp278
g139
S'canvas_SPACE'
p279
sg141
S''
sg142
S'<KeyRelease-space>'
p280
sasg144
(lp281
(dp282
g50
S'borderwidth'
p283
sg148
S'n:1'
p284
sg150
Nsa(dp285
g50
S'takefocus'
p286
sg148
I1
sg150
Nsasa(dp287
g127
S'Tkinter'
p288
sg50
S'frameButtons'
p289
sg129
S'Frame'
p290
sg131
(lp291
(dp292
g50
g163
sg148
S'nw'
p293
sa(dp294
g50
g169
sg148
S'x'
sasg24
(I0
I1
I1
tp295
sg134
g135
sg136
(lp296
sg144
(lp297
(dp298
g50
g147
sg148
S'n:1'
p299
sg150
Nsa(dp300
g50
g155
sg148
S'n:1'
p301
sg150
Nsasa(dp302
g127
S'Tkinter'
p303
sg50
S'frameFiles'
p304
sg129
S'Frame'
p305
sg131
(lp306
(dp307
g50
g163
sg148
g202
sa(dp308
g50
g169
sg148
S'y'
sasg24
(I0
I0
tp309
sg134
g135
sg136
(lp310
sg144
(lp311
sa(dp312
g127
g303
sg50
S'frameMain'
p313
sg129
g305
sg131
(lp314
(dp315
g50
g166
sg148
S'yes'
p316
sa(dp317
g50
g169
sg148
S'both'
p318
sasg24
(I0
I1
tp319
sg134
g135
sg136
(lp320
sg144
(lp321
(dp322
g50
g147
sg148
S'n:1'
p323
sg150
Nsasa(dp324
g127
g288
sg50
S'framePicture'
p325
sg129
g290
sg131
(lp326
(dp327
g50
g163
sg148
g202
sa(dp328
g50
g166
sg148
g316
sa(dp329
g50
g169
sg148
g318
sasg24
(I0
I1
I0
tp330
sg134
g135
sg136
(lp331
sg144
(lp332
(dp333
g50
g147
sg148
S'n:1'
p334
sg150
Nsa(dp335
g50
S'relief'
p336
sg148
S'raised'
p337
sg150
Nsasa(dp338
g127
S'Tkinter'
p339
sg50
S'frmStatus'
p340
sg129
S'Frame'
p341
sg131
(lp342
(dp343
g50
g163
sg148
S'nw'
p344
sa(dp345
g50
g169
sg148
S'y'
sasg24
(I0
I1
I2
tp346
sg134
g135
sg136
(lp347
sg144
(lp348
sa(dp349
g127
S'Tkinter'
p350
sg50
S'goButton'
p351
sg129
S'Button'
p352
sg131
(lp353
(dp354
g50
g163
sg148
S'sw'
p355
sa(dp356
g50
g166
sg148
g316
sa(dp357
g50
g169
sg148
S'x'
sasg24
Nsg134
(lp358
I6607
aI9332
asg136
(lp359
sg144
(lp360
(dp361
g50
g194
sg148
S'Crops'
p362
sg150
Nsa(dp363
g50
S'activebackground'
p364
sg148
S'c:#0F0'
p365
sg150
Nsa(dp366
g50
S'command'
p367
sg148
S'start_cropping'
p368
sg150
I0
sasa(dp369
g127
g197
sg50
S'lbFiles'
p370
sg129
S'Listbox'
p371
sg131
(lp372
(dp373
g50
g163
sg148
g202
sa(dp374
g50
g169
sg148
S'y'
sasg24
Nsg134
(lp375
I1219
aI7964
asg136
(lp376
(dp377
g139
S'on_lbFiles_mouseClick_1'
p378
sg141
S''
sg142
S'<ButtonRelease-1>'
p379
sasg144
(lp380
(dp381
g50
S'takefocus'
p382
sg148
I1
sg150
Nsasa(dp383
g127
g350
sg50
S'plusButton'
p384
sg129
g352
sg131
(lp385
(dp386
g50
g163
sg148
g355
sa(dp387
g50
g166
sg148
g316
sa(dp388
g50
g169
sg148
S'x'
sasg24
Nsg134
(lp389
I5602
aI9332
asg136
(lp390
sg144
(lp391
(dp392
g50
g194
sg148
S'+'
sg150
Nsa(dp393
g50
g367
sg148
S'plus_box'
p394
sg150
I0
sasa(dp395
g127
g350
sg50
S'quitButton'
p396
sg129
g352
sg131
(lp397
(dp398
g50
g163
sg148
g355
sa(dp399
g50
g166
sg148
g316
sa(dp400
g50
g169
sg148
S'x'
sasg24
Nsg134
(lp401
I7377
aI9332
asg136
(lp402
(dp403
g139
S'on_quitButton_ButRel_1'
p404
sg141
S''
sg142
S'<ButtonRelease-1>'
p405
sasg144
(lp406
(dp407
g50
g194
sg148
S'Quit'
p408
sg150
Nsa(dp409
g50
g364
sg148
S'c:#F00'
p410
sg150
Nsa(dp411
g50
g367
sg148
S'quit'
p412
sg150
I0
sasa(dp413
g127
g350
sg50
S'resetButton'
p414
sg129
g352
sg131
(lp415
(dp416
g50
g163
sg148
g355
sa(dp417
g50
g166
sg148
g316
sa(dp418
g50
g169
sg148
S'x'
sasg24
Nsg134
(lp419
I3173
aI9332
asg136
(lp420
sg144
(lp421
(dp422
g50
g194
sg148
S'Reset'
p423
sg150
Nsa(dp424
g50
g364
sg148
S'c:#F00'
p425
sg150
Nsa(dp426
g50
g367
sg148
S'reset'
p427
sg150
I0
sasa(dp428
g127
g197
sg50
S'sbFiles'
p429
sg129
S'Scrollbar'
p430
sg131
(lp431
(dp432
g50
g163
sg148
g202
sa(dp433
g50
g169
sg148
S'y'
sasg24
Nsg134
(lp434
I1843
aI7964
asg136
(lp435
sg144
(lp436
sa(dp437
g127
g350
sg50
S'undoButton'
p438
sg129
g352
sg131
(lp439
(dp440
g50
g163
sg148
g355
sa(dp441
g50
g166
sg148
g316
sa(dp442
g50
g169
sg148
S'x'
sasg24
Nsg134
(lp443
I3794
aI9332
asg136
(lp444
sg144
(lp445
(dp446
g50
g194
sg148
S'Undo'
p447
sg150
Nsa(dp448
g50
g364
sg148
S'c:#FF0'
p449
sg150
Nsa(dp450
g50
g367
sg148
S'undo_last'
p451
sg150
I0
sasa(dp452
g127
g350
sg50
S'unzoomButton'
p453
sg129
g352
sg131
(lp454
(dp455
g50
g163
sg148
g355
sa(dp456
g50
g166
sg148
g316
sa(dp457
g50
g169
sg148
S'x'
sasg24
Nsg134
(lp458
I4897
aI9327
asg136
(lp459
sg144
(lp460
(dp461
g50
g194
sg148
S'<-|->'
p462
sg150
Nsa(dp463
g50
g364
sg148
S'c:#00F'
p464
sg150
Nsa(dp465
g50
g367
sg148
S'unzoom_image'
p466
sg150
I0
sasa(dp467
g127
g350
sg50
S'zoomButton'
p468
sg129
S'Checkbutton'
p469
sg131
(lp470
(dp471
g50
g163
sg148
g355
sa(dp472
g50
g166
sg148
g316
sa(dp473
g50
g169
sg148
S'x'
sasg24
Nsg134
(lp474
I4175
aI9332
asg136
(lp475
sg144
(lp476
(dp477
g50
S'text'
p478
sg148
S'Zoom'
p479
sg150
Nsa(dp480
g50
S'command'
p481
sg148
S'zoom_mode'
p482
sg150
I0
sasasS'BaseClass'
p483
g53
sg34
I1
sa(dp484
S'Requested'
p485
S'Gui'
p486
sS'Name'
p487
S'Preferences'
p488
sS'SelectedWidreq'
p489
NsS'Text'
p490
(dp491
g36
S'24.0'
p492
sg38
(lp493
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                 Preferences                                  #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass Preferences(Tkinter.Frame):\n    def __init__(self,Master=None,*pos,**kw):\n'
p494
aS'        #\n        #Your code here\n        #\n'
p495
aS'\n        apply(Tkinter.Frame.__init__,(self,Master),kw)\n\n'
p496
aS'        #\n        #Your code here\n        #\n'
p497
aS'    #\n    #Start of event handler methods\n    #\n'
p498
aS'\n'
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p499
aS''
asg7
I0
sg45
I9763455
ssS'Lines'
p500
(lp501
sS'BaseClass'
p502
S'Tkinter.Frame'
p503
sS'Widreqs'
p504
(lp505
(dp506
S'ModuleName'
p507
S'Tkinter'
p508
sg487
g488
sS'WidgetName'
p509
S'Frame'
p510
sS'PackOptions'
p511
(lp512
sS'Options'
p513
(lp514
sS'XY'
p515
(I0
I0
tp516
sS'Bindings'
p517
(lp518
sS'ID'
p519
(I0
tp520
sasS'Type'
p521
g503
sS'OnTab'
p522
I1
sasS'VisibleForm'
p523
g6
sS'SelectedForm'
p524
g6
sg50
g6
sa.