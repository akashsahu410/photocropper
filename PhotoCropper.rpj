(lp1
(dp2
S'ModulePrevious'
p3
S'scancropper'
p4
sS'ModuleCurrent'
p5
S'PhotoCropper'
p6
sS'Version'
p7
I1
sS'Geometry'
p8
S'3835x2065+3+28'
p9
sS'ProjectName'
p10
g6
sS'ImportTypes'
p11
(lp12
(S'Pmw'
p13
S'import'
p14
tp15
a(S'Tkinter'
p16
S'import'
p17
tp18
asS'EditorWidths'
p19
((lp20
I411
aI324
a(lp21
I378
aI357
a(lp22
I369
aI366
atp23
sS'ID'
p24
S'Rapyd Project'
p25
sS'ParkingLot'
p26
(dp27
S'SelectedWidreq'
p28
NsS'Widreqs'
p29
(lp30
ssa(dp31
S'PreviousForm'
p32
S'-Main-'
p33
sS'OnTab'
p34
I1
sg33
(dp35
S'Cursor'
p36
S'66.16'
p37
sS'Text'
p38
(lp39
S''
aS"#!/usr/bin/env python2\n# -*- coding: utf-8 -*-\n\n'''\n"
p40
aS'import rpErrorHandler\nimport Tkinter\n'
p41
aS'\ndef window_close():\n    conf[\'geometry\'] = Root.geometry()\n    conf.save() # Save configuration to keep window geometry\n    Root.destroy()\n\ntry:\n    #--------------------------------------------------------------------------#\n    # User code should go after this comment so it is inside the "try".        #\n    #     This allows rpErrorHandler to gain control on an error so it         #\n    #     can properly display a Rapyd-aware error message.                    #\n    #--------------------------------------------------------------------------#\n\n    # Adjust sys.path so we can find other modules of this project\n    if \'.\' not in sys.path:\n        sys.path.append(\'.\')\n    #Put lines to import other modules of this project here\n \n    if __name__ == \'__main__\':\n        # Parse arguments\n        parser = argparse.ArgumentParser(description=\'Picture cropper\')\n        parser.add_argument(\'-c\', \'--config\', \'--config-file\', dest=\'configFile\', default=None, help=\'Configuration file path\')\n        parser.add_argument(\'-d\', \'--debug\', default=False, action="store_true", dest="debug", help=\'Show debugging information\')\n        parser.add_argument(\'-i\', \'--input-dir\', \'--input-directory\', dest="inputDir", default=None, help=\'Input directory with pictures to be cropped\')\n        parser.add_argument(\'-o\', \'--output-dir\', \'--output-directory\', dest="outputDir", default=None, help=\'Output directory for storing cropped pictures\')\n        args = parser.parse_args()\n        \n        logging.basicConfig(format=\'%(levelname)s: %(message)s\', level=logging.INFO)\n        log = logging.getLogger(\'Photo Cropper\')\n        if args.debug:\n            log.setLevel(logging.DEBUG)\n        log.debug(args)\n        \n        \'\'\'\n'
p42
aS"        Root = Tkinter.Tk()\n        Tkinter.CallWrapper = rpErrorHandler.CallWrapper\n        App = PhotoCropper(Root)\n        App.pack(expand='yes',fill='both')\n"
p43
aS'        \'\'\'\n        Root = Tkinter.Tk()\n        App = PhotoCropper(Root)\n        App.pack(expand=\'yes\', fill=\'both\')\n        # Load configuration\n        conf = ScanConfig(args.configFile, App.__class__.__name__)\n        \n        # Process input parameters\n        if args.inputDir is not None:\n            # Check if input dir exists\n            if os.path.isdir(args.inputDir):\n                conf[\'input-directory\'] = args.inputDir\n            else:\n                log.error("Value for input directory \'{0}\' is not a directory".format(args.inputDir))\n                exit(1)\n        \n        if args.outputDir is not None:\n            # Check if output dir exists\n            if os.path.isdir(args.outputDir):\n                conf[\'output-directory\'] = args.outputDir\n            else:\n                log.error("Value for output directory \'{0}\' is not a directory".format(args.outputDir))\n                exit(1)\n\n        # Set window\n        Root.geometry(conf[\'geometry\'])\n        # Allow closing windows by clicking "X"\n        Root.protocol("WM_DELETE_WINDOW", window_close)\n        Root.title(\'Photo Cropper\')\n        App.config = conf\n        App.load_image_list()\n        Root.mainloop()\n    #--------------------------------------------------------------------------#\n    # User code should go above this comment.                                  #\n    #--------------------------------------------------------------------------#\nexcept:\n    \'\'\'\n    rpErrorHandler.RunError()\n    \'\'\'\n    raise'
p44
asg7
I0
sS'Sha'
p45
I15519103
ssS'Forms'
p46
(lp47
(dp48
S'Requested'
p49
g38
sS'Name'
p50
S'PhotoCropper'
p51
sg28
S'canvas'
p52
sS'Type'
p53
S'Tkinter.Frame'
p54
sS'Lines'
p55
(lp56
(lp57
I2415
aI5000
aI1
aa(lp58
I6208
aI7908
aI0
aa(lp59
I6208
aI9702
aI0
aasg38
(dp60
g36
S'666.11'
p61
sg38
(lp62
S"#------------------------------------------------------------------------------#\n#                                                                              #\n#                                 PhotoCropper                                 #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass PhotoCropper(Tkinter.Frame):\n    def __init__(self,Master=None,*pos,**kw):\n        kw['borderwidth'] = '5'\n        kw['height'] = '1'\n        kw['width'] = '1'\n"
p63
aS"# This code was deliberately ugly in order to prevent Rapyd-Tk from being\n# too smart\n\n'''\nimport argparse\nimport logging\nimport os\nimport re\nimport sys\n\nimport ConfigParser as confpars\nimport Tkinter, tkMessageBox\n\nfrom PIL import Image, ImageTk\n    \nclass PhotoCropper(Tkinter.Frame):\n    def __init__(self, Master=None, *pos, **kw):\n        kw['borderwidth'] = '5'\n        kw['height'] = '1'\n        kw['width'] = '1'\n        #\n        #Your code here\n        #\n"
p64
aS"\n        apply(Tkinter.Frame.__init__,(self,Master),kw)\n        self.bind('<Configure>',self.on_PhotoCropper_Config)\n        self.textStatus = Tkinter.StringVar()\n        self.frameFiles = Tkinter.Frame(self,highlightcolor='darkred'\n            ,highlightthickness='3',width='1')\n        self.frameFiles.pack(anchor='nw',fill='y',side='left')\n        self.sbFiles = Tkinter.Scrollbar(self.frameFiles)\n        self.sbFiles.pack(anchor='nw',fill='y',side='right')\n        self.lbFiles = Tkinter.Listbox(self.frameFiles,takefocus=1\n            ,yscrollcommand=self.sbFiles.set)\n        self.lbFiles.pack(anchor='nw',fill='y',side='right')\n        self.lbFiles.bind('<ButtonRelease-1>',self.on_lbFiles_mouseClick_1)\n        self.lbFiles.bind('<KeyRelease-Down>',self.lbFiles_ArrowDown)\n        self.lbFiles.bind('<KeyRelease-Up>',self.lbFiles_ArrowUp)\n        self.frameMain = Tkinter.Frame(self,borderwidth='1',width='1')\n        self.frameMain.pack(expand='yes',fill='both',side='left')\n        self.framePicture = Tkinter.Frame(self.frameMain,borderwidth='1'\n            ,relief='raised')\n        self.framePicture.pack(anchor='nw',expand='yes',fill='both',side='top')\n        self.canvas = Tkinter.Canvas(self.framePicture,borderwidth='1'\n            ,highlightcolor='darkred',highlightthickness='3',takefocus=1)\n        self.canvas.pack(anchor='nw',expand='yes',fill='both',side='bottom')\n        self.canvas.bind('<B1-Motion>',self.canvas_mouseb1move_callback)\n        self.canvas.bind('<Button-1>',self.canvas_mouse1_callback)\n        self.canvas.bind('<ButtonRelease-1>',self.canvas_mouseup1_callback)\n        self.canvas.bind('<KeyRelease-Down>',self.canvas_ArrowDown)\n        self.canvas.bind('<Shift-KeyRelease-Down>',self.canvas_ArrowDown_Shift)\n        self.canvas.bind('<KeyRelease-KP_Add>',self.canvas_KP_Add)\n        self.canvas.bind('<KeyRelease-KP_Down>',self.canvas_KP_ArrowDown)\n        self.canvas.bind('<Control-KeyRelease-KP_Down>' \\\n            ,self.canvas_KP_ArrowDown_Control)\n        self.canvas.bind('<KeyRelease-KP_Enter>',self.canvas_KP_Enter)\n        self.canvas.bind('<KeyRelease-KP_Left>',self.canvas_KP_ArrowLeft)\n        self.canvas.bind('<Control-KeyRelease-KP_Left>' \\\n            ,self.canvas_KP_ArrowLeft_Control)\n        self.canvas.bind('<KeyRelease-KP_Next>',self.canvas_KP_PageDown)\n        self.canvas.bind('<KeyRelease-KP_Prior>',self.canvas_KP_PageUp)\n        self.canvas.bind('<KeyRelease-KP_Right>',self.canvas_KP_ArrowRight)\n        self.canvas.bind('<Control-KeyRelease-KP_Right>' \\\n            ,self.canvas_KP_ArrowRight_Control)\n        self.canvas.bind('<KeyRelease-KP_Subtract>',self.canvas_KP_Subtract)\n        self.canvas.bind('<KeyRelease-KP_Up>',self.canvas_KP_ArrowUp)\n        self.canvas.bind('<Control-KeyRelease-KP_Up>' \\\n            ,self.canvas_KP_ArrowUp_Control)\n        self.canvas.bind('<KeyRelease-Left>',self.canvas_ArrowLeft)\n        self.canvas.bind('<Shift-KeyRelease-Left>',self.canvas_ArrowLeft_Shift)\n        self.canvas.bind('<KeyRelease-Next>',self.canvas_PageDown)\n        self.canvas.bind('<KeyRelease-Prior>',self.canvas_PageUp)\n        self.canvas.bind('<KeyRelease-Return>',self.canvas_Return)\n        self.canvas.bind('<KeyRelease-Right>',self.canvas_ArrowRight)\n        self.canvas.bind('<Shift-KeyRelease-Right>' \\\n            ,self.canvas_ArrowRight_Shift)\n        self.canvas.bind('<KeyRelease-Up>',self.canvas_ArrowUp)\n        self.canvas.bind('<Shift-KeyRelease-Up>',self.canvas_ArrowUp_Shift)\n        self.canvas.bind('<KeyRelease-space>',self.canvas_SPACE)\n        self.frameButtons = Tkinter.Frame(self.frameMain,borderwidth='1'\n            ,height='1')\n        self.frameButtons.pack(anchor='nw',fill='x',side='top')\n        self.btnSettings = Tkinter.Button(self.frameButtons,text='Settings ...')\n        self.btnSettings.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.btnSettings.bind('<ButtonRelease-1>',self.on_btnSettings_ButRel_1)\n        self.resetButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#F00',command=self.reset,text='Reset')\n        self.resetButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.undoButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#FF0',command=self.undo_last,text='Undo')\n        self.undoButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.zoomButton = Tkinter.Checkbutton(self.frameButtons\n            ,command=self.zoom_mode,text='Zoom')\n        self.zoomButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.unzoomButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#00F',command=self.unzoom_image,text='<-|->')\n        self.unzoomButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.plusButton = Tkinter.Button(self.frameButtons,command=self.plus_box\n            ,text='+')\n        self.plusButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.goButton = Tkinter.Button(self.frameButtons,activebackground='#0F0'\n            ,command=self.start_cropping,text='Crops')\n        self.goButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.quitButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#F00',command=self.quit,text='Quit')\n        self.quitButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.quitButton.bind('<ButtonRelease-1>',self.on_quitButton_ButRel_1)\n        self.frmStatus = Tkinter.Frame(self.frameMain)\n        self.frmStatus.pack(anchor='nw',fill='y',side='top')\n        self.lblStatus = Tkinter.Label(self.frmStatus,relief='sunken'\n            ,text='This is label',textvariable=self.textStatus)\n        self.lblStatus.pack(anchor='sw',expand='yes',fill='y',side='top')\n"
p65
aS'        #\n        #Your code here\n        #\n        self.sbFiles.config(command=self.lbFiles.yview)\n        self.quitButton_ttp = CreateToolTip(self.quitButton, "Exit")\n        self.resetButton_ttp = CreateToolTip(self.resetButton, "Reset all rectangles")\n        self.undoButton_ttp = CreateToolTip(self.undoButton, "Undo last rectangle")\n        self.zoomButton_ttp = CreateToolTip(self.zoomButton, "On/Off Zoom mode")\n        self.unzoomButton_ttp = CreateToolTip(self.unzoomButton, "Unzoom, view all image")\n        self.plusButton_ttp = CreateToolTip(self.plusButton, "Plus box, extent rectangle")\n        self.goButton_ttp = CreateToolTip(self.goButton, "Go, begin cropping")\n        self.btnInputDirSettings_ttp = CreateToolTip(self.btnSettings, "Settings")\n        self.croprect_start = None\n        self.croprect_end = None\n        self.crop_count = 0\n        self.canvas_rects = []\n        self.crop_rects = []\n        self.current_rect = None\n        self.zoommode = False\n        self.w = 1\n        self.h = 1\n        self.x0 = 0\n        self.y0 = 0\n        self.n = 0\n        self.config = None\n        self.delimiters = \' |,|\\t|#|\\|\' # String delimiters\n        self._after_id = None\n        self.filename = None\n        self.lbIndex = None # Keeps item index in listbox\n        self.cropIndex = 0\n'
p66
aS'    #\n    #Start of event handler methods\n    #\n'
p67
aS'\n'
aS'\n    def canvas_ArrowDown(self'
p68
aS', event=None):\n        # MOVES crop rectangle ONE pixel DOWN\n        self.move_rect(self.cropIndex, 0, 1)\n'
p69
aS'\n    def canvas_ArrowDown_Shift(self'
p70
aS", event=None):\n        # MOVES crop rectangle AMOUNT OF pixels DOWN\n        self.move_rect(self.cropIndex, 0, int(self.config['move-resize-step']))\n"
p71
aS'\n    def canvas_ArrowLeft(self'
p72
aS', event=None):\n        # MOVES crop rectangle ONE pixel LEFT\n        self.move_rect(self.cropIndex, -1, 0)\n'
p73
aS'\n    def canvas_ArrowLeft_Shift(self'
p74
aS", event=None):\n        # MOVES crop rectangle AMOUNT OF pixels LEFT\n        self.move_rect(self.cropIndex, -int(self.config['move-resize-step']), 0)\n"
p75
aS'\n    def canvas_ArrowRight(self'
p76
aS', event=None):\n        # MOVES crop rectangle ONE pixel RIGHT\n        self.move_rect(self.cropIndex, 1, 0)\n'
p77
aS'\n    def canvas_ArrowRight_Shift(self'
p78
aS", event=None):\n        # MOVES crop rectangle AMOUNT OF pixels RIGHT\n        self.move_rect(self.cropIndex, int(self.config['move-resize-step']), 0)\n"
p79
aS'\n    def canvas_ArrowUp(self'
p80
aS', event=None):\n        # MOVES crop rectangle ONE pixel UP\n        self.move_rect(self.cropIndex, 0, -1)\n'
p81
aS'\n    def canvas_ArrowUp_Shift(self'
p82
aS", event=None):\n        # MOVES crop rectangle AMOUNT OF pixels UP\n        self.move_rect(self.cropIndex, 0, -int(self.config['move-resize-step']))\n"
p83
aS'\n    def canvas_KP_Add(self'
p84
aS', event=None):\n        # INCREASES size of crop rectangle for AMOUNT OF pixels on both X- and Y-axes\n        log.debug("Canvas keypress numerical keypad PLUS")\n        self.resize_rect(self.cropIndex, int(self.config[\'move-resize-step\']), int(self.config[\'move-resize-step\']))\n'
p85
aS'\n    def canvas_KP_ArrowDown(self'
p86
aS', event=None):\n        # INCREASES size of crop rectangle by ONE pixel on Y axes\n        self.resize_rect(self.cropIndex, 0, 1)\n'
p87
aS'\n    def canvas_KP_ArrowDown_Control(self'
p88
aS", event=None):\n        # INCREASES size of crop rectangle by AMOUNT OF pixels on Y axes\n        self.resize_rect(self.cropIndex, 0, int(self.config['move-resize-step']))\n"
p89
aS'\n    def canvas_KP_ArrowLeft(self'
p90
aS', event=None):\n        # DECREASES size of crop rectangle by ONE pixel on X axes\n        self.resize_rect(self.cropIndex, -1, 0)\n'
p91
aS'\n    def canvas_KP_ArrowLeft_Control(self'
p92
aS", event=None):\n        # DECREASES size of crop rectangle by AMOUNT OF pixels on X axes\n        self.resize_rect(self.cropIndex, -int(self.config['move-resize-step']), 0)\n"
p93
aS'\n    def canvas_KP_ArrowRight(self'
p94
aS', event=None):\n        # INCREASES size of crop rectangle ONE pixel on X axes\n        self.resize_rect(self.cropIndex, 1, 0)\n'
p95
aS'\n    def canvas_KP_ArrowRight_Control(self'
p96
aS", event=None):\n        # INCREASES size of crop rectangle AMOUNT OF pixels on X axes\n        self.resize_rect(self.cropIndex, int(self.config['move-resize-step']), 0)\n"
p97
aS'\n    def canvas_KP_ArrowUp(self'
p98
aS', event=None):\n        # DECREASES size of crop rectangle ONE pixel on Y axes\n        self.resize_rect(self.cropIndex, 0, -1)\n'
p99
aS'\n    def canvas_KP_ArrowUp_Control(self'
p100
aS", event=None):\n        # DECREASES size of crop rectangle AMOUNT OF pixels on Y axes\n        self.resize_rect(self.cropIndex, 0, -int(self.config['move-resize-step']))\n"
p101
aS'\n    def canvas_KP_Enter(self'
p102
aS', event=None):\n        # CROPS selected areas\n        log.debug("Canvas keypress numerical keypad ENTER")\n        self.start_cropping()\n'
p103
aS'\n    def canvas_KP_PageDown(self'
p104
aS', event=None):\n        # Moves file selection in listbox one down\n        log.debug("Canvas keypress numerical keypad Page Down")\n        self.pressPage(self.MOVE_DOWN)\n'
p105
aS'\n    def canvas_KP_PageUp(self'
p106
aS', event=None):\n        # Moves file selection in listbox one up\n        self.pressPage(self.MOVE_UP)\n'
p107
aS'\n    def canvas_KP_Subtract(self'
p108
aS', event=None):\n        # Reduces rectangle by AMOUNT OF pixels on both X- and Y-axes\n        log.debug("Canvas keypress numerical keypad MINUS")\n        self.resize_rect(self.cropIndex, -int(self.config[\'move-resize-step\']), -int(self.config[\'move-resize-step\']))\n'
p109
aS'\n    def canvas_PageDown(self'
p110
aS', event=None):\n        # Moves file selection in listbox one DOWN\n        log.debug("Canvas keypress Page Down")\n        self.pressPage(self.MOVE_DOWN)\n'
p111
aS'\n    def canvas_PageUp(self'
p112
aS', event=None):\n        # Moves file selection in listbox one UP\n        log.debug("Canvas keypress Page Up")\n        self.pressPage(self.MOVE_UP)\n'
p113
aS'\n    def canvas_Return(self'
p114
aS', event=None):\n        # CROPS selected areas\n        log.debug("Canvas keypress ENTER")\n        self.start_cropping()\n'
p115
aS'\n    def canvas_SPACE(self'
p116
aS', event=None):\n        # CROPS selected areas\n        log.debug("Canvas keypress SPACE")\n        self.start_cropping()\n'
p117
aS'\n    def canvas_mouse1_callback(self'
p118
aS', event=None):\n        self.croprect_start = (event.x, event.y)\n        log.debug("Crop rectangle START: x={0} y={1}".format(event.x, event.y))\n'
p119
aS'\n    def canvas_mouseb1move_callback(self'
p120
aS', event=None):\n        if self.current_rect:\n            self.canvas.delete(self.current_rect)\n        x1 = self.croprect_start[0]\n        y1 = self.croprect_start[1]\n        x2 = event.x\n        y2 = event.y\n        bbox = (x1, y1, x2, y2)\n        cr = self.canvas.create_rectangle(bbox)\n        self.current_rect = cr\n'
p121
aS'\n    def canvas_mouseup1_callback(self'
p122
aS', event=None):\n        self.croprect_end = (event.x, event.y)\n        log.debug("Crop rectangle END: x={0} y={1}".format(event.x, event.y))\n        self.set_crop_area()\n        self.canvas.delete(self.current_rect)\n        self.current_rect = None\n'
p123
aS'\n    def lbFiles_ArrowDown(self'
p124
aS', event=None):\n        # Moves file selection in listbox one DOWN\n        log.debug("Files listbox arrow DOWN")\n        self.pressPage(self.MOVE_DOWN)\n'
p125
aS'\n    def lbFiles_ArrowUp(self'
p126
aS', event=None):\n        # Moves file selection in listbox one UP\n        log.debug("Files listbox arrow UP")\n        self.pressPage(self.MOVE_UP)\n'
p127
aS'\n    def on_PhotoCropper_Config(self'
p128
aS', event=None):\n        if self._after_id:\n            self.after_cancel(self._after_id)\n        self._after_id = self.after(1200, self.draw_after_resize)\n'
p129
aS'\n    def on_btnSettings_ButRel_1(self'
p130
aS', event=None):\n        tkMessageBox.showinfo("Information", "Not yet implemented.", parent=self)\n'
p131
aS'\n    def on_lbFiles_mouseClick_1(self'
p132
aS', event=None):\n        self.lbIndex = self.lbFiles.curselection()[0]\n        log.debug("File listbox selected")\n        self.load_lbFiles_image(self.lbFiles.get(self.lbIndex))\n'
p133
aS'\n    def on_quitButton_ButRel_1(self'
p134
aS', event=None):\n        conf[\'geometry\'] = self.winfo_toplevel().geometry()\n        conf.save()\n        log.debug("Clicked \'Quit\' button")\n        self.quit()\n'
p135
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p136
aS'    \n    # Constants for listbox with image file names\n    MOVE_UP = -1\n    MOVE_DOWN = 1\n    MOVE_RIGHT = 1\n    MOVE_LEFT = -1\n    \n    # Moves rectangle with "index" by "step" pixels\n    def move_rect(self, index, xstep, ystep):\n        if len(self.crop_rects) == index + 1:\n            cr = self.crop_rects[index]\n            self.canvas.delete(self.canvas_rects[index])\n            self.canvas_rects.pop(index)\n            self.crop_rects[index] = cr.move_rect(xstep, ystep)\n            log.debug("Crop area moved: index={0} crop={1}".format(index, self.crop_rects[index]))\n            self.redraw_rect()\n\n    def resize_rect(self, index, xstep, ystep):\n        if len(self.crop_rects) == index + 1:\n            cr = self.crop_rects[index]\n            self.canvas.delete(self.canvas_rects[index])\n            self.canvas_rects.pop(index)\n            self.crop_rects[index] = cr.resize_rect(xstep, ystep)\n            log.debug("Crop area resized: index={0} crop={1}".format(index, self.crop_rects[index]))\n            self.redraw_rect()\n        \n    def pressPage(self, direction=0):\n        index = self.lbFiles.curselection()[0] + direction\n        self.lbFiles.selection_clear(0, Tkinter.END)\n        self.lbSelect(index)\n        # Move scrollbar in listbox so that it corresponds to selection\n        self.lbFiles.yview_scroll(direction, \'units\')\n\n    # Programmatically select image in a listbox\n    def lbSelect(self, index):\n        if index < 0:\n            index = 0\n        elif index == self.lbFiles.size():\n            index = self.lbFiles.size()-1  \n        self.lbFiles.select_set(index)\n        self.lbFiles.activate(index)\n        log.debug("lbSelect: Got index {0}, listbox index {1}".format(index, self.lbIndex))\n        if index != self.lbIndex:\n            self.load_lbFiles_image(self.lbFiles.get(Tkinter.ACTIVE))\n            self.lbIndex = index\n        \n    def draw_after_resize(self):\n        # Check if there is a selection in file list\n        if self.filename:\n            self.loadimage()\n \n    def load_lbFiles_image(self, imagePath):\n        self.filename = os.path.join(self.config[\'input-directory\'], imagePath)\n        if os.path.exists(self.filename):\n            self.loadimage()\n            self.winfo_toplevel().title(\'Photo Cropper - \' + imagePath)\n            self.redraw_rect()\n       \n    def set_crop_area(self):\n        r = Rect(self.croprect_start, self.croprect_end)\n        r.set_thumboffset(int(self.config[\'thumb-offset\']))\n        \n        # adjust dimensions\n        r.clip_to(self.image_thumb_rect)\n\n        # ignore rects smaller than this size\n        if min(r.h, r.w) < 10:\n            return\n\n        ra = r\n        ra = ra.scale_rect(self.scale)\n        ra = ra.move_rect(self.x0, self.y0)\n        ra = ra.valid_rect(self.w, self.h)\n        if self.zoommode:\n            self.canvas.delete(Tkinter.ALL)\n            self.x0 = ra.left\n            self.y0 = ra.top\n            za = (ra.left, ra.top, ra.right, ra.bottom)\n            self.image_thumb = self.image.crop(za)\n            self.image_thumb.thumbnail(thumbsize)\n            self.image_thumb_rect = Rect(self.image_thumb.size)\n            self.image_thumb_rect.set_thumboffset(int(self.config[\'thumb-offset\']))\n            self.displayimage()\n            x_scale = float(ra.w) / self.image_thumb_rect.w\n            y_scale = float(ra.h) / self.image_thumb_rect.h\n            self.scale = (x_scale, y_scale)\n            self.redraw_rect()\n            self.zoommode = False\n            self.zoomButton.deselect()\n        else:\n            self.drawrect(r)\n            self.crop_rects.append(ra)\n            self.n = self.n + 1\n\n    def zoom_mode(self):\n        if self.zoommode:\n            self.zoommode = False\n        else:\n            self.zoommode = True\n        log9.debug("Zoom mode: {0}".format(self.zoommode))\n\n    def unzoom_image(self):\n        self.canvas.delete(Tkinter.ALL)\n        self.zoommode = False\n        self.zoomButton.deselect()\n        self.x0 = 0\n        self.y0 = 0\n        self.image_thumb = self.image.copy()\n        self.image_thumb.thumbnail(thumbsize)\n        self.image_thumb_rect = Rect(self.image_thumb.size)\n        self.image_thumb_rect.set_thumboffset(int(self.config[\'thumb-offset\']))\n        self.displayimage()\n        x_scale = float(self.image_rect.w) / self.image_thumb_rect.w\n        y_scale = float(self.image_rect.h) / self.image_thumb_rect.h\n        self.scale = (x_scale, y_scale)\n        self.redraw_rect()\n\n    def plus_box(self):\n        if self.n > 1:\n            self.canvas.delete(Tkinter.ALL)\n            if self.crop_rects:\n                ra = self.crop_rects[self.n - 1]\n                self.crop_rects.pop()\n                self.n = self.n - 1\n                ra0 = self.crop_rects[self.n - 1]\n                ra0 = ra0.plus_rect(ra)\n                self.crop_rects[self.n - 1] = ra0\n                self.displayimage()\n                self.redraw_rect()\n                self.zoommode = False\n                self.zoomButton.deselect()\n\n    def redraw_rect(self):\n        self.displayimage()\n        for croparea in self.crop_rects:\n            self.drawrect(croparea.rescale_rect(self.scale, self.x0, self.y0))\n\n    def undo_last(self):\n        if self.canvas_rects:\n            r = self.canvas_rects.pop()\n            self.canvas.delete(r)\n\n        if self.crop_rects:\n            self.crop_rects.pop()\n\n    def drawrect(self, rect):\n        bbox = (rect.left, rect.top, rect.right, rect.bottom)\n        cr = self.canvas.create_rectangle(\n            bbox, activefill=\'\', fill=\'yellow\', stipple=self.config[\'stipple\'])\n        self.canvas_rects.append(cr)\n\n    def reset(self):\n        self.canvas.delete(Tkinter.ALL)\n        self.zoommode = False\n        self.zoomButton.deselect()\n        self.canvas_rects = []\n        self.crop_rects = []\n        self.displayimage()\n        log.debug("Canvas reset")\n        \n    def displayimage(self):\n        self.photoimage = ImageTk.PhotoImage(self.image_thumb)\n        w, h = self.image_thumb.size\n        self.canvas.delete("all") # Remove remnants of previous crop area\n        \n        self.canvas.create_image(\n            int(self.config[\'thumb-offset\']),\n            int(self.config[\'thumb-offset\']),\n            anchor=Tkinter.NW,\n            image=self.photoimage)\n\n    def loadimage(self):\n        self.image = Image.open(self.filename)\n        self.textStatus.set("{0} size {1}".format(os.path.basename(self.filename), self.image.size))\n        log.debug("Loaded \'{0}\', size {1}".format(os.path.basename(self.filename), self.image.size))\n        self.image_rect = Rect(self.image.size)\n        self.image_rect.set_thumboffset(int(self.config[\'thumb-offset\']))\n        self.w = self.image_rect.w\n        self.h = self.image_rect.h\n        # TODO: needed? borderwidth = self.canvas.config()[\'borderwidth\'][4]\n        \n        self.image_thumb = self.image.copy()\n        self.image_thumb.thumbnail(\n            [ self.canvas.winfo_width() - int(self.config[\'thumb-offset\']),\n              self.canvas.winfo_height() - int(self.config[\'thumb-offset\']) ]\n        )\n        self.image_thumb_rect = Rect(self.image_thumb.size)\n        self.image_thumb_rect.set_thumboffset(int(self.config[\'thumb-offset\']))\n\n        self.displayimage()\n        x_scale = float(self.image_rect.w) / self.image_thumb_rect.w\n        y_scale = float(self.image_rect.h) / self.image_thumb_rect.h\n        self.scale = (x_scale, y_scale)\n\n    def newfilename(self, filenum):\n        f, e = os.path.splitext(self.filename)\n        return \'%s_crop_%s%s\' % (f, filenum, e)\n\n    def start_cropping(self):\n        cropcount = 0\n        status = "CROPPED {0} - region(s): ".format(self.lbFiles.get(Tkinter.ACTIVE))\n        for croparea in self.crop_rects:\n            cropcount += 1\n            filename = self.newfilename(cropcount)\n            _, tail = os.path.split(filename) # Remove input directory\n            self.crop(croparea, tail)\n            status += "{0}:{1} ".format(cropcount, croparea)\n        if cropcount != 0:\n            self.textStatus.set(status.strip())\n\n    def crop(self, croparea, filename):\n        ca = (croparea.left, croparea.top, croparea.right, croparea.bottom)\n        newimg = self.image.crop(ca)\n        imagePath = os.path.join(self.config[\'output-directory\'], filename)\n        log.debug("Cropping area {0} of \'{1}\' to \'{2}\'".format(ca, os.path.basename(self.filename), imagePath))\n        newimg.save(imagePath)\n        \n    def load_image_list(self):\n        if self.config is not None:\n            self.lbFiles.delete(0, Tkinter.END)\n            suffixtuple = tuple(re.split(self.delimiters, self.config[\'image-extensions\']))\n            for item in sorted(os.listdir(self.config[\'input-directory\'])):\n                if os.path.isfile(os.path.join(self.config[\'input-directory\'], item)):\n                    if item.lower().endswith(suffixtuple): # The arg can be a tuple of suffixes to look for\n                        self.lbFiles.insert(Tkinter.END, item)\n            self.update_idletasks()\n            # If there are items in listbox, select the 1st one\n            if self.lbFiles.size() > 0:\n                self.lbFiles.select_set(0)\n                self.load_lbFiles_image(self.lbFiles.get(Tkinter.ACTIVE))\n                self.canvas.focus_set()\n\n\nclass CreateToolTip(object):\n    """\n    create a tooltip for a given widget\n    """\n    def __init__(self, widget, text=\'widget info\'):\n        self.waittime = 500     #miliseconds\n        self.wraplength = 180   #pixels\n        self.widget = widget\n        self.text = text\n        self.widget.bind("<Enter>", self.enter)\n        self.widget.bind("<Leave>", self.leave)\n        self.widget.bind("<ButtonPress>", self.leave)\n        self.id = None\n        self.tw = None\n\n    def enter(self, event=None):\n        self.schedule()\n\n    def leave(self, event=None):\n        self.unschedule()\n        self.hidetip()\n\n    def schedule(self):\n        self.unschedule()\n        self.id = self.widget.after(self.waittime, self.showtip)\n\n    def unschedule(self):\n        id = self.id\n        self.id = None\n        if id:\n            self.widget.after_cancel(id)\n\n    def showtip(self, event=None):\n        x = y = 0\n        x, y, cx, cy = self.widget.bbox("insert")\n        x += self.widget.winfo_rootx() + 25\n        y += self.widget.winfo_rooty() + 20\n        # creates a toplevel window\n        self.tw = Tkinter.Toplevel(self.widget)\n        # Leaves only the label and removes the app window\n        self.tw.wm_overrideredirect(True)\n        self.tw.wm_geometry("+%d+%d" % (x, y))\n        label = Tkinter.Label(self.tw, text=self.text, justify=\'left\',\n            background="#fef9e7", relief=\'solid\', borderwidth=1,\n            wraplength = self.wraplength)\n        label.pack(ipadx=1)\n\n    def hidetip(self):\n        tw = self.tw\n        self.tw= None\n        if tw:\n            tw.destroy()\n            \nclass Rect(object):\n    def __init__(self, *args):\n        self.set_points(*args)\n        self.thumboffset = 0\n\n    def set_points(self, *args):\n        if len(args) == 2:\n            pt1 = args[0]\n            pt2 = args[1]\n        elif len(args) == 1:\n            pt1 = (0, 0)\n            pt2 = args[0]\n        elif len(args) == 0:\n            pt1 = (0, 0)\n            pt2 = (0, 0)\n\n        x1, y1 = pt1\n        x2, y2 = pt2\n\n        self.left = min(x1, x2)\n        self.top = min(y1, y2)\n        self.right = max(x1, x2)\n        self.bottom = max(y1, y2)\n\n        self._update_dims()\n\n    def clip_to(self, containing_rect):\n        cr = containing_rect\n        self.top = max(self.top, cr.top + self.thumboffset)\n        self.bottom = min(self.bottom, cr.bottom + self.thumboffset)\n        self.left = max(self.left, cr.left + self.thumboffset)\n        self.right = min(self.right, cr.right + self.thumboffset)\n        self._update_dims()\n\n    def _update_dims(self):\n        """added to provide w and h dimensions."""\n        self.w = self.right - self.left\n        self.h = self.bottom - self.top\n\n    def scale_rect(self, scale):\n        x_scale = scale[0]\n        y_scale = scale[1]\n\n        r = Rect()\n        r.top = int((self.top - self.thumboffset) * y_scale)\n        r.bottom = int((self.bottom - self.thumboffset) * y_scale)\n        r.right = int((self.right - self.thumboffset) * x_scale)\n        r.left = int((self.left - self.thumboffset) * x_scale)\n        r._update_dims()\n\n        return r\n\n    def move_rect(self, x0, y0):\n        r = Rect()\n        r.top = int(self.top + y0)\n        r.bottom = int(self.bottom + y0)\n        r.right = int(self.right + x0)\n        r.left = int(self.left + x0)\n        r._update_dims()\n        return r\n\n    # Resize rectangle by certain amount on X- and Y- axis\n    def resize_rect(self, x0, y0):\n        r = Rect()\n        r.top = self.top\n        r.left = self.left\n        r.bottom = int(self.bottom + y0)\n        r.right = int(self.right + x0)\n        # Make sure rectangle does not disappear!\n        if r.bottom - r.top < 10:\n            r.bottom = self.bottom\n        if r.right - r.left < 10:\n            r.right = self.right\n        r._update_dims()\n        return r\n        \n    def rescale_rect(self, scale, x0, y0):\n        x_scale = scale[0]\n        y_scale = scale[1]\n\n        r = Rect()\n        r.top = int((self.top - y0) / y_scale + self.thumboffset)\n        r.bottom = int((self.bottom - y0) / y_scale + self.thumboffset)\n        r.right = int((self.right - x0) / x_scale + self.thumboffset)\n        r.left = int((self.left - x0) / x_scale + self.thumboffset)\n        r._update_dims()\n        return r\n\n    def plus_rect(self, r0):\n        r = Rect()\n        r.top = min(self.top, r0.top)\n        r.bottom = max(self.bottom, r0.bottom)\n        r.right = max(self.right, r0.right)\n        r.left = min(self.left, r0.left)\n        r._update_dims()\n        return r\n\n    def valid_rect(self, w, h):\n        r = Rect()\n        r.top = self.top\n        if r.top < 0:\n            r.top = 0\n        if r.top > h - 1:\n            r.top = h - 1\n        r.bottom = self.bottom\n        if r.bottom < 1:\n            r.bottom = 1\n        if r.bottom > h:\n            r.bottom = h\n        r.right = self.right\n        if r.right < 1:\n            r.right = 1\n        if r.right > w:\n            r.right = w\n        r.left = self.left\n        if r.left < 0:\n            r.left = 0\n        if r.left > w - 1:\n            r.left = w - 1\n        r._update_dims()\n        return r\n\n    def set_thumboffset(self, thumboffset=0):\n        self.thumboffset = thumboffset\n\n    def __repr__(self):\n        return \'(%d,%d)-(%d,%d)\' % (self.left, self.top, self.right, self.bottom)\n\n# Class that handles configuration\nclass ScanConfig(object):\n\n    def __init__(self, configFile=None, appName=\'PhotoCropper\'):\n        self.section = appName.upper()\n        \n        if configFile is None:\n            # Create default configuration in OS-independent "home" directory\n            configPath = os.path.join(os.path.expanduser(\'~\'), \'.config\', appName.lower())\n            if not os.path.exists(configPath):\n                os.makedirs(configPath)\n                log.debug("Created default configuration path: \'{0}\'".format(configPath))\n\n            self.configFile = os.path.join(configPath, \'config.ini\')\n            log.debug("Loaded configuration from file: \'{0}\'".format(self.configFile))\n            self.config = confpars.SafeConfigParser(self.get_default_config())\n            \n            if os.path.exists(self.configFile):\n                self.config.read(self.configFile)\n            else:\n                self.config.add_section(self.section)\n        elif os.path.exists(configFile):\n            self.configFile = os.path.normpath(configFile)\n            self.config = confpars.SafeConfigParser(self.get_default_config())\n            self.config.read(self.configFile)\n            log.debug("Loaded configuration from file: \'{0}\'".format(self.configFile))\n        else:\n            # Path given, but does not exist\n            raise Exception("Configuration file \'{0}\' does not exist".format(configFile))\n        self.debug()\n\n    # Gets default configuration\n    def get_default_config(self):\n        defconf = {\n            \'geometry\'         : \'1024x768+10+10\', # Position and size of main window\n            \'input-directory\'  : os.path.expanduser(\'~\'), # Directory with pictures to process\n            \'output-directory\' : os.path.expanduser(\'~\'), # Directory to write resulting pictures into\n            \'image-extensions\' : \'tif tiff jpg jpeg gif png\', # Extensions of files considered to be pictures\n            \'thumb-offset\'     : \'4\', # Thumbnail offset from edge of canvas\n            \'stipple\'          : \'gray12\', # Stipple pattern ("net" that shows in crop area)\n            \'move-resize-step\' : \'10\', # Amount of pixels to move crop area in all directions or resize\n        }\n        log.debug("Default configuration: {0}".format(defconf))\n        return defconf\n\n    def __getitem__(self, key):\n        return self.config.get(self.section, key)\n\n    def __setitem__(self, key, value):\n        self.config.set(self.section, key, value)\n\n    def save(self):\n        with open(self.configFile, \'w\') as cf:\n            self.config.write(cf)\n            log.debug("Configuration saved to file \'{0}\'".format(self.configFile))\n            \n    def debug(self):\n        for section_name in self.config.sections():\n            log.debug("Section: [{0}]".format(section_name))\n            for name, value in self.config.items(section_name):\n                log.debug("  {0} = {1}".format(name, value))\n            log.debug("")'
p137
asg7
I0
sg45
I2272383
ssg29
(lp138
(dp139
S'ModuleName'
p140
S'Tkinter'
p141
sg50
g51
sS'WidgetName'
p142
S'Frame'
p143
sS'PackOptions'
p144
(lp145
sg24
(I0
tp146
sS'XY'
p147
(I0
I0
tp148
sS'Bindings'
p149
(lp150
(dp151
S'Handler'
p152
S'on_PhotoCropper_Config'
p153
sS'Component'
p154
S''
sS'Event'
p155
S'<Configure>'
p156
sasS'Options'
p157
(lp158
(dp159
g50
S'borderwidth'
p160
sS'Value'
p161
S'n:5'
p162
sS'Extra'
p163
Nsa(dp164
g50
S'width'
p165
sg161
S'n:1'
p166
sg163
Nsa(dp167
g50
S'height'
p168
sg161
S'n:1'
p169
sg163
Nsasa(dp170
g140
S'Tkinter'
p171
sg50
S'btnSettings'
p172
sg142
S'Button'
p173
sg144
(lp174
(dp175
g50
S'anchor'
p176
sg161
S'sw'
p177
sa(dp178
g50
S'expand'
p179
sg161
S'yes'
p180
sa(dp181
g50
S'fill'
p182
sg161
S'x'
sasg24
Nsg147
(lp183
I2609
aI9332
asg149
(lp184
(dp185
g152
S'on_btnSettings_ButRel_1'
p186
sg154
S''
sg155
S'<ButtonRelease-1>'
p187
sasg157
(lp188
(dp189
g50
S'text'
p190
sg161
S'Settings ...'
p191
sg163
Nsasa(dp192
g140
S'Tkinter'
p193
sg50
S'canvas'
p194
sg142
S'Canvas'
p195
sg144
(lp196
(dp197
g50
g176
sg161
S'nw'
p198
sa(dp199
g50
g179
sg161
S'yes'
p200
sa(dp201
g50
g182
sg161
S'both'
p202
sasg24
Nsg147
(lp203
I5112
aI5331
asg149
(lp204
(dp205
g152
S'canvas_mouseb1move_callback'
p206
sg154
S''
sg155
S'<B1-Motion>'
p207
sa(dp208
g152
S'canvas_mouse1_callback'
p209
sg154
S''
sg155
S'<Button-1>'
p210
sa(dp211
g152
S'canvas_mouseup1_callback'
p212
sg154
S''
sg155
S'<ButtonRelease-1>'
p213
sa(dp214
g152
S'canvas_ArrowDown'
p215
sg154
S''
sg155
S'<KeyRelease-Down>'
p216
sa(dp217
g152
S'canvas_ArrowDown_Shift'
p218
sg154
S''
sg155
S'<Shift-KeyRelease-Down>'
p219
sa(dp220
g152
S'canvas_KP_Add'
p221
sg154
S''
sg155
S'<KeyRelease-KP_Add>'
p222
sa(dp223
g152
S'canvas_KP_ArrowDown'
p224
sg154
S''
sg155
S'<KeyRelease-KP_Down>'
p225
sa(dp226
g152
S'canvas_KP_ArrowDown_Control'
p227
sg154
S''
sg155
S'<Control-KeyRelease-KP_Down>'
p228
sa(dp229
g152
S'canvas_KP_Enter'
p230
sg154
S''
sg155
S'<KeyRelease-KP_Enter>'
p231
sa(dp232
g152
S'canvas_KP_ArrowLeft'
p233
sg154
S''
sg155
S'<KeyRelease-KP_Left>'
p234
sa(dp235
g152
S'canvas_KP_ArrowLeft_Control'
p236
sg154
S''
sg155
S'<Control-KeyRelease-KP_Left>'
p237
sa(dp238
g152
S'canvas_KP_PageDown'
p239
sg154
S''
sg155
S'<KeyRelease-KP_Next>'
p240
sa(dp241
g152
S'canvas_KP_PageUp'
p242
sg154
S''
sg155
S'<KeyRelease-KP_Prior>'
p243
sa(dp244
g152
S'canvas_KP_ArrowRight'
p245
sg154
S''
sg155
S'<KeyRelease-KP_Right>'
p246
sa(dp247
g152
S'canvas_KP_ArrowRight_Control'
p248
sg154
S''
sg155
S'<Control-KeyRelease-KP_Right>'
p249
sa(dp250
g152
S'canvas_KP_Subtract'
p251
sg154
S''
sg155
S'<KeyRelease-KP_Subtract>'
p252
sa(dp253
g152
S'canvas_KP_ArrowUp'
p254
sg154
S''
sg155
S'<KeyRelease-KP_Up>'
p255
sa(dp256
g152
S'canvas_KP_ArrowUp_Control'
p257
sg154
S''
sg155
S'<Control-KeyRelease-KP_Up>'
p258
sa(dp259
g152
S'canvas_ArrowLeft'
p260
sg154
S''
sg155
S'<KeyRelease-Left>'
p261
sa(dp262
g152
S'canvas_ArrowLeft_Shift'
p263
sg154
S''
sg155
S'<Shift-KeyRelease-Left>'
p264
sa(dp265
g152
S'canvas_PageDown'
p266
sg154
S''
sg155
S'<KeyRelease-Next>'
p267
sa(dp268
g152
S'canvas_PageUp'
p269
sg154
S''
sg155
S'<KeyRelease-Prior>'
p270
sa(dp271
g152
S'canvas_Return'
p272
sg154
S''
sg155
S'<KeyRelease-Return>'
p273
sa(dp274
g152
S'canvas_ArrowRight'
p275
sg154
S''
sg155
S'<KeyRelease-Right>'
p276
sa(dp277
g152
S'canvas_ArrowRight_Shift'
p278
sg154
S''
sg155
S'<Shift-KeyRelease-Right>'
p279
sa(dp280
g152
S'canvas_ArrowUp'
p281
sg154
S''
sg155
S'<KeyRelease-Up>'
p282
sa(dp283
g152
S'canvas_ArrowUp_Shift'
p284
sg154
S''
sg155
S'<Shift-KeyRelease-Up>'
p285
sa(dp286
g152
S'canvas_SPACE'
p287
sg154
S''
sg155
S'<KeyRelease-space>'
p288
sasg157
(lp289
(dp290
g50
S'highlightthickness'
p291
sg161
S'n:3'
p292
sg163
Nsa(dp293
g50
S'borderwidth'
p294
sg161
S'n:1'
p295
sg163
Nsa(dp296
g50
S'highlightcolor'
p297
sg161
S'c:darkred'
p298
sg163
Nsa(dp299
g50
S'takefocus'
p300
sg161
I1
sg163
Nsasa(dp301
g140
S'Tkinter'
p302
sg50
S'frameButtons'
p303
sg142
S'Frame'
p304
sg144
(lp305
(dp306
g50
g176
sg161
S'nw'
p307
sa(dp308
g50
g182
sg161
S'x'
sasg24
(I0
I1
I1
tp309
sg147
g148
sg149
(lp310
sg157
(lp311
(dp312
g50
g160
sg161
S'n:1'
p313
sg163
Nsa(dp314
g50
g168
sg161
S'n:1'
p315
sg163
Nsasa(dp316
g140
S'Tkinter'
p317
sg50
S'frameFiles'
p318
sg142
S'Frame'
p319
sg144
(lp320
(dp321
g50
g176
sg161
g198
sa(dp322
g50
g182
sg161
S'y'
sasg24
(I0
I0
tp323
sg147
g148
sg149
(lp324
sg157
(lp325
(dp326
g50
S'highlightthickness'
p327
sg161
S'n:3'
p328
sg163
Nsa(dp329
g50
g165
sg161
S'n:1'
p330
sg163
Nsa(dp331
g50
S'highlightcolor'
p332
sg161
S'c:darkred'
p333
sg163
Nsasa(dp334
g140
g317
sg50
S'frameMain'
p335
sg142
g319
sg144
(lp336
(dp337
g50
g179
sg161
S'yes'
p338
sa(dp339
g50
g182
sg161
S'both'
p340
sasg24
(I0
I1
tp341
sg147
g148
sg149
(lp342
sg157
(lp343
(dp344
g50
g160
sg161
S'n:1'
p345
sg163
Nsa(dp346
g50
g165
sg161
S'n:1'
p347
sg163
Nsasa(dp348
g140
g302
sg50
S'framePicture'
p349
sg142
g304
sg144
(lp350
(dp351
g50
g176
sg161
g198
sa(dp352
g50
g179
sg161
g338
sa(dp353
g50
g182
sg161
g340
sasg24
(I0
I1
I0
tp354
sg147
g148
sg149
(lp355
sg157
(lp356
(dp357
g50
g160
sg161
S'n:1'
p358
sg163
Nsa(dp359
g50
S'relief'
p360
sg161
S'raised'
p361
sg163
Nsasa(dp362
g140
S'Tkinter'
p363
sg50
S'frmStatus'
p364
sg142
S'Frame'
p365
sg144
(lp366
(dp367
g50
g176
sg161
S'nw'
p368
sa(dp369
g50
g182
sg161
S'y'
sasg24
(I0
I1
I2
tp370
sg147
g148
sg149
(lp371
sg157
(lp372
sa(dp373
g140
S'Tkinter'
p374
sg50
S'goButton'
p375
sg142
S'Button'
p376
sg144
(lp377
(dp378
g50
g176
sg161
S'sw'
p379
sa(dp380
g50
g179
sg161
g338
sa(dp381
g50
g182
sg161
S'x'
sasg24
Nsg147
(lp382
I6608
aI9332
asg149
(lp383
sg157
(lp384
(dp385
g50
g190
sg161
S'Crops'
p386
sg163
Nsa(dp387
g50
S'activebackground'
p388
sg161
S'c:#0F0'
p389
sg163
Nsa(dp390
g50
S'command'
p391
sg161
S'start_cropping'
p392
sg163
I0
sasa(dp393
g140
g193
sg50
S'lbFiles'
p394
sg142
S'Listbox'
p395
sg144
(lp396
(dp397
g50
g176
sg161
g198
sa(dp398
g50
g182
sg161
S'y'
sasg24
Nsg147
(lp399
I1219
aI7964
asg149
(lp400
(dp401
g152
S'on_lbFiles_mouseClick_1'
p402
sg154
S''
sg155
S'<ButtonRelease-1>'
p403
sa(dp404
g152
S'lbFiles_ArrowDown'
p405
sg154
S''
sg155
S'<KeyRelease-Down>'
p406
sa(dp407
g152
S'lbFiles_ArrowUp'
p408
sg154
S''
sg155
S'<KeyRelease-Up>'
p409
sasg157
(lp410
(dp411
g50
S'takefocus'
p412
sg161
I1
sg163
Nsa(dp413
g50
S'yscrollcommand'
p414
sg161
S'sbFiles.set'
p415
sg163
I0
sasa(dp416
g140
g171
sg50
S'lblStatus'
p417
sg142
S'Label'
p418
sg144
(lp419
(dp420
g50
g176
sg161
g177
sa(dp421
g50
g179
sg161
S'yes'
p422
sa(dp423
g50
g182
sg161
S'y'
sasg24
Nsg147
(lp424
I4407
aI9790
asg149
(lp425
sg157
(lp426
(dp427
g50
S'text'
p428
sg161
S'This is label'
p429
sg163
Nsa(dp430
g50
S'textvariable'
p431
sg161
S'textStatus'
p432
sg163
S's.as'
p433
sa(dp434
g50
S'relief'
p435
sg161
S'sunken'
p436
sg163
Nsasa(dp437
g140
g374
sg50
S'plusButton'
p438
sg142
g376
sg144
(lp439
(dp440
g50
g176
sg161
g379
sa(dp441
g50
g179
sg161
g338
sa(dp442
g50
g182
sg161
S'x'
sasg24
Nsg147
(lp443
I5603
aI9332
asg149
(lp444
sg157
(lp445
(dp446
g50
g190
sg161
S'+'
sg163
Nsa(dp447
g50
g391
sg161
S'plus_box'
p448
sg163
I0
sasa(dp449
g140
g374
sg50
S'quitButton'
p450
sg142
g376
sg144
(lp451
(dp452
g50
g176
sg161
g379
sa(dp453
g50
g179
sg161
g338
sa(dp454
g50
g182
sg161
S'x'
sasg24
Nsg147
(lp455
I7378
aI9332
asg149
(lp456
(dp457
g152
S'on_quitButton_ButRel_1'
p458
sg154
S''
sg155
S'<ButtonRelease-1>'
p459
sasg157
(lp460
(dp461
g50
g190
sg161
S'Quit'
p462
sg163
Nsa(dp463
g50
g388
sg161
S'c:#F00'
p464
sg163
Nsa(dp465
g50
g391
sg161
S'quit'
p466
sg163
I0
sasa(dp467
g140
g374
sg50
S'resetButton'
p468
sg142
g376
sg144
(lp469
(dp470
g50
g176
sg161
g379
sa(dp471
g50
g179
sg161
g338
sa(dp472
g50
g182
sg161
S'x'
sasg24
Nsg147
(lp473
I3172
aI9332
asg149
(lp474
sg157
(lp475
(dp476
g50
g190
sg161
S'Reset'
p477
sg163
Nsa(dp478
g50
g388
sg161
S'c:#F00'
p479
sg163
Nsa(dp480
g50
g391
sg161
S'reset'
p481
sg163
I0
sasa(dp482
g140
g193
sg50
S'sbFiles'
p483
sg142
S'Scrollbar'
p484
sg144
(lp485
(dp486
g50
g176
sg161
g198
sa(dp487
g50
g182
sg161
S'y'
sasg24
Nsg147
(lp488
I1843
aI7964
asg149
(lp489
sg157
(lp490
sa(dp491
g140
g374
sg50
S'undoButton'
p492
sg142
g376
sg144
(lp493
(dp494
g50
g176
sg161
g379
sa(dp495
g50
g179
sg161
g338
sa(dp496
g50
g182
sg161
S'x'
sasg24
Nsg147
(lp497
I3792
aI9332
asg149
(lp498
sg157
(lp499
(dp500
g50
g190
sg161
S'Undo'
p501
sg163
Nsa(dp502
g50
g388
sg161
S'c:#FF0'
p503
sg163
Nsa(dp504
g50
g391
sg161
S'undo_last'
p505
sg163
I0
sasa(dp506
g140
g374
sg50
S'unzoomButton'
p507
sg142
g376
sg144
(lp508
(dp509
g50
g176
sg161
g379
sa(dp510
g50
g179
sg161
g338
sa(dp511
g50
g182
sg161
S'x'
sasg24
Nsg147
(lp512
I4898
aI9327
asg149
(lp513
sg157
(lp514
(dp515
g50
g190
sg161
S'<-|->'
p516
sg163
Nsa(dp517
g50
g388
sg161
S'c:#00F'
p518
sg163
Nsa(dp519
g50
g391
sg161
S'unzoom_image'
p520
sg163
I0
sasa(dp521
g140
g374
sg50
S'zoomButton'
p522
sg142
S'Checkbutton'
p523
sg144
(lp524
(dp525
g50
g176
sg161
g379
sa(dp526
g50
g179
sg161
g338
sa(dp527
g50
g182
sg161
S'x'
sasg24
Nsg147
(lp528
I4174
aI9332
asg149
(lp529
sg157
(lp530
(dp531
g50
S'text'
p532
sg161
S'Zoom'
p533
sg163
Nsa(dp534
g50
S'command'
p535
sg161
S'zoom_mode'
p536
sg163
I0
sasasS'BaseClass'
p537
g54
sg34
I1
sa(dp538
g49
S'Gui'
p539
sg50
S'Preferences'
p540
sg28
Nsg53
S'Tkinter.Frame'
p541
sg55
(lp542
(lp543
I4998
aI1545
aI0
aasg38
(dp544
g36
S'27.0'
p545
sg38
(lp546
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                 Preferences                                  #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass Preferences(Tkinter.Frame):\n    def __init__(self,Master=None,*pos,**kw):\n'
p547
aS'        #\n        #Your code here\n        #\n'
p548
aS"\n        apply(Tkinter.Frame.__init__,(self,Master),kw)\n        self._Frame2 = Tkinter.Frame(self)\n        self._Frame2.pack(side='top')\n        self._Frame1 = Tkinter.Frame(self)\n        self._Frame1.pack(side='top')\n"
p549
aS'        #\n        #Your code here\n        #\n'
p550
aS'    #\n    #Start of event handler methods\n    #\n'
p551
aS'\n'
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p552
aS''
asg7
I0
sg45
I12881023
ssg29
(lp553
(dp554
g140
S'Tkinter'
p555
sg50
g540
sg142
S'Frame'
p556
sg144
(lp557
sg24
g146
sg147
g148
sg149
(lp558
sg157
(lp559
sa(dp560
g140
S'Tkinter'
p561
sg50
S'_Frame1'
p562
sg142
S'Frame'
p563
sg144
(lp564
sg24
(I0
I1
tp565
sg147
g148
sg149
(lp566
sg157
(lp567
sa(dp568
g140
g561
sg50
S'_Frame2'
p569
sg142
g563
sg144
(lp570
sg24
(I0
I0
tp571
sg147
g148
sg149
(lp572
sg157
(lp573
sasg537
g541
sg34
I1
sasS'VisibleForm'
p574
g51
sS'SelectedForm'
p575
g51
sg50
g6
sa.