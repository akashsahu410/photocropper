(lp1
(dp2
S'ModulePrevious'
p3
S'scancropper'
p4
sS'ModuleCurrent'
p5
S'PhotoCropper'
p6
sS'Version'
p7
I1
sS'Geometry'
p8
S'3834x2065+3+28'
p9
sS'ProjectName'
p10
g6
sS'ImportTypes'
p11
(lp12
(S'Pmw'
p13
S'import'
p14
tp15
a(S'Tkinter'
p16
S'import'
p17
tp18
asS'EditorWidths'
p19
((lp20
I411
aI324
a(lp21
I378
aI357
a(lp22
I369
aI366
atp23
sS'ID'
p24
S'Rapyd Project'
p25
sS'ParkingLot'
p26
(dp27
S'SelectedWidreq'
p28
NsS'Widreqs'
p29
(lp30
ssa(dp31
S'PreviousForm'
p32
S'-Main-'
p33
sS'OnTab'
p34
I1
sg33
(dp35
S'Cursor'
p36
S'1.22'
p37
sS'Text'
p38
(lp39
S''
aS"#!/usr/bin/env python2\n# -*- coding: utf-8 -*-\n\n'''\n"
p40
aS'import rpErrorHandler\nimport Tkinter\n'
p41
aS'\ndef window_close():\n    conf[\'geometry\'] = Root.geometry()\n    conf.save() # Save configuration to keep window geometry\n    Root.destroy()\n\ntry:\n    #--------------------------------------------------------------------------#\n    # User code should go after this comment so it is inside the "try".        #\n    #     This allows rpErrorHandler to gain control on an error so it         #\n    #     can properly display a Rapyd-aware error message.                    #\n    #--------------------------------------------------------------------------#\n\n    # Adjust sys.path so we can find other modules of this project\n    if \'.\' not in sys.path:\n        sys.path.append(\'.\')\n    #Put lines to import other modules of this project here\n \n    if __name__ == \'__main__\':\n        # Parse arguments\n        parser = argparse.ArgumentParser(description=\'Picture cropper\')\n        parser.add_argument(\'-c\', \'--config\', \'--config-file\', dest=\'configFile\', default=None, help=\'Configuration file path\')\n        parser.add_argument(\'-d\', \'--debug\', default=0, help=\'Debug level\')\n        args = parser.parse_args()\n\n        \'\'\'\n'
p42
aS"        Root = Tkinter.Tk()\n        Tkinter.CallWrapper = rpErrorHandler.CallWrapper\n        App = PhotoCropper(Root)\n        App.pack(expand='yes',fill='both')\n"
p43
aS'        \'\'\'\n        Root = Tkinter.Tk()\n        App = PhotoCropper(Root)\n        App.pack(expand=\'yes\', fill=\'both\')\n        # Load configuration\n        conf = ScanConfig(args.configFile, App.__class__.__name__)\n        # Set window\n        Root.geometry(conf[\'geometry\'])\n        # Allow closing windows by clicking "X"\n        Root.protocol("WM_DELETE_WINDOW", window_close)\n        Root.title(\'Photo Cropper\')\n        App.config = conf\n        App.load_image_list()\n        Root.mainloop()\n    #--------------------------------------------------------------------------#\n    # User code should go above this comment.                                  #\n    #--------------------------------------------------------------------------#\nexcept:\n    \'\'\'\n    rpErrorHandler.RunError()\n    \'\'\'\n    raise'
p44
asg7
I0
sS'Sha'
p45
I6399615
ssS'Forms'
p46
(lp47
(dp48
S'Requested'
p49
g38
sS'Name'
p50
g6
sg28
S'canvas'
p51
sS'Type'
p52
S'Tkinter.Frame'
p53
sS'Lines'
p54
(lp55
(lp56
I2416
aI5000
aI1
aa(lp57
I6206
aI7908
aI0
aa(lp58
I6206
aI9702
aI0
aasg38
(dp59
g36
S'203.41'
p60
sg38
(lp61
S"#------------------------------------------------------------------------------#\n#                                                                              #\n#                                 PhotoCropper                                 #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass PhotoCropper(Tkinter.Frame):\n    def __init__(self,Master=None,*pos,**kw):\n        kw['borderwidth'] = '5'\n        kw['height'] = '1'\n        kw['width'] = '1'\n"
p62
aS"# This code was deliberately ugly in order to prevent Rapyd-Tk from being\n# too smart\n\n'''\nimport argparse\nimport os\nimport re\nimport sys\n\ntry: # for Python2\n    import ConfigParser as confpars\n    import Tkinter, tkMessageBox\n    tk = Tkinter\nexcept ModuleNotFoundError: # for Python3\n    try:\n        import configparser as confpars\n        import tkinter as tk\n        Tkinter = tk # For compatibility with generated code\n        import tkinter.messagebox as tkMessageBox\n    except:\n        raise\n\nfrom PIL import Image, ImageTk\n    \nclass PhotoCropper(Tkinter.Frame):\n    def __init__(self, Master=None, *pos, **kw):\n        kw['borderwidth'] = '5'\n        kw['height'] = '1'\n        kw['width'] = '1'\n        #\n        #Your code here\n        #\n"
p63
aS"\n        apply(Tkinter.Frame.__init__,(self,Master),kw)\n        self.bind('<Configure>',self.on_PhotoCropper_Config)\n        self.textStatus = Tkinter.StringVar()\n        self.frameFiles = Tkinter.Frame(self)\n        self.frameFiles.pack(anchor='nw',fill='y',side='left')\n        self.sbFiles = Tkinter.Scrollbar(self.frameFiles)\n        self.sbFiles.pack(anchor='nw',fill='y',side='right')\n        self.lbFiles = Tkinter.Listbox(self.frameFiles,takefocus=1)\n        self.lbFiles.pack(anchor='nw',fill='y',side='right')\n        self.lbFiles.bind('<ButtonRelease-1>',self.on_lbFiles_mouseClick_1)\n        self.frameMain = Tkinter.Frame(self,borderwidth='1')\n        self.frameMain.pack(expand='yes',fill='both',side='left')\n        self.framePicture = Tkinter.Frame(self.frameMain,borderwidth='1'\n            ,relief='raised')\n        self.framePicture.pack(anchor='nw',expand='yes',fill='both',side='top')\n        self.canvas = Tkinter.Canvas(self.framePicture,borderwidth='1'\n            ,takefocus=1)\n        self.canvas.pack(anchor='nw',expand='yes',fill='both',side='bottom')\n        self.canvas.bind('<B1-Motion>',self.canvas_mouseb1move_callback)\n        self.canvas.bind('<Button-1>',self.canvas_mouse1_callback)\n        self.canvas.bind('<ButtonRelease-1>',self.canvas_mouseup1_callback)\n        self.canvas.bind('<KeyRelease-Down>',self.canvas_ArrowDown)\n        self.canvas.bind('<Control-KeyRelease-Down>' \\\n            ,self.canvas_Control_ArrowDown)\n        self.canvas.bind('<Shift-KeyRelease-Down>',self.canvas_ArrowDown_Shift)\n        self.canvas.bind('<KeyRelease-KP_Add>',self.canvas_KP_Add)\n        self.canvas.bind('<KeyRelease-KP_Down>',self.canvas_KP_ArrowDown)\n        self.canvas.bind('<KeyRelease-KP_Enter>',self.canvas_KP_Enter)\n        self.canvas.bind('<KeyRelease-KP_Left>',self.canvas_KP_ArrowLeft)\n        self.canvas.bind('<KeyRelease-KP_Next>',self.canvas_KP_PageDown)\n        self.canvas.bind('<KeyRelease-KP_Prior>',self.canvas_KP_PageUp)\n        self.canvas.bind('<KeyRelease-KP_Right>',self.canvas_KP_ArrowRight)\n        self.canvas.bind('<KeyRelease-KP_Subtract>',self.canvas_KP_Subtract)\n        self.canvas.bind('<KeyRelease-KP_Up>',self.canvas_KP_ArrowUp)\n        self.canvas.bind('<KeyRelease-Left>',self.canvas_ArrowLeft)\n        self.canvas.bind('<Control-KeyRelease-Left>' \\\n            ,self.canvas_Control_ArrowLeft)\n        self.canvas.bind('<Shift-KeyRelease-Left>',self.canvas_ArrowLeft_Shift)\n        self.canvas.bind('<KeyRelease-Next>',self.canvas_PageDown)\n        self.canvas.bind('<KeyRelease-Prior>',self.canvas_PageUp)\n        self.canvas.bind('<KeyRelease-Return>',self.canvas_Return)\n        self.canvas.bind('<KeyRelease-Right>',self.canvas_ArrowRight)\n        self.canvas.bind('<Control-KeyRelease-Right>' \\\n            ,self.canvas_Control_ArrowRight)\n        self.canvas.bind('<Shift-KeyRelease-Right>' \\\n            ,self.canvas_ArrowRight_Shift)\n        self.canvas.bind('<KeyRelease-Up>',self.canvas_ArrowUp)\n        self.canvas.bind('<Control-KeyRelease-Up>',self.canvas_Control_ArrowUp)\n        self.canvas.bind('<Shift-KeyRelease-Up>',self.canvas_ArrowUp_Shift)\n        self.canvas.bind('<KeyRelease-space>',self.canvas_SPACE)\n        self.frameButtons = Tkinter.Frame(self.frameMain,borderwidth='1'\n            ,height='1')\n        self.frameButtons.pack(anchor='nw',fill='x',side='top')\n        self.btnSettings = Tkinter.Button(self.frameButtons,text='Settings ...')\n        self.btnSettings.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.btnSettings.bind('<ButtonRelease-1>',self.on_btnSettings_ButRel_1)\n        self.resetButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#F00',command=self.reset,text='Reset')\n        self.resetButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.undoButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#FF0',command=self.undo_last,text='Undo')\n        self.undoButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.zoomButton = Tkinter.Checkbutton(self.frameButtons\n            ,command=self.zoom_mode,text='Zoom')\n        self.zoomButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.unzoomButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#00F',command=self.unzoom_image,text='<-|->')\n        self.unzoomButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.plusButton = Tkinter.Button(self.frameButtons,command=self.plus_box\n            ,text='+')\n        self.plusButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.goButton = Tkinter.Button(self.frameButtons,activebackground='#0F0'\n            ,command=self.start_cropping,text='Crops')\n        self.goButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.quitButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#F00',command=self.quit,text='Quit')\n        self.quitButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.quitButton.bind('<ButtonRelease-1>',self.on_quitButton_ButRel_1)\n        self.frmStatus = Tkinter.Frame(self.frameMain)\n        self.frmStatus.pack(anchor='nw',fill='y',side='top')\n        self.lblStatus = Tkinter.Label(self.frmStatus,relief='sunken'\n            ,text='This is label',textvariable=self.textStatus)\n        self.lblStatus.pack(anchor='sw',expand='yes',fill='y',side='top')\n"
p64
aS'        #\n        #Your code here\n        #\n        self.quitButton_ttp = CreateToolTip(self.quitButton, "Exit")\n        self.resetButton_ttp = CreateToolTip(self.resetButton, "Reset all rectangles")\n        self.undoButton_ttp = CreateToolTip(self.undoButton, "Undo last rectangle")\n        self.zoomButton_ttp = CreateToolTip(self.zoomButton, "On/Off Zoom mode")\n        self.unzoomButton_ttp = CreateToolTip(self.unzoomButton, "Unzoom, view all image")\n        self.plusButton_ttp = CreateToolTip(self.plusButton, "Plus box, extent rectangle")\n        self.goButton_ttp = CreateToolTip(self.goButton, "Go, begin cropping")\n        self.btnInputDirSettings_ttp = CreateToolTip(self.btnSettings, "Settings")\n        self.croprect_start = None\n        self.croprect_end = None\n        self.crop_count = 0\n        self.canvas_rects = []\n        self.crop_rects = []\n        self.current_rect = None\n        self.zoommode = False\n        self.w = 1\n        self.h = 1\n        self.x0 = 0\n        self.y0 = 0\n        self.n = 0\n        self.config = None\n        self.delimiters = \' |,|\\t|#|\\|\' # String delimiters\n        self._after_id = None\n        self.filename = None\n        self.lbIndex = None # Keeps item index in listbox\n        self.cropIndex = 0\n'
p65
aS'    #\n    #Start of event handler methods\n    #\n'
p66
aS'\n'
aS'\n    def canvas_ArrowDown(self'
p67
aS', event=None):\n        # MOVES crop rectangle ONE pixel DOWN\n        self.move_rect(self.cropIndex, 0, 1)\n'
p68
aS'\n    def canvas_ArrowDown_Shift(self'
p69
aS",Event=None):\n        # MOVES crop rectangle AMOUNT OF pixels DOWN\n        self.move_rect(self.cropIndex, 0, int(self.config['move-step']))\n"
p70
aS'\n    def canvas_ArrowLeft(self'
p71
aS', event=None):\n        # MOVES crop rectangle ONE pixel LEFT\n        self.move_rect(self.cropIndex, -1, 0)\n'
p72
aS'\n    def canvas_ArrowLeft_Shift(self'
p73
aS", event=None):\n        # MOVES crop rectangle AMOUNT OF pixels LEFT\n        self.move_rect(self.cropIndex, -int(self.config['move-step']), 0)\n"
p74
aS'\n    def canvas_ArrowRight(self'
p75
aS', event=None):\n        # MOVES crop rectangle ONE pixel RIGHT\n        self.move_rect(self.cropIndex, 1, 0)\n'
p76
aS'\n    def canvas_ArrowRight_Shift(self'
p77
aS", event=None):\n        # MOVES crop rectangle AMOUNT OF pixels RIGHT\n        self.move_rect(self.cropIndex, int(self.config['move-step']), 0)\n"
p78
aS'\n    def canvas_ArrowUp(self'
p79
aS', event=None):\n        # MOVES crop rectangle ONE pixel UP\n        self.move_rect(self.cropIndex, 0, -1)\n'
p80
aS'\n    def canvas_ArrowUp_Shift(self'
p81
aS", event=None):\n        # MOVES crop rectangle AMOUNT OF pixels UP\n        self.move_rect(self.cropIndex, 0, -int(self.config['move-step']))\n"
p82
aS'\n    def canvas_Control_ArrowDown(self'
p83
aS',Event=None):\n        # INCREASES size of crop rectangle by ONE pixel on Y-axis\n        self.resize_rect(self.cropIndex, 0, 1)\n'
p84
aS'\n    def canvas_Control_ArrowLeft(self'
p85
aS', event=None):\n        # REDUCES size of crop rectangle by ONE pixel on X-axis\n        self.resize_rect(self.cropIndex, -1, 0)\n'
p86
aS'\n    def canvas_Control_ArrowRight(self'
p87
aS',Event=None):\n        # INCREASES size of crop rectangle by ONE pixel on X-axis\n        self.resize_rect(self.cropIndex, 1, 0)\n'
p88
aS'\n    def canvas_Control_ArrowUp(self'
p89
aS', event=None):\n        # REDUCES size of crop rectangle by ONE pixel on Y-axis\n        self.resize_rect(self.cropIndex, 0, -1)\n'
p90
aS'\n    def canvas_KP_Add(self'
p91
aS", event=None):\n        # Enlarges rectangle for AMOUNT OF pixels\n        self.resize_rect(self.cropIndex, int(self.config['resize-step']), int(self.config['resize-step']))\n"
p92
aS'\n    def canvas_KP_ArrowDown(self'
p93
aS', event=None):\n        # MOVES crop rectangle ONE pixel DOWN\n        self.move_rect(self.cropIndex, 0, 1)\n'
p94
aS'\n    def canvas_KP_ArrowLeft(self'
p95
aS', event=None):\n        # MOVES crop rectangle ONE pixel LEFT\n        self.move_rect(self.cropIndex, -1, 0)\n'
p96
aS'\n    def canvas_KP_ArrowRight(self'
p97
aS', event=None):\n        # MOVES crop rectangle ONE pixel RIGHT\n        self.move_rect(self.cropIndex, 1, 0)\n'
p98
aS'\n    def canvas_KP_ArrowUp(self'
p99
aS', event=None):\n        # MOVES crop rectangle ONE pixel UP\n        self.move_rect(self.cropIndex, 0, -1)\n'
p100
aS'\n    def canvas_KP_Enter(self'
p101
aS', event=None):\n        # CROPS selected areas\n        self.start_cropping()\n'
p102
aS'\n    def canvas_KP_PageDown(self'
p103
aS', event=None):\n        # Moves file selection in listbox one down\n        self.pressPage(self.PAGE_DOWN)\n'
p104
aS'\n    def canvas_KP_PageUp(self'
p105
aS', event=None):\n        # Moves file selection in listbox one up\n        self.pressPage(self.PAGE_UP)\n'
p106
aS'\n    def canvas_KP_Subtract(self'
p107
aS", event=None):\n        # Reduces rectangle by AMOUNT OF pixels\n        self.resize_rect(self.cropIndex, -int(self.config['resize-step']), -int(self.config['resize-step']))\n"
p108
aS'\n    def canvas_PageDown(self'
p109
aS', event=None):\n        # Moves file selection in listbox one DOWN\n        self.pressPage(self.PAGE_DOWN)\n'
p110
aS'\n    def canvas_PageUp(self'
p111
aS', event=None):\n        # Moves file selection in listbox one UP\n        self.pressPage(self.PAGE_UP)\n'
p112
aS'\n    def canvas_Return(self'
p113
aS',Event=None):\n        # CROPS selected areas\n        self.start_cropping()\n'
p114
aS'\n    def canvas_SPACE(self'
p115
aS', event=None):\n        # CROPS selected areas\n        self.start_cropping()\n'
p116
aS'\n    def canvas_mouse1_callback(self'
p117
aS', event=None):\n        self.croprect_start = (event.x, event.y)\n'
p118
aS'\n    def canvas_mouseb1move_callback(self'
p119
aS', event=None):\n        if self.current_rect:\n            self.canvas.delete(self.current_rect)\n        x1 = self.croprect_start[0]\n        y1 = self.croprect_start[1]\n        x2 = event.x\n        y2 = event.y\n        bbox = (x1, y1, x2, y2)\n        cr = self.canvas.create_rectangle(bbox)\n        self.current_rect = cr\n'
p120
aS'\n    def canvas_mouseup1_callback(self'
p121
aS', event=None):\n        self.croprect_end = (event.x, event.y)\n        self.set_crop_area()\n        self.canvas.delete(self.current_rect)\n        self.current_rect = None\n'
p122
aS'\n    def on_PhotoCropper_Config(self'
p123
aS', event=None):\n        if self._after_id:\n            self.after_cancel(self._after_id)\n        self._after_id = self.after(1200, self.draw_after_resize)\n'
p124
aS'\n    def on_btnSettings_ButRel_1(self'
p125
aS', event=None):\n        tkMessageBox.showinfo("Information", "Not yet implemented.", parent=self)\n'
p126
aS'\n    def on_lbFiles_mouseClick_1(self'
p127
aS', event=None):\n        self.lbIndex = self.lbFiles.curselection()[0]\n        self.load_lbFiles_image(self.lbFiles.get(tk.ACTIVE))\n'
p128
aS'\n    def on_quitButton_ButRel_1(self'
p129
aS", event=None):\n        conf['geometry'] = self.winfo_toplevel().geometry()\n        conf.save()\n        self.quit()\n"
p130
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p131
aS'    \n    # Constants for listbox with image file names\n    PAGE_UP = -1\n    PAGE_DOWN = 1\n    \n    # Moves rectangle with "index" by "step" pixels\n    def move_rect(self, index, xstep, ystep):\n        if len(self.crop_rects) == index + 1:\n            cr = self.crop_rects[index]\n            self.canvas.delete(self.canvas_rects[index])\n            self.canvas_rects.pop(index)\n            self.crop_rects[index] = cr.move_rect(xstep, ystep)\n            self.redraw_rect()\n\n    def resize_rect(self, index, xstep, ystep):\n        if len(self.crop_rects) == index + 1:\n            cr = self.crop_rects[index]\n            self.canvas.delete(self.canvas_rects[index])\n            self.canvas_rects.pop(index)\n            self.crop_rects[index] = cr.resize_rect(xstep, ystep)\n            self.redraw_rect()\n        \n    def pressPage(self, direction=0):\n        index = self.lbFiles.curselection()[0] + direction\n        self.lbFiles.selection_clear(0, tk.END)\n        self.lbSelect(index)\n\n    # Programmatically select image in a listbox\n    def lbSelect(self, index):\n        if index < 0:\n            index = 0\n        elif index == self.lbFiles.size():\n            index = self.lbFiles.size()-1  \n        self.lbFiles.select_set(index)\n        self.lbFiles.activate(index)\n        if index != self.lbIndex:\n            self.load_lbFiles_image(self.lbFiles.get(tk.ACTIVE))\n            self.lbIndex = index\n        \n    def draw_after_resize(self):\n        # Check if there is a selection in file list\n        if self.filename:\n            self.loadimage()\n \n    def load_lbFiles_image(self, imagePath):\n        self.filename = os.path.join(self.config[\'input-directory\'], imagePath)\n        if os.path.exists(self.filename):\n            self.loadimage()\n            self.winfo_toplevel().title(\'Scan Cropper - \' + imagePath)\n            self.redraw_rect()\n       \n    def set_crop_area(self):\n        r = Rect(self.croprect_start, self.croprect_end)\n        r.set_thumboffset(int(self.config[\'thumb-offset\']))\n        \n        # adjust dimensions\n        r.clip_to(self.image_thumb_rect)\n\n        # ignore rects smaller than this size\n        if min(r.h, r.w) < 10:\n            return\n\n        ra = r\n        ra = ra.scale_rect(self.scale)\n        ra = ra.move_rect(self.x0, self.y0)\n        ra = ra.valid_rect(self.w, self.h)\n        if self.zoommode:\n            self.canvas.delete(tk.ALL)\n            self.x0 = ra.left\n            self.y0 = ra.top\n            za = (ra.left, ra.top, ra.right, ra.bottom)\n            self.image_thumb = self.image.crop(za)\n            self.image_thumb.thumbnail(thumbsize)\n            self.image_thumb_rect = Rect(self.image_thumb.size)\n            self.image_thumb_rect.set_thumboffset(int(self.config[\'thumb-offset\']))\n            self.displayimage()\n            x_scale = float(ra.w) / self.image_thumb_rect.w\n            y_scale = float(ra.h) / self.image_thumb_rect.h\n            self.scale = (x_scale, y_scale)\n            self.redraw_rect()\n            self.zoommode = False\n            self.zoomButton.deselect()\n        else:\n            self.drawrect(r)\n            self.crop_rects.append(ra)\n            self.n = self.n + 1\n\n    def zoom_mode(self):\n        if self.zoommode:\n            self.zoommode = False\n        else:\n            self.zoommode = True\n\n    def unzoom_image(self):\n        self.canvas.delete(tk.ALL)\n        self.zoommode = False\n        self.zoomButton.deselect()\n        self.x0 = 0\n        self.y0 = 0\n        self.image_thumb = self.image.copy()\n        self.image_thumb.thumbnail(thumbsize)\n        self.image_thumb_rect = Rect(self.image_thumb.size)\n        self.image_thumb_rect.set_thumboffset(int(self.config[\'thumb-offset\']))\n        self.displayimage()\n        x_scale = float(self.image_rect.w) / self.image_thumb_rect.w\n        y_scale = float(self.image_rect.h) / self.image_thumb_rect.h\n        self.scale = (x_scale, y_scale)\n        self.redraw_rect()\n\n    def plus_box(self):\n        if self.n > 1:\n            self.canvas.delete(tk.ALL)\n            if self.crop_rects:\n                ra = self.crop_rects[self.n - 1]\n                self.crop_rects.pop()\n                self.n = self.n - 1\n                ra0 = self.crop_rects[self.n - 1]\n                ra0 = ra0.plus_rect(ra)\n                self.crop_rects[self.n - 1] = ra0\n                self.displayimage()\n                self.redraw_rect()\n                self.zoommode = False\n                self.zoomButton.deselect()\n\n    def redraw_rect(self):\n        for croparea in self.crop_rects:\n            self.drawrect(croparea.rescale_rect(self.scale, self.x0, self.y0))\n\n    def undo_last(self):\n        if self.canvas_rects:\n            r = self.canvas_rects.pop()\n            self.canvas.delete(r)\n\n        if self.crop_rects:\n            self.crop_rects.pop()\n\n    def drawrect(self, rect):\n        bbox = (rect.left, rect.top, rect.right, rect.bottom)\n        cr = self.canvas.create_rectangle(\n            bbox, activefill=\'\', fill=\'yellow\', stipple=self.config[\'stipple\'])\n        self.canvas_rects.append(cr)\n\n    def reset(self):\n        self.canvas.delete(tk.ALL)\n        self.zoommode = False\n        self.zoomButton.deselect()\n        self.canvas_rects = []\n        self.crop_rects = []\n        self.displayimage()\n        \n    def displayimage(self):\n        self.photoimage = ImageTk.PhotoImage(self.image_thumb)\n        w, h = self.image_thumb.size\n        self.canvas.delete("all") # Remove remnants of previous crop area\n        \n        self.canvas.create_image(\n            int(self.config[\'thumb-offset\']),\n            int(self.config[\'thumb-offset\']),\n            anchor=tk.NW,\n            image=self.photoimage)\n\n    def loadimage(self):\n        self.image = Image.open(self.filename)\n        self.textStatus.set(self.lbFiles.get(tk.ACTIVE))\n        self.image_rect = Rect(self.image.size)\n        self.image_rect.set_thumboffset(int(self.config[\'thumb-offset\']))\n        self.w = self.image_rect.w\n        self.h = self.image_rect.h\n        # TODO: needed? borderwidth = self.canvas.config()[\'borderwidth\'][4]\n        \n        self.image_thumb = self.image.copy()\n        self.image_thumb.thumbnail(\n            [ self.canvas.winfo_width() - int(self.config[\'thumb-offset\']),\n              self.canvas.winfo_height() - int(self.config[\'thumb-offset\']) ]\n        )\n        self.image_thumb_rect = Rect(self.image_thumb.size)\n        self.image_thumb_rect.set_thumboffset(int(self.config[\'thumb-offset\']))\n\n        self.displayimage()\n        x_scale = float(self.image_rect.w) / self.image_thumb_rect.w\n        y_scale = float(self.image_rect.h) / self.image_thumb_rect.h\n        self.scale = (x_scale, y_scale)\n\n    def newfilename(self, filenum):\n        f, e = os.path.splitext(self.filename)\n        return \'%s_crop_%s%s\' % (f, filenum, e)\n\n    def start_cropping(self):\n        cropcount = 0\n        status = "{0} cropped: ".format(self.lbFiles.get(tk.ACTIVE))\n        for croparea in self.crop_rects:\n            cropcount += 1\n            filename = self.newfilename(cropcount)\n            _, tail = os.path.split(filename) # Remove input directory\n            self.crop(croparea, tail)\n            status += "{0}:{1} ".format(cropcount, croparea)\n        self.textStatus.set(status.strip())\n\n    def crop(self, croparea, filename):\n        ca = (croparea.left, croparea.top, croparea.right, croparea.bottom)\n        newimg = self.image.crop(ca)\n        imagePath = os.path.join(self.config[\'output-directory\'], filename)\n        newimg.save(imagePath)\n        \n    def load_image_list(self):\n        if self.config is not None:\n            self.lbFiles.delete(0, tk.END)\n            suffixtuple = tuple(re.split(self.delimiters, self.config[\'image-extensions\']))\n            for item in os.listdir(self.config[\'input-directory\']):\n                if os.path.isfile(os.path.join(self.config[\'input-directory\'], item)):\n                    if item.lower().endswith(suffixtuple): # The arg can be a tuple of suffixes to look for\n                        self.lbFiles.insert(tk.END, item)\n            self.update_idletasks()\n            # If there are items in listbox, select the 1st one\n            if self.lbFiles.size() > 0:\n                self.lbFiles.select_set(0)\n                self.load_lbFiles_image(self.lbFiles.get(tk.ACTIVE))\n                self.canvas.focus_set()\n\n\nclass CreateToolTip(object):\n    """\n    create a tooltip for a given widget\n    """\n    def __init__(self, widget, text=\'widget info\'):\n        self.waittime = 500     #miliseconds\n        self.wraplength = 180   #pixels\n        self.widget = widget\n        self.text = text\n        self.widget.bind("<Enter>", self.enter)\n        self.widget.bind("<Leave>", self.leave)\n        self.widget.bind("<ButtonPress>", self.leave)\n        self.id = None\n        self.tw = None\n\n    def enter(self, event=None):\n        self.schedule()\n\n    def leave(self, event=None):\n        self.unschedule()\n        self.hidetip()\n\n    def schedule(self):\n        self.unschedule()\n        self.id = self.widget.after(self.waittime, self.showtip)\n\n    def unschedule(self):\n        id = self.id\n        self.id = None\n        if id:\n            self.widget.after_cancel(id)\n\n    def showtip(self, event=None):\n        x = y = 0\n        x, y, cx, cy = self.widget.bbox("insert")\n        x += self.widget.winfo_rootx() + 25\n        y += self.widget.winfo_rooty() + 20\n        # creates a toplevel window\n        self.tw = tk.Toplevel(self.widget)\n        # Leaves only the label and removes the app window\n        self.tw.wm_overrideredirect(True)\n        self.tw.wm_geometry("+%d+%d" % (x, y))\n        label = tk.Label(self.tw, text=self.text, justify=\'left\',\n            background="#fef9e7", relief=\'solid\', borderwidth=1,\n            wraplength = self.wraplength)\n        label.pack(ipadx=1)\n\n    def hidetip(self):\n        tw = self.tw\n        self.tw= None\n        if tw:\n            tw.destroy()\n            \nclass Rect(object):\n    def __init__(self, *args):\n        self.set_points(*args)\n        self.thumboffset = 0\n\n    def set_points(self, *args):\n        if len(args) == 2:\n            pt1 = args[0]\n            pt2 = args[1]\n        elif len(args) == 1:\n            pt1 = (0, 0)\n            pt2 = args[0]\n        elif len(args) == 0:\n            pt1 = (0, 0)\n            pt2 = (0, 0)\n\n        x1, y1 = pt1\n        x2, y2 = pt2\n\n        self.left = min(x1, x2)\n        self.top = min(y1, y2)\n        self.right = max(x1, x2)\n        self.bottom = max(y1, y2)\n\n        self._update_dims()\n\n    def clip_to(self, containing_rect):\n        cr = containing_rect\n        self.top = max(self.top, cr.top + self.thumboffset)\n        self.bottom = min(self.bottom, cr.bottom + self.thumboffset)\n        self.left = max(self.left, cr.left + self.thumboffset)\n        self.right = min(self.right, cr.right + self.thumboffset)\n        self._update_dims()\n\n    def _update_dims(self):\n        """added to provide w and h dimensions."""\n        self.w = self.right - self.left\n        self.h = self.bottom - self.top\n\n    def scale_rect(self, scale):\n        x_scale = scale[0]\n        y_scale = scale[1]\n\n        r = Rect()\n        r.top = int((self.top - self.thumboffset) * y_scale)\n        r.bottom = int((self.bottom - self.thumboffset) * y_scale)\n        r.right = int((self.right - self.thumboffset) * x_scale)\n        r.left = int((self.left - self.thumboffset) * x_scale)\n        r._update_dims()\n\n        return r\n\n    def move_rect(self, x0, y0):\n        r = Rect()\n        r.top = int(self.top + y0)\n        r.bottom = int(self.bottom + y0)\n        r.right = int(self.right + x0)\n        r.left = int(self.left + x0)\n        r._update_dims()\n        return r\n\n    # Rezire rectangle by certain amount on X- and Y- axis\n    def resize_rect(self, x0, y0):\n        r = Rect()\n        r.top = self.top\n        r.left = self.left\n        r.bottom = int(self.bottom + y0)\n        r.right = int(self.right + x0)\n        # Make sure rectangle does not disappear!\n        if r.bottom - r.top < 10:\n            r.bottom = self.bottom\n        if r.right - r.left < 10:\n            r.right = self.right\n        r._update_dims()\n        return r\n        \n    def rescale_rect(self, scale, x0, y0):\n        x_scale = scale[0]\n        y_scale = scale[1]\n\n        r = Rect()\n        r.top = int((self.top - y0) / y_scale + self.thumboffset)\n        r.bottom = int((self.bottom - y0) / y_scale + self.thumboffset)\n        r.right = int((self.right - x0) / x_scale + self.thumboffset)\n        r.left = int((self.left - x0) / x_scale + self.thumboffset)\n        r._update_dims()\n        return r\n\n    def plus_rect(self, r0):\n        r = Rect()\n        r.top = min(self.top, r0.top)\n        r.bottom = max(self.bottom, r0.bottom)\n        r.right = max(self.right, r0.right)\n        r.left = min(self.left, r0.left)\n        r._update_dims()\n        return r\n\n    def valid_rect(self, w, h):\n        r = Rect()\n        r.top = self.top\n        if r.top < 0:\n            r.top = 0\n        if r.top > h - 1:\n            r.top = h - 1\n        r.bottom = self.bottom\n        if r.bottom < 1:\n            r.bottom = 1\n        if r.bottom > h:\n            r.bottom = h\n        r.right = self.right\n        if r.right < 1:\n            r.right = 1\n        if r.right > w:\n            r.right = w\n        r.left = self.left\n        if r.left < 0:\n            r.left = 0\n        if r.left > w - 1:\n            r.left = w - 1\n        r._update_dims()\n        return r\n\n    def set_thumboffset(self, thumboffset=0):\n        self.thumboffset = thumboffset\n\n    def __repr__(self):\n        return \'(%d,%d)-(%d,%d)\' % (self.left, self.top, self.right, self.bottom)\n\n# Class that handles configuration\nclass ScanConfig(object):\n\n    def __init__(self, configFile=None, appName=\'PhotoCropper\'):\n        self.section = appName.upper()\n        self.get_default_config()\n        \n        if configFile is None:\n            # Create default configuration in OS-independent "home" directory\n            configPath = os.path.join(os.path.expanduser(\'~\'), \'.config\', appName.lower())\n            if not os.path.exists(configPath):\n                os.makedirs(configPath)\n            self.configFile = os.path.join(configPath, \'config.ini\')\n            self.config = confpars.SafeConfigParser(self.get_default_config())\n            if os.path.exists(self.configFile):\n                self.config.read(self.configFile)\n            else:\n                self.config.add_section(self.section)\n        elif os.path.exists(configFile):\n            self.configFile = os.path.normpath(configFile)\n            self.config = confpars.SafeConfigParser(self.get_default_config())\n            self.config.read(self.configFile)\n        else:\n            # Path given, but does not exist\n            raise Exception("Configuration file \'{0}\' does not exist".format(configFile))\n    \n    # Gets default configuration\n    def get_default_config(self):\n        return {\n            \'geometry\'         : \'1024x768+10+10\', # Position and size of main window\n            \'input-directory\'  : os.path.expanduser(\'~\'), # Directory with pictures to process\n            \'output-directory\' : os.path.expanduser(\'~\'), # Directory to write resulting pictures into\n            \'image-extensions\' : \'tif tiff jpg jpeg gif png\', # Extensions of files considered to be pictures\n            \'thumb-offset\'     : \'4\', # Thumbnail offset\n            \'stipple\'          : \'gray12\', # Stipple pattern\n            \'move-step\'        : \'10\', # Amount of pixels to move rectangle in all directions\n            \'resize-step\'      : \'10\' # Amount of pixels to resize rectangle\n        }\n\n    def __getitem__(self, key):\n        return self.config.get(self.section, key)\n\n    def __setitem__(self, key, value):\n        self.config.set(self.section, key, value)\n\n    def save(self):\n        with open(self.configFile, \'wb\') as cf:\n            self.config.write(cf)'
p132
asg7
I0
sg45
I2668415
ssg29
(lp133
(dp134
S'ModuleName'
p135
S'Tkinter'
p136
sg50
g6
sS'WidgetName'
p137
S'Frame'
p138
sS'PackOptions'
p139
(lp140
sg24
(I0
tp141
sS'XY'
p142
(I0
I0
tp143
sS'Bindings'
p144
(lp145
(dp146
S'Handler'
p147
S'on_PhotoCropper_Config'
p148
sS'Component'
p149
S''
sS'Event'
p150
S'<Configure>'
p151
sasS'Options'
p152
(lp153
(dp154
g50
S'borderwidth'
p155
sS'Value'
p156
S'n:5'
p157
sS'Extra'
p158
Nsa(dp159
g50
S'width'
p160
sg156
S'n:1'
p161
sg158
Nsa(dp162
g50
S'height'
p163
sg156
S'n:1'
p164
sg158
Nsasa(dp165
g135
S'Tkinter'
p166
sg50
S'btnSettings'
p167
sg137
S'Button'
p168
sg139
(lp169
(dp170
g50
S'anchor'
p171
sg156
S'sw'
p172
sa(dp173
g50
S'expand'
p174
sg156
S'yes'
p175
sa(dp176
g50
S'fill'
p177
sg156
S'x'
sasg24
Nsg142
(lp178
I2610
aI9332
asg144
(lp179
(dp180
g147
S'on_btnSettings_ButRel_1'
p181
sg149
S''
sg150
S'<ButtonRelease-1>'
p182
sasg152
(lp183
(dp184
g50
S'text'
p185
sg156
S'Settings ...'
p186
sg158
Nsasa(dp187
g135
S'Tkinter'
p188
sg50
S'canvas'
p189
sg137
S'Canvas'
p190
sg139
(lp191
(dp192
g50
g171
sg156
S'nw'
p193
sa(dp194
g50
g174
sg156
S'yes'
p195
sa(dp196
g50
g177
sg156
S'both'
p197
sasg24
Nsg142
(lp198
I5113
aI5331
asg144
(lp199
(dp200
g147
S'canvas_mouseb1move_callback'
p201
sg149
S''
sg150
S'<B1-Motion>'
p202
sa(dp203
g147
S'canvas_mouse1_callback'
p204
sg149
S''
sg150
S'<Button-1>'
p205
sa(dp206
g147
S'canvas_mouseup1_callback'
p207
sg149
S''
sg150
S'<ButtonRelease-1>'
p208
sa(dp209
g147
S'canvas_ArrowDown'
p210
sg149
S''
sg150
S'<KeyRelease-Down>'
p211
sa(dp212
g147
S'canvas_Control_ArrowDown'
p213
sg149
S''
sg150
S'<Control-KeyRelease-Down>'
p214
sa(dp215
g147
S'canvas_ArrowDown_Shift'
p216
sg149
S''
sg150
S'<Shift-KeyRelease-Down>'
p217
sa(dp218
g147
S'canvas_KP_Add'
p219
sg149
S''
sg150
S'<KeyRelease-KP_Add>'
p220
sa(dp221
g147
S'canvas_KP_ArrowDown'
p222
sg149
S''
sg150
S'<KeyRelease-KP_Down>'
p223
sa(dp224
g147
S'canvas_KP_Enter'
p225
sg149
S''
sg150
S'<KeyRelease-KP_Enter>'
p226
sa(dp227
g147
S'canvas_KP_ArrowLeft'
p228
sg149
S''
sg150
S'<KeyRelease-KP_Left>'
p229
sa(dp230
g147
S'canvas_KP_PageDown'
p231
sg149
S''
sg150
S'<KeyRelease-KP_Next>'
p232
sa(dp233
g147
S'canvas_KP_PageUp'
p234
sg149
S''
sg150
S'<KeyRelease-KP_Prior>'
p235
sa(dp236
g147
S'canvas_KP_ArrowRight'
p237
sg149
S''
sg150
S'<KeyRelease-KP_Right>'
p238
sa(dp239
g147
S'canvas_KP_Subtract'
p240
sg149
S''
sg150
S'<KeyRelease-KP_Subtract>'
p241
sa(dp242
g147
S'canvas_KP_ArrowUp'
p243
sg149
S''
sg150
S'<KeyRelease-KP_Up>'
p244
sa(dp245
g147
S'canvas_ArrowLeft'
p246
sg149
S''
sg150
S'<KeyRelease-Left>'
p247
sa(dp248
g147
S'canvas_Control_ArrowLeft'
p249
sg149
S''
sg150
S'<Control-KeyRelease-Left>'
p250
sa(dp251
g147
S'canvas_ArrowLeft_Shift'
p252
sg149
S''
sg150
S'<Shift-KeyRelease-Left>'
p253
sa(dp254
g147
S'canvas_PageDown'
p255
sg149
S''
sg150
S'<KeyRelease-Next>'
p256
sa(dp257
g147
S'canvas_PageUp'
p258
sg149
S''
sg150
S'<KeyRelease-Prior>'
p259
sa(dp260
g147
S'canvas_Return'
p261
sg149
S''
sg150
S'<KeyRelease-Return>'
p262
sa(dp263
g147
S'canvas_ArrowRight'
p264
sg149
S''
sg150
S'<KeyRelease-Right>'
p265
sa(dp266
g147
S'canvas_Control_ArrowRight'
p267
sg149
S''
sg150
S'<Control-KeyRelease-Right>'
p268
sa(dp269
g147
S'canvas_ArrowRight_Shift'
p270
sg149
S''
sg150
S'<Shift-KeyRelease-Right>'
p271
sa(dp272
g147
S'canvas_ArrowUp'
p273
sg149
S''
sg150
S'<KeyRelease-Up>'
p274
sa(dp275
g147
S'canvas_Control_ArrowUp'
p276
sg149
S''
sg150
S'<Control-KeyRelease-Up>'
p277
sa(dp278
g147
S'canvas_ArrowUp_Shift'
p279
sg149
S''
sg150
S'<Shift-KeyRelease-Up>'
p280
sa(dp281
g147
S'canvas_SPACE'
p282
sg149
S''
sg150
S'<KeyRelease-space>'
p283
sasg152
(lp284
(dp285
g50
S'borderwidth'
p286
sg156
S'n:1'
p287
sg158
Nsa(dp288
g50
S'takefocus'
p289
sg156
I1
sg158
Nsasa(dp290
g135
S'Tkinter'
p291
sg50
S'frameButtons'
p292
sg137
S'Frame'
p293
sg139
(lp294
(dp295
g50
g171
sg156
S'nw'
p296
sa(dp297
g50
g177
sg156
S'x'
sasg24
(I0
I1
I1
tp298
sg142
g143
sg144
(lp299
sg152
(lp300
(dp301
g50
g155
sg156
S'n:1'
p302
sg158
Nsa(dp303
g50
g163
sg156
S'n:1'
p304
sg158
Nsasa(dp305
g135
S'Tkinter'
p306
sg50
S'frameFiles'
p307
sg137
S'Frame'
p308
sg139
(lp309
(dp310
g50
g171
sg156
g193
sa(dp311
g50
g177
sg156
S'y'
sasg24
(I0
I0
tp312
sg142
g143
sg144
(lp313
sg152
(lp314
sa(dp315
g135
g306
sg50
S'frameMain'
p316
sg137
g308
sg139
(lp317
(dp318
g50
g174
sg156
S'yes'
p319
sa(dp320
g50
g177
sg156
S'both'
p321
sasg24
(I0
I1
tp322
sg142
g143
sg144
(lp323
sg152
(lp324
(dp325
g50
g155
sg156
S'n:1'
p326
sg158
Nsasa(dp327
g135
g291
sg50
S'framePicture'
p328
sg137
g293
sg139
(lp329
(dp330
g50
g171
sg156
g193
sa(dp331
g50
g174
sg156
g319
sa(dp332
g50
g177
sg156
g321
sasg24
(I0
I1
I0
tp333
sg142
g143
sg144
(lp334
sg152
(lp335
(dp336
g50
g155
sg156
S'n:1'
p337
sg158
Nsa(dp338
g50
S'relief'
p339
sg156
S'raised'
p340
sg158
Nsasa(dp341
g135
S'Tkinter'
p342
sg50
S'frmStatus'
p343
sg137
S'Frame'
p344
sg139
(lp345
(dp346
g50
g171
sg156
S'nw'
p347
sa(dp348
g50
g177
sg156
S'y'
sasg24
(I0
I1
I2
tp349
sg142
g143
sg144
(lp350
sg152
(lp351
sa(dp352
g135
S'Tkinter'
p353
sg50
S'goButton'
p354
sg137
S'Button'
p355
sg139
(lp356
(dp357
g50
g171
sg156
S'sw'
p358
sa(dp359
g50
g174
sg156
g319
sa(dp360
g50
g177
sg156
S'x'
sasg24
Nsg142
(lp361
I6607
aI9332
asg144
(lp362
sg152
(lp363
(dp364
g50
g185
sg156
S'Crops'
p365
sg158
Nsa(dp366
g50
S'activebackground'
p367
sg156
S'c:#0F0'
p368
sg158
Nsa(dp369
g50
S'command'
p370
sg156
S'start_cropping'
p371
sg158
I0
sasa(dp372
g135
g188
sg50
S'lbFiles'
p373
sg137
S'Listbox'
p374
sg139
(lp375
(dp376
g50
g171
sg156
g193
sa(dp377
g50
g177
sg156
S'y'
sasg24
Nsg142
(lp378
I1219
aI7964
asg144
(lp379
(dp380
g147
S'on_lbFiles_mouseClick_1'
p381
sg149
S''
sg150
S'<ButtonRelease-1>'
p382
sasg152
(lp383
(dp384
g50
S'takefocus'
p385
sg156
I1
sg158
Nsasa(dp386
g135
g166
sg50
S'lblStatus'
p387
sg137
S'Label'
p388
sg139
(lp389
(dp390
g50
g171
sg156
g172
sa(dp391
g50
g174
sg156
S'yes'
p392
sa(dp393
g50
g177
sg156
S'y'
sasg24
Nsg142
(lp394
I4408
aI9790
asg144
(lp395
sg152
(lp396
(dp397
g50
S'text'
p398
sg156
S'This is label'
p399
sg158
Nsa(dp400
g50
S'textvariable'
p401
sg156
S'textStatus'
p402
sg158
S's.as'
p403
sa(dp404
g50
S'relief'
p405
sg156
S'sunken'
p406
sg158
Nsasa(dp407
g135
g353
sg50
S'plusButton'
p408
sg137
g355
sg139
(lp409
(dp410
g50
g171
sg156
g358
sa(dp411
g50
g174
sg156
g319
sa(dp412
g50
g177
sg156
S'x'
sasg24
Nsg142
(lp413
I5602
aI9332
asg144
(lp414
sg152
(lp415
(dp416
g50
g185
sg156
S'+'
sg158
Nsa(dp417
g50
g370
sg156
S'plus_box'
p418
sg158
I0
sasa(dp419
g135
g353
sg50
S'quitButton'
p420
sg137
g355
sg139
(lp421
(dp422
g50
g171
sg156
g358
sa(dp423
g50
g174
sg156
g319
sa(dp424
g50
g177
sg156
S'x'
sasg24
Nsg142
(lp425
I7377
aI9332
asg144
(lp426
(dp427
g147
S'on_quitButton_ButRel_1'
p428
sg149
S''
sg150
S'<ButtonRelease-1>'
p429
sasg152
(lp430
(dp431
g50
g185
sg156
S'Quit'
p432
sg158
Nsa(dp433
g50
g367
sg156
S'c:#F00'
p434
sg158
Nsa(dp435
g50
g370
sg156
S'quit'
p436
sg158
I0
sasa(dp437
g135
g353
sg50
S'resetButton'
p438
sg137
g355
sg139
(lp439
(dp440
g50
g171
sg156
g358
sa(dp441
g50
g174
sg156
g319
sa(dp442
g50
g177
sg156
S'x'
sasg24
Nsg142
(lp443
I3173
aI9332
asg144
(lp444
sg152
(lp445
(dp446
g50
g185
sg156
S'Reset'
p447
sg158
Nsa(dp448
g50
g367
sg156
S'c:#F00'
p449
sg158
Nsa(dp450
g50
g370
sg156
S'reset'
p451
sg158
I0
sasa(dp452
g135
g188
sg50
S'sbFiles'
p453
sg137
S'Scrollbar'
p454
sg139
(lp455
(dp456
g50
g171
sg156
g193
sa(dp457
g50
g177
sg156
S'y'
sasg24
Nsg142
(lp458
I1843
aI7964
asg144
(lp459
sg152
(lp460
sa(dp461
g135
g353
sg50
S'undoButton'
p462
sg137
g355
sg139
(lp463
(dp464
g50
g171
sg156
g358
sa(dp465
g50
g174
sg156
g319
sa(dp466
g50
g177
sg156
S'x'
sasg24
Nsg142
(lp467
I3794
aI9332
asg144
(lp468
sg152
(lp469
(dp470
g50
g185
sg156
S'Undo'
p471
sg158
Nsa(dp472
g50
g367
sg156
S'c:#FF0'
p473
sg158
Nsa(dp474
g50
g370
sg156
S'undo_last'
p475
sg158
I0
sasa(dp476
g135
g353
sg50
S'unzoomButton'
p477
sg137
g355
sg139
(lp478
(dp479
g50
g171
sg156
g358
sa(dp480
g50
g174
sg156
g319
sa(dp481
g50
g177
sg156
S'x'
sasg24
Nsg142
(lp482
I4897
aI9327
asg144
(lp483
sg152
(lp484
(dp485
g50
g185
sg156
S'<-|->'
p486
sg158
Nsa(dp487
g50
g367
sg156
S'c:#00F'
p488
sg158
Nsa(dp489
g50
g370
sg156
S'unzoom_image'
p490
sg158
I0
sasa(dp491
g135
g353
sg50
S'zoomButton'
p492
sg137
S'Checkbutton'
p493
sg139
(lp494
(dp495
g50
g171
sg156
g358
sa(dp496
g50
g174
sg156
g319
sa(dp497
g50
g177
sg156
S'x'
sasg24
Nsg142
(lp498
I4175
aI9332
asg144
(lp499
sg152
(lp500
(dp501
g50
S'text'
p502
sg156
S'Zoom'
p503
sg158
Nsa(dp504
g50
S'command'
p505
sg156
S'zoom_mode'
p506
sg158
I0
sasasS'BaseClass'
p507
g53
sg34
I1
sa(dp508
g49
g38
sg50
S'Preferences'
p509
sg28
S'_Frame1'
p510
sg52
S'Tkinter.Frame'
p511
sg54
(lp512
(lp513
I5000
aI1545
aI0
aasg38
(dp514
g36
S'27.0'
p515
sg38
(lp516
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                 Preferences                                  #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass Preferences(Tkinter.Frame):\n    def __init__(self,Master=None,*pos,**kw):\n'
p517
aS'        #\n        #Your code here\n        #\n'
p518
aS"\n        apply(Tkinter.Frame.__init__,(self,Master),kw)\n        self._Frame2 = Tkinter.Frame(self)\n        self._Frame2.pack(side='top')\n        self._Frame1 = Tkinter.Frame(self)\n        self._Frame1.pack(side='top')\n"
p519
aS'        #\n        #Your code here\n        #\n'
p520
aS'    #\n    #Start of event handler methods\n    #\n'
p521
aS'\n'
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p522
aS''
asg7
I0
sg45
I12881023
ssg29
(lp523
(dp524
g135
S'Tkinter'
p525
sg50
g509
sg137
S'Frame'
p526
sg139
(lp527
sg24
(I0
tp528
sg142
g143
sg144
(lp529
sg152
(lp530
sa(dp531
g135
S'Tkinter'
p532
sg50
g510
sg137
S'Frame'
p533
sg139
(lp534
sg24
(I0
I1
tp535
sg142
g143
sg144
(lp536
sg152
(lp537
sa(dp538
g135
g532
sg50
S'_Frame2'
p539
sg137
g533
sg139
(lp540
sg24
(I0
I0
tp541
sg142
g143
sg144
(lp542
sg152
(lp543
sasg507
g511
sg34
I1
sasS'VisibleForm'
p544
g6
sS'SelectedForm'
p545
g6
sg50
g6
sa.