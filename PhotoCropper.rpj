(lp1
(dp2
S'ModulePrevious'
p3
S'scancropper'
p4
sS'ModuleCurrent'
p5
S'PhotoCropper'
p6
sS'Version'
p7
I1
sS'Geometry'
p8
S'3834x2065+3+28'
p9
sS'ProjectName'
p10
g6
sS'ImportTypes'
p11
(lp12
(S'Pmw'
p13
S'import'
p14
tp15
a(S'Tkinter'
p16
S'import'
p17
tp18
asS'EditorWidths'
p19
((lp20
I411
aI324
a(lp21
I378
aI357
a(lp22
I369
aI366
atp23
sS'ID'
p24
S'Rapyd Project'
p25
sS'ParkingLot'
p26
(dp27
S'SelectedWidreq'
p28
NsS'Widreqs'
p29
(lp30
ssa(dp31
S'PreviousForm'
p32
g6
sS'OnTab'
p33
I1
sS'-Main-'
p34
(dp35
S'Cursor'
p36
S'26.23'
p37
sS'Text'
p38
(lp39
S''
aS'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n'
p40
aS'import rpErrorHandler\nimport Tkinter\n'
p41
aS'\ndef window_close():\n    conf[\'geometry\'] = Root.geometry()\n    conf.save() # Save configuration to keep window geometry\n    Root.destroy()\n\ntry:\n    #--------------------------------------------------------------------------#\n    # User code should go after this comment so it is inside the "try".        #\n    #     This allows rpErrorHandler to gain control on an error so it         #\n    #     can properly display a Rapyd-aware error message.                    #\n    #--------------------------------------------------------------------------#\n\n    #Adjust sys.path so we can find other modules of this project\n    import sys\n    if \'.\' not in sys.path:\n        sys.path.append(\'.\')\n    #Put lines to import other modules of this project here\n    import argparse    \n    import tkFileDialog\n    import tkMessageBox\n    import os\n    import re\n    try:\n        # for Python2\n        import ConfigParser as confpars\n    except ImportError:\n        # for Python3\n        import configparser as confpars\n    #\n    from PIL import Image, ImageTk\n    tk = Tkinter\n \n    if __name__ == \'__main__\':\n        # Parse arguments\n        parser = argparse.ArgumentParser(description=\'Picture cropper\')\n        parser.add_argument(\'-c\', \'--config\', \'--config-file\', dest=\'configFile\', default=None, help=\'Configuration file path\')\n        parser.add_argument(\'-d\', \'--debug\', default=0, help=\'Debug level\')\n        args = parser.parse_args()\n\n'
p42
aS"        Root = Tkinter.Tk()\n        Tkinter.CallWrapper = rpErrorHandler.CallWrapper\n        App = PhotoCropper(Root)\n        App.pack(expand='yes',fill='both')\n"
p43
aS'        # Load configuration\n        conf = ScanConfig(args.configFile, App.__class__.__name__)\n        # Set window\n        Root.geometry(conf[\'geometry\'])\n        # Allow closing windows by clicking "X"\n        Root.protocol("WM_DELETE_WINDOW", window_close)\n        Root.title(\'Photo Cropper\')\n        App.config = conf\n        App.load_image_list()\n        Root.mainloop()\n    #--------------------------------------------------------------------------#\n    # User code should go above this comment.                                  #\n    #--------------------------------------------------------------------------#\nexcept:\n    rpErrorHandler.RunError()'
p44
asg7
I0
sS'Sha'
p45
I10428287
ssS'Forms'
p46
(lp47
(dp48
S'Requested'
p49
g38
sS'Name'
p50
g6
sg28
S'lblStatus'
p51
sS'Type'
p52
S'Tkinter.Frame'
p53
sS'Lines'
p54
(lp55
(lp56
I2416
aI5000
aI1
aa(lp57
I6206
aI7908
aI0
aa(lp58
I6206
aI9702
aI0
aasg38
(dp59
g36
S'267.65'
p60
sg38
(lp61
S"#------------------------------------------------------------------------------#\n#                                                                              #\n#                                 PhotoCropper                                 #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass PhotoCropper(Tkinter.Frame):\n    def __init__(self,Master=None,*pos,**kw):\n        kw['borderwidth'] = '5'\n        kw['height'] = '1'\n        kw['width'] = '1'\n"
p62
aS'        #\n        #Your code here\n        #\n'
p63
aS"\n        apply(Tkinter.Frame.__init__,(self,Master),kw)\n        self.bind('<Configure>',self.on_PhotoCropper_Config)\n        self.textStatus = Tkinter.StringVar()\n        self.frameFiles = Tkinter.Frame(self)\n        self.frameFiles.pack(anchor='nw',fill='y',side='left')\n        self.sbFiles = Tkinter.Scrollbar(self.frameFiles)\n        self.sbFiles.pack(anchor='nw',fill='y',side='right')\n        self.lbFiles = Tkinter.Listbox(self.frameFiles,takefocus=1)\n        self.lbFiles.pack(anchor='nw',fill='y',side='right')\n        self.lbFiles.bind('<ButtonRelease-1>',self.on_lbFiles_mouseClick_1)\n        self.frameMain = Tkinter.Frame(self,borderwidth='1')\n        self.frameMain.pack(expand='yes',fill='both',side='left')\n        self.framePicture = Tkinter.Frame(self.frameMain,borderwidth='1'\n            ,relief='raised')\n        self.framePicture.pack(anchor='nw',expand='yes',fill='both',side='top')\n        self.canvas = Tkinter.Canvas(self.framePicture,borderwidth='1'\n            ,takefocus=1)\n        self.canvas.pack(anchor='nw',expand='yes',fill='both',side='bottom')\n        self.canvas.bind('<B1-Motion>',self.canvas_mouseb1move_callback)\n        self.canvas.bind('<Button-1>',self.canvas_mouse1_callback)\n        self.canvas.bind('<ButtonRelease-1>',self.canvas_mouseup1_callback)\n        self.canvas.bind('<KeyRelease-Down>',self.canvas_ArrowDown)\n        self.canvas.bind('<Shift-KeyRelease-Down>',self.canvas_ArrowDown_Shift)\n        self.canvas.bind('<KeyRelease-KP_Add>',self.canvas_KP_Add)\n        self.canvas.bind('<KeyRelease-KP_Down>',self.canvas_KP_ArrowDown)\n        self.canvas.bind('<KeyRelease-KP_Enter>',self.canvas_KP_Enter)\n        self.canvas.bind('<KeyRelease-KP_Left>',self.canvas_KP_ArrowLeft)\n        self.canvas.bind('<KeyRelease-KP_Next>',self.canvas_KP_PageDown)\n        self.canvas.bind('<KeyRelease-KP_Prior>',self.canvas_KP_PageUp)\n        self.canvas.bind('<KeyRelease-KP_Right>',self.canvas_KP_ArrowRight)\n        self.canvas.bind('<KeyRelease-KP_Subtract>',self.canvas_KP_Subtract)\n        self.canvas.bind('<KeyRelease-KP_Up>',self.canvas_KP_ArrowUp)\n        self.canvas.bind('<KeyRelease-Left>',self.canvas_ArrowLeft)\n        self.canvas.bind('<Shift-KeyRelease-Left>',self.canvas_ArrowLeft_Shift)\n        self.canvas.bind('<KeyRelease-Next>',self.canvas_PageDown)\n        self.canvas.bind('<KeyRelease-Prior>',self.canvas_PageUp)\n        self.canvas.bind('<KeyRelease-Return>',self.canvas_Return)\n        self.canvas.bind('<KeyRelease-Right>',self.canvas_ArrowRight)\n        self.canvas.bind('<Shift-KeyRelease-Right>' \\\n            ,self.canvas_ArrowRight_Shift)\n        self.canvas.bind('<KeyRelease-Up>',self.canvas_ArrowUp)\n        self.canvas.bind('<Shift-KeyRelease-Up>',self.canvas_ArrowUp_Shift)\n        self.canvas.bind('<KeyRelease-space>',self.canvas_SPACE)\n        self.frameButtons = Tkinter.Frame(self.frameMain,borderwidth='1'\n            ,height='1')\n        self.frameButtons.pack(anchor='nw',fill='x',side='top')\n        self.btnSettings = Tkinter.Button(self.frameButtons,text='Settings ...')\n        self.btnSettings.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.btnSettings.bind('<ButtonRelease-1>',self.on_btnSettings_ButRel_1)\n        self.resetButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#F00',command=self.reset,text='Reset')\n        self.resetButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.undoButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#FF0',command=self.undo_last,text='Undo')\n        self.undoButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.zoomButton = Tkinter.Checkbutton(self.frameButtons\n            ,command=self.zoom_mode,text='Zoom')\n        self.zoomButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.unzoomButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#00F',command=self.unzoom_image,text='<-|->')\n        self.unzoomButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.plusButton = Tkinter.Button(self.frameButtons,command=self.plus_box\n            ,text='+')\n        self.plusButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.goButton = Tkinter.Button(self.frameButtons,activebackground='#0F0'\n            ,command=self.start_cropping,text='Crops')\n        self.goButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.quitButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#F00',command=self.quit,text='Quit')\n        self.quitButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.quitButton.bind('<ButtonRelease-1>',self.on_quitButton_ButRel_1)\n        self.frmStatus = Tkinter.Frame(self.frameMain)\n        self.frmStatus.pack(anchor='nw',fill='y',side='top')\n        self.lblStatus = Tkinter.Label(self.frmStatus,relief='sunken'\n            ,text='This is label',textvariable=self.textStatus)\n        self.lblStatus.pack(anchor='sw',expand='yes',fill='y',side='top')\n"
p64
aS'        #\n        #Your code here\n        #\n        self.quitButton_ttp = CreateToolTip(self.quitButton, "Exit")\n        self.resetButton_ttp = CreateToolTip(self.resetButton, "Reset all rectangles")\n        self.undoButton_ttp = CreateToolTip(self.undoButton, "Undo last rectangle")\n        self.zoomButton_ttp = CreateToolTip(self.zoomButton, "On/Off Zoom mode")\n        self.unzoomButton_ttp = CreateToolTip(self.unzoomButton, "Unzoom, view all image")\n        self.plusButton_ttp = CreateToolTip(self.plusButton, "Plus box, extent rectangle")\n        self.goButton_ttp = CreateToolTip(self.goButton, "Go, begin cropping")\n        self.btnInputDirSettings_ttp = CreateToolTip(self.btnSettings, "Settings")\n        self.croprect_start = None\n        self.croprect_end = None\n        self.crop_count = 0\n        self.canvas_rects = []\n        self.crop_rects = []\n        self.current_rect = None\n        self.zoommode = False\n        self.w = 1\n        self.h = 1\n        self.x0 = 0\n        self.y0 = 0\n        self.n = 0\n        self.config = None\n        self.delimiters = \' |,|\\t|#|\\|\'\n        self._after_id = None\n        self.filename = None\n        self.lbIndex = None # Keeps item index in listbox\n        self.cropIndex = 0\n'
p65
aS'    #\n    #Start of event handler methods\n    #\n'
p66
aS'\n'
aS'\n    def canvas_ArrowDown(self'
p67
aS', event=None):\n        # MOVES crop rectangle ONE pixel DOWN\n        self.move_rect(self.cropIndex, 0, 1)\n'
p68
aS'\n    def canvas_ArrowDown_Shift(self'
p69
aS",Event=None):\n        # MOVES crop rectangle AMOUNT OF pixels DOWN\n        self.move_rect(self.cropIndex, 0, int(self.config['move-step']))\n"
p70
aS'\n    def canvas_ArrowLeft(self'
p71
aS', event=None):\n        # MOVES crop rectangle ONE pixel LEFT\n        self.move_rect(self.cropIndex, -1, 0)\n'
p72
aS'\n    def canvas_ArrowLeft_Shift(self'
p73
aS", event=None):\n        # MOVES crop rectangle AMOUNT OF pixels LEFT\n        self.move_rect(self.cropIndex, -int(self.config['move-step']), 0)\n"
p74
aS'\n    def canvas_ArrowRight(self'
p75
aS', event=None):\n        # MOVES crop rectangle ONE pixel RIGHT\n        self.move_rect(self.cropIndex, 1, 0)\n'
p76
aS'\n    def canvas_ArrowRight_Shift(self'
p77
aS", event=None):\n        # MOVES crop rectangle AMOUNT OF pixels RIGHT\n        self.move_rect(self.cropIndex, int(self.config['move-step']), 0)\n"
p78
aS'\n    def canvas_ArrowUp(self'
p79
aS', event=None):\n        # MOVES crop rectangle ONE pixel UP\n        self.move_rect(self.cropIndex, 0, -1)\n'
p80
aS'\n    def canvas_ArrowUp_Shift(self'
p81
aS", event=None):\n        # MOVES crop rectangle AMOUNT OF pixels UP\n        self.move_rect(self.cropIndex, 0, -int(self.config['move-step']))\n"
p82
aS'\n    def canvas_KP_Add(self'
p83
aS",Event=None):\n        # Enlarges rectangle for AMOUNT OF pixels\n        self.resize_rect(self.cropIndex, int(self.config['resize-step']), int(self.config['resize-step']))\n"
p84
aS'\n    def canvas_KP_ArrowDown(self'
p85
aS', event=None):\n        # MOVES crop rectangle ONE pixel DOWN\n        self.move_rect(self.cropIndex, 0, 1)\n'
p86
aS'\n    def canvas_KP_ArrowLeft(self'
p87
aS', event=None):\n        # MOVES crop rectangle ONE pixel LEFT\n        self.move_rect(self.cropIndex, -1, 0)\n'
p88
aS'\n    def canvas_KP_ArrowRight(self'
p89
aS', event=None):\n        # MOVES crop rectangle ONE pixel RIGHT\n        self.move_rect(self.cropIndex, 1, 0)\n'
p90
aS'\n    def canvas_KP_ArrowUp(self'
p91
aS', event=None):\n        # MOVES crop rectangle ONE pixel UP\n        self.move_rect(self.cropIndex, 0, -1)\n'
p92
aS'\n    def canvas_KP_Enter(self'
p93
aS',Event=None):\n        # CROPS selected areas\n        self.start_cropping()\n'
p94
aS'\n    def canvas_KP_PageDown(self'
p95
aS', event=None):\n        # Moves file selection in listbox one down\n        self.pressPage(self.PAGE_DOWN)\n'
p96
aS'\n    def canvas_KP_PageUp(self'
p97
aS', event=None):\n        # Moves file selection in listbox one up\n        self.pressPage(self.PAGE_UP)\n'
p98
aS'\n    def canvas_KP_Subtract(self'
p99
aS",Event=None):\n        # Reduces rectangle by AMOUNT OF pixels\n        self.resize_rect(self.cropIndex, -int(self.config['resize-step']), -int(self.config['resize-step']))\n"
p100
aS'\n    def canvas_PageDown(self'
p101
aS', event=None):\n        # Moves file selection in listbox one DOWN\n        self.pressPage(self.PAGE_DOWN)\n'
p102
aS'\n    def canvas_PageUp(self'
p103
aS', event=None):\n        # Moves file selection in listbox one UP\n        self.pressPage(self.PAGE_UP)\n'
p104
aS'\n    def canvas_Return(self'
p105
aS',Event=None):\n        # CROPS selected areas\n        self.start_cropping()\n'
p106
aS'\n    def canvas_SPACE(self'
p107
aS', event=None):\n        # CROPS selected areas\n        self.start_cropping()\n'
p108
aS'\n    def canvas_mouse1_callback(self'
p109
aS', event=None):\n        self.croprect_start = (event.x, event.y)\n'
p110
aS'\n    def canvas_mouseb1move_callback(self'
p111
aS', event=None):\n        if self.current_rect:\n            self.canvas.delete(self.current_rect)\n        x1 = self.croprect_start[0]\n        y1 = self.croprect_start[1]\n        x2 = event.x\n        y2 = event.y\n        bbox = (x1, y1, x2, y2)\n        cr = self.canvas.create_rectangle(bbox)\n        self.current_rect = cr\n'
p112
aS'\n    def canvas_mouseup1_callback(self'
p113
aS', event=None):\n        self.croprect_end = (event.x, event.y)\n        self.set_crop_area()\n        self.canvas.delete(self.current_rect)\n        self.current_rect = None\n'
p114
aS'\n    def on_PhotoCropper_Config(self'
p115
aS', event=None):\n        if self._after_id:\n            self.after_cancel(self._after_id)\n        self._after_id = self.after(1200, self.draw_after_resize)\n'
p116
aS'\n    def on_btnSettings_ButRel_1(self'
p117
aS', event=None):\n        tkMessageBox.showinfo("Information", "Not yet implemented.", parent=self)\n'
p118
aS'\n    def on_lbFiles_mouseClick_1(self'
p119
aS', event=None):\n        self.lbIndex = self.lbFiles.curselection()[0]\n        self.load_lbFiles_image(self.lbFiles.get(tk.ACTIVE))\n'
p120
aS'\n    def on_quitButton_ButRel_1(self'
p121
aS", event=None):\n        conf['geometry'] = self.winfo_toplevel().geometry()\n        conf.save()\n        self.quit()\n"
p122
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p123
aS'    \n    # Constants for listbox with image file names\n    PAGE_UP = -1\n    PAGE_DOWN = 1\n    \n    # Moves rectangle with "index" by "step" pixels\n    def move_rect(self, index, xstep, ystep):\n        if len(self.crop_rects) == index + 1:\n            cr = self.crop_rects[index]\n            self.canvas.delete(self.canvas_rects[index])\n            self.canvas_rects.pop(index)\n            self.crop_rects[index] = cr.move_rect(xstep, ystep)\n            self.redraw_rect()\n\n    def resize_rect(self, index, xstep, ystep):\n        if len(self.crop_rects) == index + 1:\n            cr = self.crop_rects[index]\n            self.canvas.delete(self.canvas_rects[index])\n            self.canvas_rects.pop(index)\n            self.crop_rects[index] = cr.resize_rect(xstep, ystep)\n            self.redraw_rect()\n        \n    def pressPage(self, direction=0):\n        index = self.lbFiles.curselection()[0] + direction\n        self.lbFiles.selection_clear(0, tk.END)\n        self.lbSelect(index)\n\n    # Programmatically select image in a listbox\n    def lbSelect(self, index):\n        if index < 0:\n            index = 0\n        elif index == self.lbFiles.size():\n            index = self.lbFiles.size()-1  \n        self.lbFiles.select_set(index)\n        self.lbFiles.activate(index)\n        if index != self.lbIndex:\n            self.load_lbFiles_image(self.lbFiles.get(tk.ACTIVE))\n            self.lbIndex = index\n        \n    def draw_after_resize(self):\n        # Check if there is a selection in file list\n        if self.filename:\n            self.loadimage()\n \n    def load_lbFiles_image(self, imagePath):\n        self.filename = os.path.join(self.config[\'input-directory\'], imagePath)\n        if os.path.exists(self.filename):\n            self.loadimage()\n            self.winfo_toplevel().title(\'Scan Cropper - \' + imagePath)\n            self.redraw_rect()\n       \n    def set_crop_area(self):\n        r = Rect(self.croprect_start, self.croprect_end)\n        r.set_thumboffset(int(self.config[\'thumb-offset\']))\n        \n        # adjust dimensions\n        r.clip_to(self.image_thumb_rect)\n\n        # ignore rects smaller than this size\n        if min(r.h, r.w) < 10:\n            return\n\n        ra = r\n        ra = ra.scale_rect(self.scale)\n        ra = ra.move_rect(self.x0, self.y0)\n        ra = ra.valid_rect(self.w, self.h)\n        if self.zoommode:\n            self.canvas.delete(tk.ALL)\n            self.x0 = ra.left\n            self.y0 = ra.top\n            za = (ra.left, ra.top, ra.right, ra.bottom)\n            self.image_thumb = self.image.crop(za)\n            self.image_thumb.thumbnail(thumbsize)\n            self.image_thumb_rect = Rect(self.image_thumb.size)\n            self.image_thumb_rect.set_thumboffset(int(self.config[\'thumb-offset\']))\n            self.displayimage()\n            x_scale = float(ra.w) / self.image_thumb_rect.w\n            y_scale = float(ra.h) / self.image_thumb_rect.h\n            self.scale = (x_scale, y_scale)\n            self.redraw_rect()\n            self.zoommode = False\n            self.zoomButton.deselect()\n        else:\n            self.drawrect(r)\n            self.crop_rects.append(ra)\n            self.n = self.n + 1\n\n    def zoom_mode(self):\n        if self.zoommode:\n            self.zoommode = False\n        else:\n            self.zoommode = True\n\n    def unzoom_image(self):\n        self.canvas.delete(tk.ALL)\n        self.zoommode = False\n        self.zoomButton.deselect()\n        self.x0 = 0\n        self.y0 = 0\n        self.image_thumb = self.image.copy()\n        self.image_thumb.thumbnail(thumbsize)\n        self.image_thumb_rect = Rect(self.image_thumb.size)\n        self.image_thumb_rect.set_thumboffset(int(self.config[\'thumb-offset\']))\n        self.displayimage()\n        x_scale = float(self.image_rect.w) / self.image_thumb_rect.w\n        y_scale = float(self.image_rect.h) / self.image_thumb_rect.h\n        self.scale = (x_scale, y_scale)\n        self.redraw_rect()\n\n    def plus_box(self):\n        if self.n > 1:\n            self.canvas.delete(tk.ALL)\n            if self.crop_rects:\n                ra = self.crop_rects[self.n - 1]\n                self.crop_rects.pop()\n                self.n = self.n - 1\n                ra0 = self.crop_rects[self.n - 1]\n                ra0 = ra0.plus_rect(ra)\n                self.crop_rects[self.n - 1] = ra0\n                self.displayimage()\n                self.redraw_rect()\n                self.zoommode = False\n                self.zoomButton.deselect()\n\n    def redraw_rect(self):\n        for croparea in self.crop_rects:\n            self.drawrect(croparea.rescale_rect(self.scale, self.x0, self.y0))\n\n    def undo_last(self):\n        if self.canvas_rects:\n            r = self.canvas_rects.pop()\n            self.canvas.delete(r)\n\n        if self.crop_rects:\n            self.crop_rects.pop()\n\n    def drawrect(self, rect):\n        bbox = (rect.left, rect.top, rect.right, rect.bottom)\n        cr = self.canvas.create_rectangle(\n            bbox, activefill=\'\', fill=\'yellow\', stipple=self.config[\'stipple\'])\n        self.canvas_rects.append(cr)\n\n    def reset(self):\n        self.canvas.delete(tk.ALL)\n        self.zoommode = False\n        self.zoomButton.deselect()\n        self.canvas_rects = []\n        self.crop_rects = []\n        self.displayimage()\n        \n    def displayimage(self):\n        self.photoimage = ImageTk.PhotoImage(self.image_thumb)\n        w, h = self.image_thumb.size\n        self.canvas.delete("all") # Remove remnants of previous crop area\n        \n        self.canvas.create_image(\n            int(self.config[\'thumb-offset\']),\n            int(self.config[\'thumb-offset\']),\n            anchor=tk.NW,\n            image=self.photoimage)\n\n    def loadimage(self):\n        self.image = Image.open(self.filename)\n        self.textStatus.set(self.lbFiles.get(tk.ACTIVE))\n        self.image_rect = Rect(self.image.size)\n        self.image_rect.set_thumboffset(int(self.config[\'thumb-offset\']))\n        self.w = self.image_rect.w\n        self.h = self.image_rect.h\n        # TODO: needed? borderwidth = self.canvas.config()[\'borderwidth\'][4]\n        \n        self.image_thumb = self.image.copy()\n        self.image_thumb.thumbnail(\n            [ self.canvas.winfo_width() - int(self.config[\'thumb-offset\']),\n              self.canvas.winfo_height() - int(self.config[\'thumb-offset\']) ]\n        )\n        self.image_thumb_rect = Rect(self.image_thumb.size)\n        self.image_thumb_rect.set_thumboffset(int(self.config[\'thumb-offset\']))\n\n        self.displayimage()\n        x_scale = float(self.image_rect.w) / self.image_thumb_rect.w\n        y_scale = float(self.image_rect.h) / self.image_thumb_rect.h\n        self.scale = (x_scale, y_scale)\n\n    def newfilename(self, filenum):\n        f, e = os.path.splitext(self.filename)\n        return \'%s_crop_%s%s\' % (f, filenum, e)\n\n    def start_cropping(self):\n        cropcount = 0\n        status = "{0} cropped: ".format(self.lbFiles.get(tk.ACTIVE))\n        for croparea in self.crop_rects:\n            cropcount += 1\n            filename = self.newfilename(cropcount)\n            _, tail = os.path.split(filename) # Remove input directory\n            self.crop(croparea, tail)\n            status += "{0}:{1} ".format(cropcount, croparea)\n        self.textStatus.set(status.strip())\n\n    def crop(self, croparea, filename):\n        ca = (croparea.left, croparea.top, croparea.right, croparea.bottom)\n        newimg = self.image.crop(ca)\n        imagePath = os.path.join(self.config[\'output-directory\'], filename)\n        newimg.save(imagePath)\n        \n    def load_image_list(self):\n        if self.config is not None:\n            self.lbFiles.delete(0, tk.END)\n            suffixtuple = tuple(re.split(self.delimiters, self.config[\'image-extensions\']))\n            for item in os.listdir(self.config[\'input-directory\']):\n                if os.path.isfile(os.path.join(self.config[\'input-directory\'], item)):\n                    if item.lower().endswith(suffixtuple): # The arg can be a tuple of suffixes to look for\n                        self.lbFiles.insert(tk.END, item)\n            self.update_idletasks()\n            # If there are items in listbox, select the 1st one\n            if self.lbFiles.size() > 0:\n                self.lbFiles.select_set(0)\n                self.load_lbFiles_image(self.lbFiles.get(tk.ACTIVE))\n                self.canvas.focus_set()\n\n\nclass CreateToolTip(object):\n    """\n    create a tooltip for a given widget\n    """\n    def __init__(self, widget, text=\'widget info\'):\n        self.waittime = 500     #miliseconds\n        self.wraplength = 180   #pixels\n        self.widget = widget\n        self.text = text\n        self.widget.bind("<Enter>", self.enter)\n        self.widget.bind("<Leave>", self.leave)\n        self.widget.bind("<ButtonPress>", self.leave)\n        self.id = None\n        self.tw = None\n\n    def enter(self, event=None):\n        self.schedule()\n\n    def leave(self, event=None):\n        self.unschedule()\n        self.hidetip()\n\n    def schedule(self):\n        self.unschedule()\n        self.id = self.widget.after(self.waittime, self.showtip)\n\n    def unschedule(self):\n        id = self.id\n        self.id = None\n        if id:\n            self.widget.after_cancel(id)\n\n    def showtip(self, event=None):\n        x = y = 0\n        x, y, cx, cy = self.widget.bbox("insert")\n        x += self.widget.winfo_rootx() + 25\n        y += self.widget.winfo_rooty() + 20\n        # creates a toplevel window\n        self.tw = tk.Toplevel(self.widget)\n        # Leaves only the label and removes the app window\n        self.tw.wm_overrideredirect(True)\n        self.tw.wm_geometry("+%d+%d" % (x, y))\n        label = tk.Label(self.tw, text=self.text, justify=\'left\',\n            background="#fef9e7", relief=\'solid\', borderwidth=1,\n            wraplength = self.wraplength)\n        label.pack(ipadx=1)\n\n    def hidetip(self):\n        tw = self.tw\n        self.tw= None\n        if tw:\n            tw.destroy()\n            \nclass Rect(object):\n    def __init__(self, *args):\n        self.set_points(*args)\n        self.thumboffset = 0\n\n    def set_points(self, *args):\n        if len(args) == 2:\n            pt1 = args[0]\n            pt2 = args[1]\n        elif len(args) == 1:\n            pt1 = (0, 0)\n            pt2 = args[0]\n        elif len(args) == 0:\n            pt1 = (0, 0)\n            pt2 = (0, 0)\n\n        x1, y1 = pt1\n        x2, y2 = pt2\n\n        self.left = min(x1, x2)\n        self.top = min(y1, y2)\n        self.right = max(x1, x2)\n        self.bottom = max(y1, y2)\n\n        self._update_dims()\n\n    def clip_to(self, containing_rect):\n        cr = containing_rect\n        self.top = max(self.top, cr.top + self.thumboffset)\n        self.bottom = min(self.bottom, cr.bottom + self.thumboffset)\n        self.left = max(self.left, cr.left + self.thumboffset)\n        self.right = min(self.right, cr.right + self.thumboffset)\n        self._update_dims()\n\n    def _update_dims(self):\n        """added to provide w and h dimensions."""\n        self.w = self.right - self.left\n        self.h = self.bottom - self.top\n\n    def scale_rect(self, scale):\n        x_scale = scale[0]\n        y_scale = scale[1]\n\n        r = Rect()\n        r.top = int((self.top - self.thumboffset) * y_scale)\n        r.bottom = int((self.bottom - self.thumboffset) * y_scale)\n        r.right = int((self.right - self.thumboffset) * x_scale)\n        r.left = int((self.left - self.thumboffset) * x_scale)\n        r._update_dims()\n\n        return r\n\n    def move_rect(self, x0, y0):\n        r = Rect()\n        r.top = int(self.top + y0)\n        r.bottom = int(self.bottom + y0)\n        r.right = int(self.right + x0)\n        r.left = int(self.left + x0)\n        r._update_dims()\n        return r\n\n    # Rezire rectangle by certain amount on X- and Y- axis\n    def resize_rect(self, x0, y0):\n        r = Rect()\n        r.top = self.top\n        r.left = self.left\n        r.bottom = int(self.bottom + y0)\n        r.right = int(self.right + x0)\n        # Make sure rectangle does not disappear!\n        if r.bottom - r.top < 10:\n            r.bottom = self.bottom\n        if r.right - r.left < 10:\n            r.right = self.right\n        r._update_dims()\n        return r\n        \n    def rescale_rect(self, scale, x0, y0):\n        x_scale = scale[0]\n        y_scale = scale[1]\n\n        r = Rect()\n        r.top = int((self.top - y0) / y_scale + self.thumboffset)\n        r.bottom = int((self.bottom - y0) / y_scale + self.thumboffset)\n        r.right = int((self.right - x0) / x_scale + self.thumboffset)\n        r.left = int((self.left - x0) / x_scale + self.thumboffset)\n        r._update_dims()\n        return r\n\n    def plus_rect(self, r0):\n        r = Rect()\n        r.top = min(self.top, r0.top)\n        r.bottom = max(self.bottom, r0.bottom)\n        r.right = max(self.right, r0.right)\n        r.left = min(self.left, r0.left)\n        r._update_dims()\n        return r\n\n    def valid_rect(self, w, h):\n        r = Rect()\n        r.top = self.top\n        if r.top < 0:\n            r.top = 0\n        if r.top > h - 1:\n            r.top = h - 1\n        r.bottom = self.bottom\n        if r.bottom < 1:\n            r.bottom = 1\n        if r.bottom > h:\n            r.bottom = h\n        r.right = self.right\n        if r.right < 1:\n            r.right = 1\n        if r.right > w:\n            r.right = w\n        r.left = self.left\n        if r.left < 0:\n            r.left = 0\n        if r.left > w - 1:\n            r.left = w - 1\n        r._update_dims()\n        return r\n\n    def set_thumboffset(self, thumboffset=0):\n        self.thumboffset = thumboffset\n\n    def __repr__(self):\n        return \'(%d,%d)-(%d,%d)\' % (self.left, self.top, self.right, self.bottom)\n\n# Class that handles configuration\nclass ScanConfig(object):\n\n    def __init__(self, configFile=None, appName=\'PhotoCropper\'):\n        self.section = appName.upper()\n        self.get_default_config()\n        \n        if configFile is None:\n            # Create default configuration in OS-independent "home" directory\n            configPath = os.path.join(os.path.expanduser(\'~\'), \'.config\', appName.lower())\n            if not os.path.exists(configPath):\n                os.makedirs(configPath)\n            self.configFile = os.path.join(configPath, \'config.ini\')\n            self.config = confpars.SafeConfigParser(self.get_default_config())\n            if os.path.exists(self.configFile):\n                self.config.read(self.configFile)\n            else:\n                self.config.add_section(self.section)\n        elif os.path.exists(configFile):\n            self.configFile = os.path.normpath(configFile)\n            self.config = confpars.SafeConfigParser(self.get_default_config())\n            self.config.read(self.configFile)\n        else:\n            # Path given, but does not exist\n            raise Exception("Configuration file \'{0}\' does not exist".format(configFile))\n    \n    # Gets default configuration\n    def get_default_config(self):\n        return {\n            \'geometry\'         : \'1024x768+10+10\', # Position and size of main window\n            \'input-directory\'  : os.path.expanduser(\'~\'), # Directory with pictures to process\n            \'output-directory\' : os.path.expanduser(\'~\'), # Directory to write resulting pictures into\n            \'image-extensions\' : \'tif tiff jpg jpeg gif png\', # Extensions of files considered to be pictures\n            \'thumb-offset\'     : \'4\', # Thumbnail offset\n            \'stipple\'          : \'gray12\', # Stipple pattern\n            \'move-step\'        : \'10\', # Amount of pixels to move rectangle in all directions\n            \'resize-step\'      : \'10\' # Amount of pixels to resize rectangle\n        }\n\n    def __getitem__(self, key):\n        return self.config.get(self.section, key)\n\n    def __setitem__(self, key, value):\n        self.config.set(self.section, key, value)\n\n    def save(self):\n        with open(self.configFile, \'wb\') as cf:\n            self.config.write(cf)'
p124
asg7
I0
sg45
I16249471
ssg29
(lp125
(dp126
S'ModuleName'
p127
S'Tkinter'
p128
sg50
g6
sS'WidgetName'
p129
S'Frame'
p130
sS'PackOptions'
p131
(lp132
sg24
(I0
tp133
sS'XY'
p134
(I0
I0
tp135
sS'Bindings'
p136
(lp137
(dp138
S'Handler'
p139
S'on_PhotoCropper_Config'
p140
sS'Component'
p141
S''
sS'Event'
p142
S'<Configure>'
p143
sasS'Options'
p144
(lp145
(dp146
g50
S'borderwidth'
p147
sS'Value'
p148
S'n:5'
p149
sS'Extra'
p150
Nsa(dp151
g50
S'width'
p152
sg148
S'n:1'
p153
sg150
Nsa(dp154
g50
S'height'
p155
sg148
S'n:1'
p156
sg150
Nsasa(dp157
g127
S'Tkinter'
p158
sg50
S'btnSettings'
p159
sg129
S'Button'
p160
sg131
(lp161
(dp162
g50
S'anchor'
p163
sg148
S'sw'
p164
sa(dp165
g50
S'expand'
p166
sg148
S'yes'
p167
sa(dp168
g50
S'fill'
p169
sg148
S'x'
sasg24
Nsg134
(lp170
I2610
aI9332
asg136
(lp171
(dp172
g139
S'on_btnSettings_ButRel_1'
p173
sg141
S''
sg142
S'<ButtonRelease-1>'
p174
sasg144
(lp175
(dp176
g50
S'text'
p177
sg148
S'Settings ...'
p178
sg150
Nsasa(dp179
g127
S'Tkinter'
p180
sg50
S'canvas'
p181
sg129
S'Canvas'
p182
sg131
(lp183
(dp184
g50
g163
sg148
S'nw'
p185
sa(dp186
g50
g166
sg148
S'yes'
p187
sa(dp188
g50
g169
sg148
S'both'
p189
sasg24
Nsg134
(lp190
I5113
aI5331
asg136
(lp191
(dp192
g139
S'canvas_mouseb1move_callback'
p193
sg141
S''
sg142
S'<B1-Motion>'
p194
sa(dp195
g139
S'canvas_mouse1_callback'
p196
sg141
S''
sg142
S'<Button-1>'
p197
sa(dp198
g139
S'canvas_mouseup1_callback'
p199
sg141
S''
sg142
S'<ButtonRelease-1>'
p200
sa(dp201
g139
S'canvas_ArrowDown'
p202
sg141
S''
sg142
S'<KeyRelease-Down>'
p203
sa(dp204
g139
S'canvas_ArrowDown_Shift'
p205
sg141
S''
sg142
S'<Shift-KeyRelease-Down>'
p206
sa(dp207
g139
S'canvas_KP_Add'
p208
sg141
S''
sg142
S'<KeyRelease-KP_Add>'
p209
sa(dp210
g139
S'canvas_KP_ArrowDown'
p211
sg141
S''
sg142
S'<KeyRelease-KP_Down>'
p212
sa(dp213
g139
S'canvas_KP_Enter'
p214
sg141
S''
sg142
S'<KeyRelease-KP_Enter>'
p215
sa(dp216
g139
S'canvas_KP_ArrowLeft'
p217
sg141
S''
sg142
S'<KeyRelease-KP_Left>'
p218
sa(dp219
g139
S'canvas_KP_PageDown'
p220
sg141
S''
sg142
S'<KeyRelease-KP_Next>'
p221
sa(dp222
g139
S'canvas_KP_PageUp'
p223
sg141
S''
sg142
S'<KeyRelease-KP_Prior>'
p224
sa(dp225
g139
S'canvas_KP_ArrowRight'
p226
sg141
S''
sg142
S'<KeyRelease-KP_Right>'
p227
sa(dp228
g139
S'canvas_KP_Subtract'
p229
sg141
S''
sg142
S'<KeyRelease-KP_Subtract>'
p230
sa(dp231
g139
S'canvas_KP_ArrowUp'
p232
sg141
S''
sg142
S'<KeyRelease-KP_Up>'
p233
sa(dp234
g139
S'canvas_ArrowLeft'
p235
sg141
S''
sg142
S'<KeyRelease-Left>'
p236
sa(dp237
g139
S'canvas_ArrowLeft_Shift'
p238
sg141
S''
sg142
S'<Shift-KeyRelease-Left>'
p239
sa(dp240
g139
S'canvas_PageDown'
p241
sg141
S''
sg142
S'<KeyRelease-Next>'
p242
sa(dp243
g139
S'canvas_PageUp'
p244
sg141
S''
sg142
S'<KeyRelease-Prior>'
p245
sa(dp246
g139
S'canvas_Return'
p247
sg141
S''
sg142
S'<KeyRelease-Return>'
p248
sa(dp249
g139
S'canvas_ArrowRight'
p250
sg141
S''
sg142
S'<KeyRelease-Right>'
p251
sa(dp252
g139
S'canvas_ArrowRight_Shift'
p253
sg141
S''
sg142
S'<Shift-KeyRelease-Right>'
p254
sa(dp255
g139
S'canvas_ArrowUp'
p256
sg141
S''
sg142
S'<KeyRelease-Up>'
p257
sa(dp258
g139
S'canvas_ArrowUp_Shift'
p259
sg141
S''
sg142
S'<Shift-KeyRelease-Up>'
p260
sa(dp261
g139
S'canvas_SPACE'
p262
sg141
S''
sg142
S'<KeyRelease-space>'
p263
sasg144
(lp264
(dp265
g50
S'borderwidth'
p266
sg148
S'n:1'
p267
sg150
Nsa(dp268
g50
S'takefocus'
p269
sg148
I1
sg150
Nsasa(dp270
g127
S'Tkinter'
p271
sg50
S'frameButtons'
p272
sg129
S'Frame'
p273
sg131
(lp274
(dp275
g50
g163
sg148
S'nw'
p276
sa(dp277
g50
g169
sg148
S'x'
sasg24
(I0
I1
I1
tp278
sg134
g135
sg136
(lp279
sg144
(lp280
(dp281
g50
g147
sg148
S'n:1'
p282
sg150
Nsa(dp283
g50
g155
sg148
S'n:1'
p284
sg150
Nsasa(dp285
g127
S'Tkinter'
p286
sg50
S'frameFiles'
p287
sg129
S'Frame'
p288
sg131
(lp289
(dp290
g50
g163
sg148
g185
sa(dp291
g50
g169
sg148
S'y'
sasg24
(I0
I0
tp292
sg134
g135
sg136
(lp293
sg144
(lp294
sa(dp295
g127
g286
sg50
S'frameMain'
p296
sg129
g288
sg131
(lp297
(dp298
g50
g166
sg148
S'yes'
p299
sa(dp300
g50
g169
sg148
S'both'
p301
sasg24
(I0
I1
tp302
sg134
g135
sg136
(lp303
sg144
(lp304
(dp305
g50
g147
sg148
S'n:1'
p306
sg150
Nsasa(dp307
g127
g271
sg50
S'framePicture'
p308
sg129
g273
sg131
(lp309
(dp310
g50
g163
sg148
g185
sa(dp311
g50
g166
sg148
g299
sa(dp312
g50
g169
sg148
g301
sasg24
(I0
I1
I0
tp313
sg134
g135
sg136
(lp314
sg144
(lp315
(dp316
g50
g147
sg148
S'n:1'
p317
sg150
Nsa(dp318
g50
S'relief'
p319
sg148
S'raised'
p320
sg150
Nsasa(dp321
g127
S'Tkinter'
p322
sg50
S'frmStatus'
p323
sg129
S'Frame'
p324
sg131
(lp325
(dp326
g50
g163
sg148
S'nw'
p327
sa(dp328
g50
g169
sg148
S'y'
sasg24
(I0
I1
I2
tp329
sg134
g135
sg136
(lp330
sg144
(lp331
sa(dp332
g127
S'Tkinter'
p333
sg50
S'goButton'
p334
sg129
S'Button'
p335
sg131
(lp336
(dp337
g50
g163
sg148
S'sw'
p338
sa(dp339
g50
g166
sg148
g299
sa(dp340
g50
g169
sg148
S'x'
sasg24
Nsg134
(lp341
I6607
aI9332
asg136
(lp342
sg144
(lp343
(dp344
g50
g177
sg148
S'Crops'
p345
sg150
Nsa(dp346
g50
S'activebackground'
p347
sg148
S'c:#0F0'
p348
sg150
Nsa(dp349
g50
S'command'
p350
sg148
S'start_cropping'
p351
sg150
I0
sasa(dp352
g127
g180
sg50
S'lbFiles'
p353
sg129
S'Listbox'
p354
sg131
(lp355
(dp356
g50
g163
sg148
g185
sa(dp357
g50
g169
sg148
S'y'
sasg24
Nsg134
(lp358
I1219
aI7964
asg136
(lp359
(dp360
g139
S'on_lbFiles_mouseClick_1'
p361
sg141
S''
sg142
S'<ButtonRelease-1>'
p362
sasg144
(lp363
(dp364
g50
S'takefocus'
p365
sg148
I1
sg150
Nsasa(dp366
g127
g158
sg50
g51
sg129
S'Label'
p367
sg131
(lp368
(dp369
g50
g163
sg148
g164
sa(dp370
g50
g166
sg148
S'yes'
p371
sa(dp372
g50
g169
sg148
S'y'
sasg24
Nsg134
(lp373
I4408
aI9790
asg136
(lp374
sg144
(lp375
(dp376
g50
S'text'
p377
sg148
S'This is label'
p378
sg150
Nsa(dp379
g50
S'textvariable'
p380
sg148
S'textStatus'
p381
sg150
S's.as'
p382
sa(dp383
g50
S'relief'
p384
sg148
S'sunken'
p385
sg150
Nsasa(dp386
g127
g333
sg50
S'plusButton'
p387
sg129
g335
sg131
(lp388
(dp389
g50
g163
sg148
g338
sa(dp390
g50
g166
sg148
g299
sa(dp391
g50
g169
sg148
S'x'
sasg24
Nsg134
(lp392
I5602
aI9332
asg136
(lp393
sg144
(lp394
(dp395
g50
g177
sg148
S'+'
sg150
Nsa(dp396
g50
g350
sg148
S'plus_box'
p397
sg150
I0
sasa(dp398
g127
g333
sg50
S'quitButton'
p399
sg129
g335
sg131
(lp400
(dp401
g50
g163
sg148
g338
sa(dp402
g50
g166
sg148
g299
sa(dp403
g50
g169
sg148
S'x'
sasg24
Nsg134
(lp404
I7377
aI9332
asg136
(lp405
(dp406
g139
S'on_quitButton_ButRel_1'
p407
sg141
S''
sg142
S'<ButtonRelease-1>'
p408
sasg144
(lp409
(dp410
g50
g177
sg148
S'Quit'
p411
sg150
Nsa(dp412
g50
g347
sg148
S'c:#F00'
p413
sg150
Nsa(dp414
g50
g350
sg148
S'quit'
p415
sg150
I0
sasa(dp416
g127
g333
sg50
S'resetButton'
p417
sg129
g335
sg131
(lp418
(dp419
g50
g163
sg148
g338
sa(dp420
g50
g166
sg148
g299
sa(dp421
g50
g169
sg148
S'x'
sasg24
Nsg134
(lp422
I3173
aI9332
asg136
(lp423
sg144
(lp424
(dp425
g50
g177
sg148
S'Reset'
p426
sg150
Nsa(dp427
g50
g347
sg148
S'c:#F00'
p428
sg150
Nsa(dp429
g50
g350
sg148
S'reset'
p430
sg150
I0
sasa(dp431
g127
g180
sg50
S'sbFiles'
p432
sg129
S'Scrollbar'
p433
sg131
(lp434
(dp435
g50
g163
sg148
g185
sa(dp436
g50
g169
sg148
S'y'
sasg24
Nsg134
(lp437
I1843
aI7964
asg136
(lp438
sg144
(lp439
sa(dp440
g127
g333
sg50
S'undoButton'
p441
sg129
g335
sg131
(lp442
(dp443
g50
g163
sg148
g338
sa(dp444
g50
g166
sg148
g299
sa(dp445
g50
g169
sg148
S'x'
sasg24
Nsg134
(lp446
I3794
aI9332
asg136
(lp447
sg144
(lp448
(dp449
g50
g177
sg148
S'Undo'
p450
sg150
Nsa(dp451
g50
g347
sg148
S'c:#FF0'
p452
sg150
Nsa(dp453
g50
g350
sg148
S'undo_last'
p454
sg150
I0
sasa(dp455
g127
g333
sg50
S'unzoomButton'
p456
sg129
g335
sg131
(lp457
(dp458
g50
g163
sg148
g338
sa(dp459
g50
g166
sg148
g299
sa(dp460
g50
g169
sg148
S'x'
sasg24
Nsg134
(lp461
I4897
aI9327
asg136
(lp462
sg144
(lp463
(dp464
g50
g177
sg148
S'<-|->'
p465
sg150
Nsa(dp466
g50
g347
sg148
S'c:#00F'
p467
sg150
Nsa(dp468
g50
g350
sg148
S'unzoom_image'
p469
sg150
I0
sasa(dp470
g127
g333
sg50
S'zoomButton'
p471
sg129
S'Checkbutton'
p472
sg131
(lp473
(dp474
g50
g163
sg148
g338
sa(dp475
g50
g166
sg148
g299
sa(dp476
g50
g169
sg148
S'x'
sasg24
Nsg134
(lp477
I4175
aI9332
asg136
(lp478
sg144
(lp479
(dp480
g50
S'text'
p481
sg148
S'Zoom'
p482
sg150
Nsa(dp483
g50
S'command'
p484
sg148
S'zoom_mode'
p485
sg150
I0
sasasS'BaseClass'
p486
g53
sg33
I1
sa(dp487
g49
g38
sg50
S'Preferences'
p488
sg28
S'_Frame1'
p489
sg52
S'Tkinter.Frame'
p490
sg54
(lp491
(lp492
I5000
aI1545
aI0
aasg38
(dp493
g36
S'27.0'
p494
sg38
(lp495
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                 Preferences                                  #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass Preferences(Tkinter.Frame):\n    def __init__(self,Master=None,*pos,**kw):\n'
p496
aS'        #\n        #Your code here\n        #\n'
p497
aS"\n        apply(Tkinter.Frame.__init__,(self,Master),kw)\n        self._Frame2 = Tkinter.Frame(self)\n        self._Frame2.pack(side='top')\n        self._Frame1 = Tkinter.Frame(self)\n        self._Frame1.pack(side='top')\n"
p498
aS'        #\n        #Your code here\n        #\n'
p499
aS'    #\n    #Start of event handler methods\n    #\n'
p500
aS'\n'
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p501
aS''
asg7
I0
sg45
I12881023
ssg29
(lp502
(dp503
g127
S'Tkinter'
p504
sg50
g488
sg129
S'Frame'
p505
sg131
(lp506
sg24
(I0
tp507
sg134
g135
sg136
(lp508
sg144
(lp509
sa(dp510
g127
S'Tkinter'
p511
sg50
g489
sg129
S'Frame'
p512
sg131
(lp513
sg24
(I0
I1
tp514
sg134
g135
sg136
(lp515
sg144
(lp516
sa(dp517
g127
g511
sg50
S'_Frame2'
p518
sg129
g512
sg131
(lp519
sg24
(I0
I0
tp520
sg134
g135
sg136
(lp521
sg144
(lp522
sasg486
g490
sg33
I1
sasS'VisibleForm'
p523
g34
sS'SelectedForm'
p524
g34
sg50
g6
sa.