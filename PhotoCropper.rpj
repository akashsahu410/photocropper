(lp1
(dp2
S'ModulePrevious'
p3
S'scancropper'
p4
sS'ModuleCurrent'
p5
S'PhotoCropper'
p6
sS'Version'
p7
I1
sS'Geometry'
p8
S'3834x2065+3+28'
p9
sS'ProjectName'
p10
g6
sS'ImportTypes'
p11
(lp12
(S'Pmw'
p13
S'import'
p14
tp15
a(S'Tkinter'
p16
S'import'
p17
tp18
asS'EditorWidths'
p19
((lp20
I411
aI324
a(lp21
I378
aI357
a(lp22
I369
aI366
atp23
sS'ID'
p24
S'Rapyd Project'
p25
sS'ParkingLot'
p26
(dp27
S'SelectedWidreq'
p28
NsS'Widreqs'
p29
(lp30
ssa(dp31
S'PreviousForm'
p32
S'Preferences'
p33
sS'OnTab'
p34
I1
sS'-Main-'
p35
(dp36
S'Cursor'
p37
S'30.133'
p38
sS'Text'
p39
(lp40
S''
aS"#!/usr/bin/env python2\n# -*- coding: utf-8 -*-\n\n'''\n"
p41
aS'import rpErrorHandler\nimport Tkinter\n'
p42
aS'\ndef window_close():\n    conf[\'geometry\'] = Root.geometry()\n    conf.save() # Save configuration to keep window geometry\n    Root.destroy()\n\ntry:\n    #--------------------------------------------------------------------------#\n    # User code should go after this comment so it is inside the "try".        #\n    #     This allows rpErrorHandler to gain control on an error so it         #\n    #     can properly display a Rapyd-aware error message.                    #\n    #--------------------------------------------------------------------------#\n\n    # Adjust sys.path so we can find other modules of this project\n    if \'.\' not in sys.path:\n        sys.path.append(\'.\')\n    #Put lines to import other modules of this project here\n \n    if __name__ == \'__main__\':\n        # Parse arguments\n        parser = argparse.ArgumentParser(description=\'Picture cropper\')\n        parser.add_argument(\'-c\', \'--config\', \'--config-file\', dest=\'configFile\', default=None, help=\'Configuration file path\')\n        parser.add_argument(\'-d\', \'--debug\', default=0, help=\'Debug level\')\n        parser.add_argument(\'-i\', \'--input-dir\', \'--input-directory\', default=None, help=\'Input directory with pictures to be cropped\')\n        parser.add_argument(\'-o\', \'--output-dir\', \'--output-directory\', default=None, help=\'Output directory for storing cropped pictures\')\n        args = parser.parse_args()\n\n        \'\'\'\n'
p43
aS"        Root = Tkinter.Tk()\n        Tkinter.CallWrapper = rpErrorHandler.CallWrapper\n        App = PhotoCropper(Root)\n        App.pack(expand='yes',fill='both')\n"
p44
aS'        \'\'\'\n        Root = Tkinter.Tk()\n        App = PhotoCropper(Root)\n        App.pack(expand=\'yes\', fill=\'both\')\n        # Load configuration\n        conf = ScanConfig(args.configFile, App.__class__.__name__)\n        # Set window\n        Root.geometry(conf[\'geometry\'])\n        # Allow closing windows by clicking "X"\n        Root.protocol("WM_DELETE_WINDOW", window_close)\n        Root.title(\'Photo Cropper\')\n        App.config = conf\n        App.load_image_list()\n        Root.mainloop()\n    #--------------------------------------------------------------------------#\n    # User code should go above this comment.                                  #\n    #--------------------------------------------------------------------------#\nexcept:\n    \'\'\'\n    rpErrorHandler.RunError()\n    \'\'\'\n    raise'
p45
asg7
I0
sS'Sha'
p46
I12514943
ssS'Forms'
p47
(lp48
(dp49
S'Requested'
p50
g39
sS'Name'
p51
S'PhotoCropper'
p52
sg28
S'lbFiles'
p53
sS'Type'
p54
S'Tkinter.Frame'
p55
sS'Lines'
p56
(lp57
(lp58
I2416
aI5000
aI1
aa(lp59
I6206
aI7908
aI0
aa(lp60
I6206
aI9702
aI0
aasg39
(dp61
g37
S'281.53'
p62
sg39
(lp63
S"#------------------------------------------------------------------------------#\n#                                                                              #\n#                                 PhotoCropper                                 #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass PhotoCropper(Tkinter.Frame):\n    def __init__(self,Master=None,*pos,**kw):\n        kw['borderwidth'] = '5'\n        kw['height'] = '1'\n        kw['width'] = '1'\n"
p64
aS"# This code was deliberately ugly in order to prevent Rapyd-Tk from being\n# too smart\n\n'''\nimport argparse\nimport os\nimport re\nimport sys\n\nimport ConfigParser as confpars\nimport Tkinter, tkMessageBox\nfrom PIL import Image, ImageTk\n    \nclass PhotoCropper(Tkinter.Frame):\n    def __init__(self, Master=None, *pos, **kw):\n        kw['borderwidth'] = '5'\n        kw['height'] = '1'\n        kw['width'] = '1'\n        #\n        #Your code here\n        #\n"
p65
aS"\n        apply(Tkinter.Frame.__init__,(self,Master),kw)\n        self.bind('<Configure>',self.on_PhotoCropper_Config)\n        self.textStatus = Tkinter.StringVar()\n        self.frameFiles = Tkinter.Frame(self)\n        self.frameFiles.pack(anchor='nw',fill='y',side='left')\n        self.sbFiles = Tkinter.Scrollbar(self.frameFiles)\n        self.sbFiles.pack(anchor='nw',fill='y',side='right')\n        self.lbFiles = Tkinter.Listbox(self.frameFiles,takefocus=1\n            ,yscrollcommand=self.sbFiles.set)\n        self.lbFiles.pack(anchor='nw',fill='y',side='right')\n        self.lbFiles.bind('<ButtonRelease-1>',self.on_lbFiles_mouseClick_1)\n        self.frameMain = Tkinter.Frame(self,borderwidth='1')\n        self.frameMain.pack(expand='yes',fill='both',side='left')\n        self.framePicture = Tkinter.Frame(self.frameMain,borderwidth='1'\n            ,relief='raised')\n        self.framePicture.pack(anchor='nw',expand='yes',fill='both',side='top')\n        self.canvas = Tkinter.Canvas(self.framePicture,borderwidth='1'\n            ,highlightcolor='darkred',highlightthickness='3',takefocus=1)\n        self.canvas.pack(anchor='nw',expand='yes',fill='both',side='bottom')\n        self.canvas.bind('<B1-Motion>',self.canvas_mouseb1move_callback)\n        self.canvas.bind('<Button-1>',self.canvas_mouse1_callback)\n        self.canvas.bind('<ButtonRelease-1>',self.canvas_mouseup1_callback)\n        self.canvas.bind('<KeyRelease-Down>',self.canvas_ArrowDown)\n        self.canvas.bind('<Control-KeyRelease-Down>' \\\n            ,self.canvas_ArrowDown_Control)\n        self.canvas.bind('<Shift-KeyRelease-Down>',self.canvas_ArrowDown_Shift)\n        self.canvas.bind('<KeyRelease-KP_Add>',self.canvas_KP_Add)\n        self.canvas.bind('<KeyRelease-KP_Down>',self.canvas_ArrowDown_KP)\n        self.canvas.bind('<KeyRelease-KP_Enter>',self.canvas_KP_Enter)\n        self.canvas.bind('<KeyRelease-KP_Left>',self.canvas_ArrowLeft_KP)\n        self.canvas.bind('<KeyRelease-KP_Next>',self.canvas_KP_PageDown)\n        self.canvas.bind('<KeyRelease-KP_Prior>',self.canvas_KP_PageUp)\n        self.canvas.bind('<KeyRelease-KP_Right>',self.canvas_ArrowRight_KP)\n        self.canvas.bind('<KeyRelease-KP_Subtract>',self.canvas_KP_Subtract)\n        self.canvas.bind('<KeyRelease-KP_Up>',self.canvas_ArrowUp_KP)\n        self.canvas.bind('<KeyRelease-Left>',self.canvas_ArrowLeft)\n        self.canvas.bind('<Control-KeyRelease-Left>' \\\n            ,self.canvas_ArrowLeft_Control)\n        self.canvas.bind('<Shift-KeyRelease-Left>',self.canvas_ArrowLeft_Shift)\n        self.canvas.bind('<KeyRelease-Next>',self.canvas_PageDown)\n        self.canvas.bind('<KeyRelease-Prior>',self.canvas_PageUp)\n        self.canvas.bind('<KeyRelease-Return>',self.canvas_Return)\n        self.canvas.bind('<KeyRelease-Right>',self.canvas_ArrowRight)\n        self.canvas.bind('<Control-KeyRelease-Right>' \\\n            ,self.canvas_ArrowRight_Control)\n        self.canvas.bind('<Shift-KeyRelease-Right>' \\\n            ,self.canvas_ArrowRight_Shift)\n        self.canvas.bind('<KeyRelease-Up>',self.canvas_ArrowUp)\n        self.canvas.bind('<Control-KeyRelease-Up>',self.canvas_ArrowUp_Control)\n        self.canvas.bind('<Shift-KeyRelease-Up>',self.canvas_ArrowUp_Shift)\n        self.canvas.bind('<KeyRelease-space>',self.canvas_SPACE)\n        self.frameButtons = Tkinter.Frame(self.frameMain,borderwidth='1'\n            ,height='1')\n        self.frameButtons.pack(anchor='nw',fill='x',side='top')\n        self.btnSettings = Tkinter.Button(self.frameButtons,text='Settings ...')\n        self.btnSettings.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.btnSettings.bind('<ButtonRelease-1>',self.on_btnSettings_ButRel_1)\n        self.resetButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#F00',command=self.reset,text='Reset')\n        self.resetButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.undoButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#FF0',command=self.undo_last,text='Undo')\n        self.undoButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.zoomButton = Tkinter.Checkbutton(self.frameButtons\n            ,command=self.zoom_mode,text='Zoom')\n        self.zoomButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.unzoomButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#00F',command=self.unzoom_image,text='<-|->')\n        self.unzoomButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.plusButton = Tkinter.Button(self.frameButtons,command=self.plus_box\n            ,text='+')\n        self.plusButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.goButton = Tkinter.Button(self.frameButtons,activebackground='#0F0'\n            ,command=self.start_cropping,text='Crops')\n        self.goButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.quitButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#F00',command=self.quit,text='Quit')\n        self.quitButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.quitButton.bind('<ButtonRelease-1>',self.on_quitButton_ButRel_1)\n        self.frmStatus = Tkinter.Frame(self.frameMain)\n        self.frmStatus.pack(anchor='nw',fill='y',side='top')\n        self.lblStatus = Tkinter.Label(self.frmStatus,relief='sunken'\n            ,text='This is label',textvariable=self.textStatus)\n        self.lblStatus.pack(anchor='sw',expand='yes',fill='y',side='top')\n"
p66
aS'        #\n        #Your code here\n        #\n        self.sbFiles.config(command=self.lbFiles.yview)\n        self.quitButton_ttp = CreateToolTip(self.quitButton, "Exit")\n        self.resetButton_ttp = CreateToolTip(self.resetButton, "Reset all rectangles")\n        self.undoButton_ttp = CreateToolTip(self.undoButton, "Undo last rectangle")\n        self.zoomButton_ttp = CreateToolTip(self.zoomButton, "On/Off Zoom mode")\n        self.unzoomButton_ttp = CreateToolTip(self.unzoomButton, "Unzoom, view all image")\n        self.plusButton_ttp = CreateToolTip(self.plusButton, "Plus box, extent rectangle")\n        self.goButton_ttp = CreateToolTip(self.goButton, "Go, begin cropping")\n        self.btnInputDirSettings_ttp = CreateToolTip(self.btnSettings, "Settings")\n        self.croprect_start = None\n        self.croprect_end = None\n        self.crop_count = 0\n        self.canvas_rects = []\n        self.crop_rects = []\n        self.current_rect = None\n        self.zoommode = False\n        self.w = 1\n        self.h = 1\n        self.x0 = 0\n        self.y0 = 0\n        self.n = 0\n        self.config = None\n        self.delimiters = \' |,|\\t|#|\\|\' # String delimiters\n        self._after_id = None\n        self.filename = None\n        self.lbIndex = None # Keeps item index in listbox\n        self.cropIndex = 0\n'
p67
aS'    #\n    #Start of event handler methods\n    #\n'
p68
aS'\n'
aS'\n    def canvas_ArrowDown(self'
p69
aS', event=None):\n        # MOVES crop rectangle ONE pixel DOWN\n        self.move_rect(self.cropIndex, 0, 1)\n'
p70
aS'\n    def canvas_ArrowDown_Control(self'
p71
aS',Event=None):\n        # INCREASES size of crop rectangle by ONE pixel on Y-axis\n        self.resize_rect(self.cropIndex, 0, 1)\n'
p72
aS'\n    def canvas_ArrowDown_KP(self'
p73
aS', event=None):\n        # MOVES crop rectangle ONE pixel DOWN\n        self.move_rect(self.cropIndex, 0, 1)\n'
p74
aS'\n    def canvas_ArrowDown_Shift(self'
p75
aS",Event=None):\n        # MOVES crop rectangle AMOUNT OF pixels DOWN\n        self.move_rect(self.cropIndex, 0, int(self.config['move-step']))\n"
p76
aS'\n    def canvas_ArrowLeft(self'
p77
aS', event=None):\n        # MOVES crop rectangle ONE pixel LEFT\n        self.move_rect(self.cropIndex, -1, 0)\n'
p78
aS'\n    def canvas_ArrowLeft_Control(self'
p79
aS', event=None):\n        # REDUCES size of crop rectangle by ONE pixel on X-axis\n        self.resize_rect(self.cropIndex, -1, 0)\n'
p80
aS'\n    def canvas_ArrowLeft_KP(self'
p81
aS', event=None):\n        # MOVES crop rectangle ONE pixel LEFT\n        self.move_rect(self.cropIndex, -1, 0)\n'
p82
aS'\n    def canvas_ArrowLeft_Shift(self'
p83
aS", event=None):\n        # MOVES crop rectangle AMOUNT OF pixels LEFT\n        self.move_rect(self.cropIndex, -int(self.config['move-step']), 0)\n"
p84
aS'\n    def canvas_ArrowRight(self'
p85
aS', event=None):\n        # MOVES crop rectangle ONE pixel RIGHT\n        self.move_rect(self.cropIndex, 1, 0)\n'
p86
aS'\n    def canvas_ArrowRight_Control(self'
p87
aS',Event=None):\n        # INCREASES size of crop rectangle by ONE pixel on X-axis\n        self.resize_rect(self.cropIndex, 1, 0)\n'
p88
aS'\n    def canvas_ArrowRight_KP(self'
p89
aS', event=None):\n        # MOVES crop rectangle ONE pixel RIGHT\n        self.move_rect(self.cropIndex, 1, 0)\n'
p90
aS'\n    def canvas_ArrowRight_Shift(self'
p91
aS", event=None):\n        # MOVES crop rectangle AMOUNT OF pixels RIGHT\n        self.move_rect(self.cropIndex, int(self.config['move-step']), 0)\n"
p92
aS'\n    def canvas_ArrowUp(self'
p93
aS', event=None):\n        # MOVES crop rectangle ONE pixel UP\n        self.move_rect(self.cropIndex, 0, -1)\n'
p94
aS'\n    def canvas_ArrowUp_Control(self'
p95
aS', event=None):\n        # REDUCES size of crop rectangle by ONE pixel on Y-axis\n        self.resize_rect(self.cropIndex, 0, -1)\n'
p96
aS'\n    def canvas_ArrowUp_KP(self'
p97
aS', event=None):\n        # MOVES crop rectangle ONE pixel UP\n        self.move_rect(self.cropIndex, 0, -1)\n'
p98
aS'\n    def canvas_ArrowUp_Shift(self'
p99
aS", event=None):\n        # MOVES crop rectangle AMOUNT OF pixels UP\n        self.move_rect(self.cropIndex, 0, -int(self.config['move-step']))\n"
p100
aS'\n    def canvas_KP_Add(self'
p101
aS", event=None):\n        # Enlarges rectangle for AMOUNT OF pixels\n        self.resize_rect(self.cropIndex, int(self.config['resize-step']), int(self.config['resize-step']))\n"
p102
aS'\n    def canvas_KP_Enter(self'
p103
aS', event=None):\n        # CROPS selected areas\n        self.start_cropping()\n'
p104
aS'\n    def canvas_KP_PageDown(self'
p105
aS', event=None):\n        # Moves file selection in listbox one down\n        self.pressPage(self.PAGE_DOWN)\n'
p106
aS'\n    def canvas_KP_PageUp(self'
p107
aS', event=None):\n        # Moves file selection in listbox one up\n        self.pressPage(self.PAGE_UP)\n'
p108
aS'\n    def canvas_KP_Subtract(self'
p109
aS", event=None):\n        # Reduces rectangle by AMOUNT OF pixels\n        self.resize_rect(self.cropIndex, -int(self.config['resize-step']), -int(self.config['resize-step']))\n"
p110
aS'\n    def canvas_PageDown(self'
p111
aS', event=None):\n        # Moves file selection in listbox one DOWN\n        self.pressPage(self.PAGE_DOWN)\n'
p112
aS'\n    def canvas_PageUp(self'
p113
aS', event=None):\n        # Moves file selection in listbox one UP\n        self.pressPage(self.PAGE_UP)\n'
p114
aS'\n    def canvas_Return(self'
p115
aS',Event=None):\n        # CROPS selected areas\n        self.start_cropping()\n'
p116
aS'\n    def canvas_SPACE(self'
p117
aS', event=None):\n        # CROPS selected areas\n        self.start_cropping()\n'
p118
aS'\n    def canvas_mouse1_callback(self'
p119
aS', event=None):\n        self.croprect_start = (event.x, event.y)\n'
p120
aS'\n    def canvas_mouseb1move_callback(self'
p121
aS', event=None):\n        if self.current_rect:\n            self.canvas.delete(self.current_rect)\n        x1 = self.croprect_start[0]\n        y1 = self.croprect_start[1]\n        x2 = event.x\n        y2 = event.y\n        bbox = (x1, y1, x2, y2)\n        cr = self.canvas.create_rectangle(bbox)\n        self.current_rect = cr\n'
p122
aS'\n    def canvas_mouseup1_callback(self'
p123
aS', event=None):\n        self.croprect_end = (event.x, event.y)\n        self.set_crop_area()\n        self.canvas.delete(self.current_rect)\n        self.current_rect = None\n'
p124
aS'\n    def on_PhotoCropper_Config(self'
p125
aS', event=None):\n        if self._after_id:\n            self.after_cancel(self._after_id)\n        self._after_id = self.after(1200, self.draw_after_resize)\n'
p126
aS'\n    def on_btnSettings_ButRel_1(self'
p127
aS', event=None):\n        tkMessageBox.showinfo("Information", "Not yet implemented.", parent=self)\n'
p128
aS'\n    def on_lbFiles_mouseClick_1(self'
p129
aS', event=None):\n        self.lbIndex = self.lbFiles.curselection()[0]\n        self.load_lbFiles_image(self.lbFiles.get(self.lbIndex))\n'
p130
aS'\n    def on_quitButton_ButRel_1(self'
p131
aS", event=None):\n        conf['geometry'] = self.winfo_toplevel().geometry()\n        conf.save()\n        self.quit()\n"
p132
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p133
aS'    \n    # Constants for listbox with image file names\n    PAGE_UP = -1\n    PAGE_DOWN = 1\n    \n    # Moves rectangle with "index" by "step" pixels\n    def move_rect(self, index, xstep, ystep):\n        if len(self.crop_rects) == index + 1:\n            cr = self.crop_rects[index]\n            self.canvas.delete(self.canvas_rects[index])\n            self.canvas_rects.pop(index)\n            self.crop_rects[index] = cr.move_rect(xstep, ystep)\n            self.redraw_rect()\n\n    def resize_rect(self, index, xstep, ystep):\n        if len(self.crop_rects) == index + 1:\n            cr = self.crop_rects[index]\n            self.canvas.delete(self.canvas_rects[index])\n            self.canvas_rects.pop(index)\n            self.crop_rects[index] = cr.resize_rect(xstep, ystep)\n            self.redraw_rect()\n        \n    def pressPage(self, direction=0):\n        index = self.lbFiles.curselection()[0] + direction\n        self.lbFiles.selection_clear(0, Tkinter.END)\n        self.lbSelect(index)\n        # Move scrollbar in listbox so that it corresponds to selection\n        self.lbFiles.yview_scroll(direction, \'units\')\n\n    # Programmatically select image in a listbox\n    def lbSelect(self, index):\n        if index < 0:\n            index = 0\n        elif index == self.lbFiles.size():\n            index = self.lbFiles.size()-1  \n        self.lbFiles.select_set(index)\n        self.lbFiles.activate(index)\n        if index != self.lbIndex:\n            self.load_lbFiles_image(self.lbFiles.get(Tkinter.ACTIVE))\n            self.lbIndex = index\n        \n    def draw_after_resize(self):\n        # Check if there is a selection in file list\n        if self.filename:\n            self.loadimage()\n \n    def load_lbFiles_image(self, imagePath):\n        self.filename = os.path.join(self.config[\'input-directory\'], imagePath)\n        if os.path.exists(self.filename):\n            self.loadimage()\n            self.winfo_toplevel().title(\'Photo Cropper - \' + imagePath)\n            self.redraw_rect()\n       \n    def set_crop_area(self):\n        r = Rect(self.croprect_start, self.croprect_end)\n        r.set_thumboffset(int(self.config[\'thumb-offset\']))\n        \n        # adjust dimensions\n        r.clip_to(self.image_thumb_rect)\n\n        # ignore rects smaller than this size\n        if min(r.h, r.w) < 10:\n            return\n\n        ra = r\n        ra = ra.scale_rect(self.scale)\n        ra = ra.move_rect(self.x0, self.y0)\n        ra = ra.valid_rect(self.w, self.h)\n        if self.zoommode:\n            self.canvas.delete(Tkinter.ALL)\n            self.x0 = ra.left\n            self.y0 = ra.top\n            za = (ra.left, ra.top, ra.right, ra.bottom)\n            self.image_thumb = self.image.crop(za)\n            self.image_thumb.thumbnail(thumbsize)\n            self.image_thumb_rect = Rect(self.image_thumb.size)\n            self.image_thumb_rect.set_thumboffset(int(self.config[\'thumb-offset\']))\n            self.displayimage()\n            x_scale = float(ra.w) / self.image_thumb_rect.w\n            y_scale = float(ra.h) / self.image_thumb_rect.h\n            self.scale = (x_scale, y_scale)\n            self.redraw_rect()\n            self.zoommode = False\n            self.zoomButton.deselect()\n        else:\n            self.drawrect(r)\n            self.crop_rects.append(ra)\n            self.n = self.n + 1\n\n    def zoom_mode(self):\n        if self.zoommode:\n            self.zoommode = False\n        else:\n            self.zoommode = True\n\n    def unzoom_image(self):\n        self.canvas.delete(Tkinter.ALL)\n        self.zoommode = False\n        self.zoomButton.deselect()\n        self.x0 = 0\n        self.y0 = 0\n        self.image_thumb = self.image.copy()\n        self.image_thumb.thumbnail(thumbsize)\n        self.image_thumb_rect = Rect(self.image_thumb.size)\n        self.image_thumb_rect.set_thumboffset(int(self.config[\'thumb-offset\']))\n        self.displayimage()\n        x_scale = float(self.image_rect.w) / self.image_thumb_rect.w\n        y_scale = float(self.image_rect.h) / self.image_thumb_rect.h\n        self.scale = (x_scale, y_scale)\n        self.redraw_rect()\n\n    def plus_box(self):\n        if self.n > 1:\n            self.canvas.delete(Tkinter.ALL)\n            if self.crop_rects:\n                ra = self.crop_rects[self.n - 1]\n                self.crop_rects.pop()\n                self.n = self.n - 1\n                ra0 = self.crop_rects[self.n - 1]\n                ra0 = ra0.plus_rect(ra)\n                self.crop_rects[self.n - 1] = ra0\n                self.displayimage()\n                self.redraw_rect()\n                self.zoommode = False\n                self.zoomButton.deselect()\n\n    def redraw_rect(self):\n        for croparea in self.crop_rects:\n            self.drawrect(croparea.rescale_rect(self.scale, self.x0, self.y0))\n\n    def undo_last(self):\n        if self.canvas_rects:\n            r = self.canvas_rects.pop()\n            self.canvas.delete(r)\n\n        if self.crop_rects:\n            self.crop_rects.pop()\n\n    def drawrect(self, rect):\n        bbox = (rect.left, rect.top, rect.right, rect.bottom)\n        cr = self.canvas.create_rectangle(\n            bbox, activefill=\'\', fill=\'yellow\', stipple=self.config[\'stipple\'])\n        self.canvas_rects.append(cr)\n\n    def reset(self):\n        self.canvas.delete(Tkinter.ALL)\n        self.zoommode = False\n        self.zoomButton.deselect()\n        self.canvas_rects = []\n        self.crop_rects = []\n        self.displayimage()\n        \n    def displayimage(self):\n        self.photoimage = ImageTk.PhotoImage(self.image_thumb)\n        w, h = self.image_thumb.size\n        self.canvas.delete("all") # Remove remnants of previous crop area\n        \n        self.canvas.create_image(\n            int(self.config[\'thumb-offset\']),\n            int(self.config[\'thumb-offset\']),\n            anchor=Tkinter.NW,\n            image=self.photoimage)\n\n    def loadimage(self):\n        self.image = Image.open(self.filename)\n        self.textStatus.set("{0} {1}".format(os.path.basename(self.filename), self.image.size))\n        self.image_rect = Rect(self.image.size)\n        self.image_rect.set_thumboffset(int(self.config[\'thumb-offset\']))\n        self.w = self.image_rect.w\n        self.h = self.image_rect.h\n        # TODO: needed? borderwidth = self.canvas.config()[\'borderwidth\'][4]\n        \n        self.image_thumb = self.image.copy()\n        self.image_thumb.thumbnail(\n            [ self.canvas.winfo_width() - int(self.config[\'thumb-offset\']),\n              self.canvas.winfo_height() - int(self.config[\'thumb-offset\']) ]\n        )\n        self.image_thumb_rect = Rect(self.image_thumb.size)\n        self.image_thumb_rect.set_thumboffset(int(self.config[\'thumb-offset\']))\n\n        self.displayimage()\n        x_scale = float(self.image_rect.w) / self.image_thumb_rect.w\n        y_scale = float(self.image_rect.h) / self.image_thumb_rect.h\n        self.scale = (x_scale, y_scale)\n\n    def newfilename(self, filenum):\n        f, e = os.path.splitext(self.filename)\n        return \'%s_crop_%s%s\' % (f, filenum, e)\n\n    def start_cropping(self):\n        cropcount = 0\n        status = "{0} cropped: ".format(self.lbFiles.get(Tkinter.ACTIVE))\n        for croparea in self.crop_rects:\n            cropcount += 1\n            filename = self.newfilename(cropcount)\n            _, tail = os.path.split(filename) # Remove input directory\n            self.crop(croparea, tail)\n            status += "{0}:{1} ".format(cropcount, croparea)\n        self.textStatus.set(status.strip())\n\n    def crop(self, croparea, filename):\n        ca = (croparea.left, croparea.top, croparea.right, croparea.bottom)\n        newimg = self.image.crop(ca)\n        imagePath = os.path.join(self.config[\'output-directory\'], filename)\n        newimg.save(imagePath)\n        \n    def load_image_list(self):\n        if self.config is not None:\n            self.lbFiles.delete(0, Tkinter.END)\n            suffixtuple = tuple(re.split(self.delimiters, self.config[\'image-extensions\']))\n            for item in sorted(os.listdir(self.config[\'input-directory\'])):\n                if os.path.isfile(os.path.join(self.config[\'input-directory\'], item)):\n                    if item.lower().endswith(suffixtuple): # The arg can be a tuple of suffixes to look for\n                        self.lbFiles.insert(Tkinter.END, item)\n            self.update_idletasks()\n            # If there are items in listbox, select the 1st one\n            if self.lbFiles.size() > 0:\n                self.lbFiles.select_set(0)\n                self.load_lbFiles_image(self.lbFiles.get(Tkinter.ACTIVE))\n                self.canvas.focus_set()\n\n\nclass CreateToolTip(object):\n    """\n    create a tooltip for a given widget\n    """\n    def __init__(self, widget, text=\'widget info\'):\n        self.waittime = 500     #miliseconds\n        self.wraplength = 180   #pixels\n        self.widget = widget\n        self.text = text\n        self.widget.bind("<Enter>", self.enter)\n        self.widget.bind("<Leave>", self.leave)\n        self.widget.bind("<ButtonPress>", self.leave)\n        self.id = None\n        self.tw = None\n\n    def enter(self, event=None):\n        self.schedule()\n\n    def leave(self, event=None):\n        self.unschedule()\n        self.hidetip()\n\n    def schedule(self):\n        self.unschedule()\n        self.id = self.widget.after(self.waittime, self.showtip)\n\n    def unschedule(self):\n        id = self.id\n        self.id = None\n        if id:\n            self.widget.after_cancel(id)\n\n    def showtip(self, event=None):\n        x = y = 0\n        x, y, cx, cy = self.widget.bbox("insert")\n        x += self.widget.winfo_rootx() + 25\n        y += self.widget.winfo_rooty() + 20\n        # creates a toplevel window\n        self.tw = Tkinter.Toplevel(self.widget)\n        # Leaves only the label and removes the app window\n        self.tw.wm_overrideredirect(True)\n        self.tw.wm_geometry("+%d+%d" % (x, y))\n        label = Tkinter.Label(self.tw, text=self.text, justify=\'left\',\n            background="#fef9e7", relief=\'solid\', borderwidth=1,\n            wraplength = self.wraplength)\n        label.pack(ipadx=1)\n\n    def hidetip(self):\n        tw = self.tw\n        self.tw= None\n        if tw:\n            tw.destroy()\n            \nclass Rect(object):\n    def __init__(self, *args):\n        self.set_points(*args)\n        self.thumboffset = 0\n\n    def set_points(self, *args):\n        if len(args) == 2:\n            pt1 = args[0]\n            pt2 = args[1]\n        elif len(args) == 1:\n            pt1 = (0, 0)\n            pt2 = args[0]\n        elif len(args) == 0:\n            pt1 = (0, 0)\n            pt2 = (0, 0)\n\n        x1, y1 = pt1\n        x2, y2 = pt2\n\n        self.left = min(x1, x2)\n        self.top = min(y1, y2)\n        self.right = max(x1, x2)\n        self.bottom = max(y1, y2)\n\n        self._update_dims()\n\n    def clip_to(self, containing_rect):\n        cr = containing_rect\n        self.top = max(self.top, cr.top + self.thumboffset)\n        self.bottom = min(self.bottom, cr.bottom + self.thumboffset)\n        self.left = max(self.left, cr.left + self.thumboffset)\n        self.right = min(self.right, cr.right + self.thumboffset)\n        self._update_dims()\n\n    def _update_dims(self):\n        """added to provide w and h dimensions."""\n        self.w = self.right - self.left\n        self.h = self.bottom - self.top\n\n    def scale_rect(self, scale):\n        x_scale = scale[0]\n        y_scale = scale[1]\n\n        r = Rect()\n        r.top = int((self.top - self.thumboffset) * y_scale)\n        r.bottom = int((self.bottom - self.thumboffset) * y_scale)\n        r.right = int((self.right - self.thumboffset) * x_scale)\n        r.left = int((self.left - self.thumboffset) * x_scale)\n        r._update_dims()\n\n        return r\n\n    def move_rect(self, x0, y0):\n        r = Rect()\n        r.top = int(self.top + y0)\n        r.bottom = int(self.bottom + y0)\n        r.right = int(self.right + x0)\n        r.left = int(self.left + x0)\n        r._update_dims()\n        return r\n\n    # Rezire rectangle by certain amount on X- and Y- axis\n    def resize_rect(self, x0, y0):\n        r = Rect()\n        r.top = self.top\n        r.left = self.left\n        r.bottom = int(self.bottom + y0)\n        r.right = int(self.right + x0)\n        # Make sure rectangle does not disappear!\n        if r.bottom - r.top < 10:\n            r.bottom = self.bottom\n        if r.right - r.left < 10:\n            r.right = self.right\n        r._update_dims()\n        return r\n        \n    def rescale_rect(self, scale, x0, y0):\n        x_scale = scale[0]\n        y_scale = scale[1]\n\n        r = Rect()\n        r.top = int((self.top - y0) / y_scale + self.thumboffset)\n        r.bottom = int((self.bottom - y0) / y_scale + self.thumboffset)\n        r.right = int((self.right - x0) / x_scale + self.thumboffset)\n        r.left = int((self.left - x0) / x_scale + self.thumboffset)\n        r._update_dims()\n        return r\n\n    def plus_rect(self, r0):\n        r = Rect()\n        r.top = min(self.top, r0.top)\n        r.bottom = max(self.bottom, r0.bottom)\n        r.right = max(self.right, r0.right)\n        r.left = min(self.left, r0.left)\n        r._update_dims()\n        return r\n\n    def valid_rect(self, w, h):\n        r = Rect()\n        r.top = self.top\n        if r.top < 0:\n            r.top = 0\n        if r.top > h - 1:\n            r.top = h - 1\n        r.bottom = self.bottom\n        if r.bottom < 1:\n            r.bottom = 1\n        if r.bottom > h:\n            r.bottom = h\n        r.right = self.right\n        if r.right < 1:\n            r.right = 1\n        if r.right > w:\n            r.right = w\n        r.left = self.left\n        if r.left < 0:\n            r.left = 0\n        if r.left > w - 1:\n            r.left = w - 1\n        r._update_dims()\n        return r\n\n    def set_thumboffset(self, thumboffset=0):\n        self.thumboffset = thumboffset\n\n    def __repr__(self):\n        return \'(%d,%d)-(%d,%d)\' % (self.left, self.top, self.right, self.bottom)\n\n# Class that handles configuration\nclass ScanConfig(object):\n\n    def __init__(self, configFile=None, appName=\'PhotoCropper\'):\n        self.section = appName.upper()\n        self.get_default_config()\n        \n        if configFile is None:\n            # Create default configuration in OS-independent "home" directory\n            configPath = os.path.join(os.path.expanduser(\'~\'), \'.config\', appName.lower())\n            if not os.path.exists(configPath):\n                os.makedirs(configPath)\n            self.configFile = os.path.join(configPath, \'config.ini\')\n            self.config = confpars.SafeConfigParser(self.get_default_config())\n            if os.path.exists(self.configFile):\n                self.config.read(self.configFile)\n            else:\n                self.config.add_section(self.section)\n        elif os.path.exists(configFile):\n            self.configFile = os.path.normpath(configFile)\n            self.config = confpars.SafeConfigParser(self.get_default_config())\n            self.config.read(self.configFile)\n        else:\n            # Path given, but does not exist\n            raise Exception("Configuration file \'{0}\' does not exist".format(configFile))\n    \n    # Gets default configuration\n    def get_default_config(self):\n        return {\n            \'geometry\'         : \'1024x768+10+10\', # Position and size of main window\n            \'input-directory\'  : os.path.expanduser(\'~\'), # Directory with pictures to process\n            \'output-directory\' : os.path.expanduser(\'~\'), # Directory to write resulting pictures into\n            \'image-extensions\' : \'tif tiff jpg jpeg gif png\', # Extensions of files considered to be pictures\n            \'thumb-offset\'     : \'4\', # Thumbnail offset\n            \'stipple\'          : \'gray12\', # Stipple pattern\n            \'move-step\'        : \'10\', # Amount of pixels to move rectangle in all directions\n            \'resize-step\'      : \'10\' # Amount of pixels to resize rectangle\n        }\n\n    def __getitem__(self, key):\n        return self.config.get(self.section, key)\n\n    def __setitem__(self, key, value):\n        self.config.set(self.section, key, value)\n\n    def save(self):\n        with open(self.configFile, \'w\') as cf:\n            self.config.write(cf)'
p134
asg7
I0
sg46
I5529215
ssg29
(lp135
(dp136
S'ModuleName'
p137
S'Tkinter'
p138
sg51
g52
sS'WidgetName'
p139
S'Frame'
p140
sS'PackOptions'
p141
(lp142
sg24
(I0
tp143
sS'XY'
p144
(I0
I0
tp145
sS'Bindings'
p146
(lp147
(dp148
S'Handler'
p149
S'on_PhotoCropper_Config'
p150
sS'Component'
p151
S''
sS'Event'
p152
S'<Configure>'
p153
sasS'Options'
p154
(lp155
(dp156
g51
S'borderwidth'
p157
sS'Value'
p158
S'n:5'
p159
sS'Extra'
p160
Nsa(dp161
g51
S'width'
p162
sg158
S'n:1'
p163
sg160
Nsa(dp164
g51
S'height'
p165
sg158
S'n:1'
p166
sg160
Nsasa(dp167
g137
S'Tkinter'
p168
sg51
S'btnSettings'
p169
sg139
S'Button'
p170
sg141
(lp171
(dp172
g51
S'anchor'
p173
sg158
S'sw'
p174
sa(dp175
g51
S'expand'
p176
sg158
S'yes'
p177
sa(dp178
g51
S'fill'
p179
sg158
S'x'
sasg24
Nsg144
(lp180
I2610
aI9332
asg146
(lp181
(dp182
g149
S'on_btnSettings_ButRel_1'
p183
sg151
S''
sg152
S'<ButtonRelease-1>'
p184
sasg154
(lp185
(dp186
g51
S'text'
p187
sg158
S'Settings ...'
p188
sg160
Nsasa(dp189
g137
S'Tkinter'
p190
sg51
S'canvas'
p191
sg139
S'Canvas'
p192
sg141
(lp193
(dp194
g51
g173
sg158
S'nw'
p195
sa(dp196
g51
g176
sg158
S'yes'
p197
sa(dp198
g51
g179
sg158
S'both'
p199
sasg24
Nsg144
(lp200
I5113
aI5331
asg146
(lp201
(dp202
g149
S'canvas_mouseb1move_callback'
p203
sg151
S''
sg152
S'<B1-Motion>'
p204
sa(dp205
g149
S'canvas_mouse1_callback'
p206
sg151
S''
sg152
S'<Button-1>'
p207
sa(dp208
g149
S'canvas_mouseup1_callback'
p209
sg151
S''
sg152
S'<ButtonRelease-1>'
p210
sa(dp211
g149
S'canvas_ArrowDown'
p212
sg151
S''
sg152
S'<KeyRelease-Down>'
p213
sa(dp214
g149
S'canvas_ArrowDown_Control'
p215
sg151
S''
sg152
S'<Control-KeyRelease-Down>'
p216
sa(dp217
g149
S'canvas_ArrowDown_Shift'
p218
sg151
S''
sg152
S'<Shift-KeyRelease-Down>'
p219
sa(dp220
g149
S'canvas_KP_Add'
p221
sg151
S''
sg152
S'<KeyRelease-KP_Add>'
p222
sa(dp223
g149
S'canvas_ArrowDown_KP'
p224
sg151
S''
sg152
S'<KeyRelease-KP_Down>'
p225
sa(dp226
g149
S'canvas_KP_Enter'
p227
sg151
S''
sg152
S'<KeyRelease-KP_Enter>'
p228
sa(dp229
g149
S'canvas_ArrowLeft_KP'
p230
sg151
S''
sg152
S'<KeyRelease-KP_Left>'
p231
sa(dp232
g149
S'canvas_KP_PageDown'
p233
sg151
S''
sg152
S'<KeyRelease-KP_Next>'
p234
sa(dp235
g149
S'canvas_KP_PageUp'
p236
sg151
S''
sg152
S'<KeyRelease-KP_Prior>'
p237
sa(dp238
g149
S'canvas_ArrowRight_KP'
p239
sg151
S''
sg152
S'<KeyRelease-KP_Right>'
p240
sa(dp241
g149
S'canvas_KP_Subtract'
p242
sg151
S''
sg152
S'<KeyRelease-KP_Subtract>'
p243
sa(dp244
g149
S'canvas_ArrowUp_KP'
p245
sg151
S''
sg152
S'<KeyRelease-KP_Up>'
p246
sa(dp247
g149
S'canvas_ArrowLeft'
p248
sg151
S''
sg152
S'<KeyRelease-Left>'
p249
sa(dp250
g149
S'canvas_ArrowLeft_Control'
p251
sg151
S''
sg152
S'<Control-KeyRelease-Left>'
p252
sa(dp253
g149
S'canvas_ArrowLeft_Shift'
p254
sg151
S''
sg152
S'<Shift-KeyRelease-Left>'
p255
sa(dp256
g149
S'canvas_PageDown'
p257
sg151
S''
sg152
S'<KeyRelease-Next>'
p258
sa(dp259
g149
S'canvas_PageUp'
p260
sg151
S''
sg152
S'<KeyRelease-Prior>'
p261
sa(dp262
g149
S'canvas_Return'
p263
sg151
S''
sg152
S'<KeyRelease-Return>'
p264
sa(dp265
g149
S'canvas_ArrowRight'
p266
sg151
S''
sg152
S'<KeyRelease-Right>'
p267
sa(dp268
g149
S'canvas_ArrowRight_Control'
p269
sg151
S''
sg152
S'<Control-KeyRelease-Right>'
p270
sa(dp271
g149
S'canvas_ArrowRight_Shift'
p272
sg151
S''
sg152
S'<Shift-KeyRelease-Right>'
p273
sa(dp274
g149
S'canvas_ArrowUp'
p275
sg151
S''
sg152
S'<KeyRelease-Up>'
p276
sa(dp277
g149
S'canvas_ArrowUp_Control'
p278
sg151
S''
sg152
S'<Control-KeyRelease-Up>'
p279
sa(dp280
g149
S'canvas_ArrowUp_Shift'
p281
sg151
S''
sg152
S'<Shift-KeyRelease-Up>'
p282
sa(dp283
g149
S'canvas_SPACE'
p284
sg151
S''
sg152
S'<KeyRelease-space>'
p285
sasg154
(lp286
(dp287
g51
S'highlightthickness'
p288
sg158
S'n:3'
p289
sg160
Nsa(dp290
g51
S'borderwidth'
p291
sg158
S'n:1'
p292
sg160
Nsa(dp293
g51
S'highlightcolor'
p294
sg158
S'c:darkred'
p295
sg160
Nsa(dp296
g51
S'takefocus'
p297
sg158
I1
sg160
Nsasa(dp298
g137
S'Tkinter'
p299
sg51
S'frameButtons'
p300
sg139
S'Frame'
p301
sg141
(lp302
(dp303
g51
g173
sg158
S'nw'
p304
sa(dp305
g51
g179
sg158
S'x'
sasg24
(I0
I1
I1
tp306
sg144
g145
sg146
(lp307
sg154
(lp308
(dp309
g51
g157
sg158
S'n:1'
p310
sg160
Nsa(dp311
g51
g165
sg158
S'n:1'
p312
sg160
Nsasa(dp313
g137
S'Tkinter'
p314
sg51
S'frameFiles'
p315
sg139
S'Frame'
p316
sg141
(lp317
(dp318
g51
g173
sg158
g195
sa(dp319
g51
g179
sg158
S'y'
sasg24
(I0
I0
tp320
sg144
g145
sg146
(lp321
sg154
(lp322
sa(dp323
g137
g314
sg51
S'frameMain'
p324
sg139
g316
sg141
(lp325
(dp326
g51
g176
sg158
S'yes'
p327
sa(dp328
g51
g179
sg158
S'both'
p329
sasg24
(I0
I1
tp330
sg144
g145
sg146
(lp331
sg154
(lp332
(dp333
g51
g157
sg158
S'n:1'
p334
sg160
Nsasa(dp335
g137
g299
sg51
S'framePicture'
p336
sg139
g301
sg141
(lp337
(dp338
g51
g173
sg158
g195
sa(dp339
g51
g176
sg158
g327
sa(dp340
g51
g179
sg158
g329
sasg24
(I0
I1
I0
tp341
sg144
g145
sg146
(lp342
sg154
(lp343
(dp344
g51
g157
sg158
S'n:1'
p345
sg160
Nsa(dp346
g51
S'relief'
p347
sg158
S'raised'
p348
sg160
Nsasa(dp349
g137
S'Tkinter'
p350
sg51
S'frmStatus'
p351
sg139
S'Frame'
p352
sg141
(lp353
(dp354
g51
g173
sg158
S'nw'
p355
sa(dp356
g51
g179
sg158
S'y'
sasg24
(I0
I1
I2
tp357
sg144
g145
sg146
(lp358
sg154
(lp359
sa(dp360
g137
S'Tkinter'
p361
sg51
S'goButton'
p362
sg139
S'Button'
p363
sg141
(lp364
(dp365
g51
g173
sg158
S'sw'
p366
sa(dp367
g51
g176
sg158
g327
sa(dp368
g51
g179
sg158
S'x'
sasg24
Nsg144
(lp369
I6607
aI9332
asg146
(lp370
sg154
(lp371
(dp372
g51
g187
sg158
S'Crops'
p373
sg160
Nsa(dp374
g51
S'activebackground'
p375
sg158
S'c:#0F0'
p376
sg160
Nsa(dp377
g51
S'command'
p378
sg158
S'start_cropping'
p379
sg160
I0
sasa(dp380
g137
g190
sg51
S'lbFiles'
p381
sg139
S'Listbox'
p382
sg141
(lp383
(dp384
g51
g173
sg158
g195
sa(dp385
g51
g179
sg158
S'y'
sasg24
Nsg144
(lp386
I1219
aI7964
asg146
(lp387
(dp388
g149
S'on_lbFiles_mouseClick_1'
p389
sg151
S''
sg152
S'<ButtonRelease-1>'
p390
sasg154
(lp391
(dp392
g51
S'takefocus'
p393
sg158
I1
sg160
Nsa(dp394
g51
S'yscrollcommand'
p395
sg158
S'sbFiles.set'
p396
sg160
I0
sasa(dp397
g137
g168
sg51
S'lblStatus'
p398
sg139
S'Label'
p399
sg141
(lp400
(dp401
g51
g173
sg158
g174
sa(dp402
g51
g176
sg158
S'yes'
p403
sa(dp404
g51
g179
sg158
S'y'
sasg24
Nsg144
(lp405
I4408
aI9790
asg146
(lp406
sg154
(lp407
(dp408
g51
S'text'
p409
sg158
S'This is label'
p410
sg160
Nsa(dp411
g51
S'textvariable'
p412
sg158
S'textStatus'
p413
sg160
S's.as'
p414
sa(dp415
g51
S'relief'
p416
sg158
S'sunken'
p417
sg160
Nsasa(dp418
g137
g361
sg51
S'plusButton'
p419
sg139
g363
sg141
(lp420
(dp421
g51
g173
sg158
g366
sa(dp422
g51
g176
sg158
g327
sa(dp423
g51
g179
sg158
S'x'
sasg24
Nsg144
(lp424
I5602
aI9332
asg146
(lp425
sg154
(lp426
(dp427
g51
g187
sg158
S'+'
sg160
Nsa(dp428
g51
g378
sg158
S'plus_box'
p429
sg160
I0
sasa(dp430
g137
g361
sg51
S'quitButton'
p431
sg139
g363
sg141
(lp432
(dp433
g51
g173
sg158
g366
sa(dp434
g51
g176
sg158
g327
sa(dp435
g51
g179
sg158
S'x'
sasg24
Nsg144
(lp436
I7377
aI9332
asg146
(lp437
(dp438
g149
S'on_quitButton_ButRel_1'
p439
sg151
S''
sg152
S'<ButtonRelease-1>'
p440
sasg154
(lp441
(dp442
g51
g187
sg158
S'Quit'
p443
sg160
Nsa(dp444
g51
g375
sg158
S'c:#F00'
p445
sg160
Nsa(dp446
g51
g378
sg158
S'quit'
p447
sg160
I0
sasa(dp448
g137
g361
sg51
S'resetButton'
p449
sg139
g363
sg141
(lp450
(dp451
g51
g173
sg158
g366
sa(dp452
g51
g176
sg158
g327
sa(dp453
g51
g179
sg158
S'x'
sasg24
Nsg144
(lp454
I3173
aI9332
asg146
(lp455
sg154
(lp456
(dp457
g51
g187
sg158
S'Reset'
p458
sg160
Nsa(dp459
g51
g375
sg158
S'c:#F00'
p460
sg160
Nsa(dp461
g51
g378
sg158
S'reset'
p462
sg160
I0
sasa(dp463
g137
g190
sg51
S'sbFiles'
p464
sg139
S'Scrollbar'
p465
sg141
(lp466
(dp467
g51
g173
sg158
g195
sa(dp468
g51
g179
sg158
S'y'
sasg24
Nsg144
(lp469
I1843
aI7964
asg146
(lp470
sg154
(lp471
sa(dp472
g137
g361
sg51
S'undoButton'
p473
sg139
g363
sg141
(lp474
(dp475
g51
g173
sg158
g366
sa(dp476
g51
g176
sg158
g327
sa(dp477
g51
g179
sg158
S'x'
sasg24
Nsg144
(lp478
I3794
aI9332
asg146
(lp479
sg154
(lp480
(dp481
g51
g187
sg158
S'Undo'
p482
sg160
Nsa(dp483
g51
g375
sg158
S'c:#FF0'
p484
sg160
Nsa(dp485
g51
g378
sg158
S'undo_last'
p486
sg160
I0
sasa(dp487
g137
g361
sg51
S'unzoomButton'
p488
sg139
g363
sg141
(lp489
(dp490
g51
g173
sg158
g366
sa(dp491
g51
g176
sg158
g327
sa(dp492
g51
g179
sg158
S'x'
sasg24
Nsg144
(lp493
I4897
aI9327
asg146
(lp494
sg154
(lp495
(dp496
g51
g187
sg158
S'<-|->'
p497
sg160
Nsa(dp498
g51
g375
sg158
S'c:#00F'
p499
sg160
Nsa(dp500
g51
g378
sg158
S'unzoom_image'
p501
sg160
I0
sasa(dp502
g137
g361
sg51
S'zoomButton'
p503
sg139
S'Checkbutton'
p504
sg141
(lp505
(dp506
g51
g173
sg158
g366
sa(dp507
g51
g176
sg158
g327
sa(dp508
g51
g179
sg158
S'x'
sasg24
Nsg144
(lp509
I4175
aI9332
asg146
(lp510
sg154
(lp511
(dp512
g51
S'text'
p513
sg158
S'Zoom'
p514
sg160
Nsa(dp515
g51
S'command'
p516
sg158
S'zoom_mode'
p517
sg160
I0
sasasS'BaseClass'
p518
g55
sg34
I1
sa(dp519
g50
S'Gui'
p520
sg51
g33
sg28
Nsg54
S'Tkinter.Frame'
p521
sg56
(lp522
(lp523
I5000
aI1545
aI0
aasg39
(dp524
g37
S'27.0'
p525
sg39
(lp526
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                 Preferences                                  #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass Preferences(Tkinter.Frame):\n    def __init__(self,Master=None,*pos,**kw):\n'
p527
aS'        #\n        #Your code here\n        #\n'
p528
aS"\n        apply(Tkinter.Frame.__init__,(self,Master),kw)\n        self._Frame2 = Tkinter.Frame(self)\n        self._Frame2.pack(side='top')\n        self._Frame1 = Tkinter.Frame(self)\n        self._Frame1.pack(side='top')\n"
p529
aS'        #\n        #Your code here\n        #\n'
p530
aS'    #\n    #Start of event handler methods\n    #\n'
p531
aS'\n'
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p532
aS''
asg7
I0
sg46
I12881023
ssg29
(lp533
(dp534
g137
S'Tkinter'
p535
sg51
g33
sg139
S'Frame'
p536
sg141
(lp537
sg24
g143
sg144
g145
sg146
(lp538
sg154
(lp539
sa(dp540
g137
S'Tkinter'
p541
sg51
S'_Frame1'
p542
sg139
S'Frame'
p543
sg141
(lp544
sg24
(I0
I1
tp545
sg144
g145
sg146
(lp546
sg154
(lp547
sa(dp548
g137
g541
sg51
S'_Frame2'
p549
sg139
g543
sg141
(lp550
sg24
(I0
I0
tp551
sg144
g145
sg146
(lp552
sg154
(lp553
sasg518
g521
sg34
I1
sasS'VisibleForm'
p554
g52
sS'SelectedForm'
p555
g52
sg51
g6
sa.