(lp1
(dp2
S'ModulePrevious'
p3
S'scancropper'
p4
sS'ModuleCurrent'
p5
S'ScanCropper'
p6
sS'Version'
p7
I1
sS'Geometry'
p8
S'3834x2065+3+28'
p9
sS'ProjectName'
p10
g6
sS'ImportTypes'
p11
(lp12
(S'Pmw'
p13
S'import'
p14
tp15
a(S'Tkinter'
p16
S'import'
p17
tp18
asS'EditorWidths'
p19
((lp20
I411
aI324
a(lp21
I378
aI357
a(lp22
I369
aI366
atp23
sS'ID'
p24
S'Rapyd Project'
p25
sS'ParkingLot'
p26
(dp27
S'SelectedWidreq'
p28
NsS'Widreqs'
p29
(lp30
ssa(dp31
S'PreviousForm'
p32
S'-Main-'
p33
sS'OnTab'
p34
I1
sg33
(dp35
S'Cursor'
p36
S'40.54'
p37
sS'Text'
p38
(lp39
S''
aS'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n'
p40
aS'import rpErrorHandler\nimport Tkinter\n'
p41
aS'\ndef window_close():\n    Root.destroy()\n\ntry:\n    #--------------------------------------------------------------------------#\n    # User code should go after this comment so it is inside the "try".        #\n    #     This allows rpErrorHandler to gain control on an error so it         #\n    #     can properly display a Rapyd-aware error message.                    #\n    #--------------------------------------------------------------------------#\n\n    #Adjust sys.path so we can find other modules of this project\n    import sys\n    if \'.\' not in sys.path:\n        sys.path.append(\'.\')\n    #Put lines to import other modules of this project here\n    import argparse    \n    import tkFileDialog\n    import os\n    import re\n    try:\n        # for Python2\n        import ConfigParser as confpars\n    except ImportError:\n        # for Python3\n        import configparser as confpars\n    #\n    from PIL import Image, ImageTk\n    tk = Tkinter\n \n    if __name__ == \'__main__\':\n        # Parse arguments\n        parser = argparse.ArgumentParser(description=\'Picture cropper\')\n        parser.add_argument(\'-c\', \'--config\', \'--config-file\', dest=\'configFile\', default=None, help=\'Configuration file path\')\n        parser.add_argument(\'-d\', \'--debug\', default=0, help=\'Debug level\')\n        args = parser.parse_args()\n\n        # Load configuration\n        conf = ScanConfig(args.configFile)\n'
p42
aS"        Root = Tkinter.Tk()\n        Tkinter.CallWrapper = rpErrorHandler.CallWrapper\n        App = ScanCropper(Root)\n        App.pack(expand='yes',fill='both')\n"
p43
aS'        # Set window\n        Root.geometry(conf[\'geometry\'])\n        # Allow closing windows by clicking "X"\n        Root.protocol("WM_DELETE_WINDOW", window_close)\n        Root.title(\'Scan Cropper\')\n        App.config = conf\n        App.load_image_list()\n        Root.mainloop()\n    #--------------------------------------------------------------------------#\n    # User code should go above this comment.                                  #\n    #--------------------------------------------------------------------------#\nexcept:\n    rpErrorHandler.RunError()'
p44
asg7
I0
sS'Sha'
p45
I7072127
ssS'Forms'
p46
(lp47
(dp48
S'Requested'
p49
g38
sS'Name'
p50
S'Preferences'
p51
sg28
g51
sS'Type'
p52
S'Tkinter.Frame'
p53
sS'Lines'
p54
(lp55
sg38
(dp56
g36
S'24.0'
p57
sg38
(lp58
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                 Preferences                                  #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass Preferences(Tkinter.Frame):\n    def __init__(self,Master=None,*pos,**kw):\n'
p59
aS'        #\n        #Your code here\n        #\n'
p60
aS'\n        apply(Tkinter.Frame.__init__,(self,Master),kw)\n\n'
p61
aS'        #\n        #Your code here\n        #\n'
p62
aS'    #\n    #Start of event handler methods\n    #\n'
p63
aS'\n'
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p64
aS''
asg7
I0
sg45
I9763455
ssg29
(lp65
(dp66
S'ModuleName'
p67
S'Tkinter'
p68
sg50
g51
sS'WidgetName'
p69
S'Frame'
p70
sS'PackOptions'
p71
(lp72
sg24
(I0
tp73
sS'XY'
p74
(I0
I0
tp75
sS'Bindings'
p76
(lp77
sS'Options'
p78
(lp79
sasS'BaseClass'
p80
g53
sg34
I1
sa(dp81
g49
g38
sg50
S'ScanCropper'
p82
sg28
S'canvas'
p83
sg52
S'Tkinter.Frame'
p84
sg54
(lp85
(lp86
I2416
aI5000
aI1
aa(lp87
I6206
aI7908
aI0
aasg38
(dp88
g36
S'358.39'
p89
sg38
(lp90
S"#------------------------------------------------------------------------------#\n#                                                                              #\n#                                 ScanCropper                                  #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass ScanCropper(Tkinter.Frame):\n    def __init__(self,Master=None,*pos,**kw):\n        kw['borderwidth'] = '5'\n        kw['height'] = '1'\n        kw['width'] = '1'\n"
p91
aS'        #\n        #Your code here\n        #\n'
p92
aS"\n        apply(Tkinter.Frame.__init__,(self,Master),kw)\n        self.bind('<Configure>',self.on_ScanCropper_Config)\n        self.frameFiles = Tkinter.Frame(self)\n        self.frameFiles.pack(anchor='nw',fill='y',side='left')\n        self.sbFiles = Tkinter.Scrollbar(self.frameFiles)\n        self.sbFiles.pack(anchor='nw',fill='y',side='right')\n        self.lbFiles = Tkinter.Listbox(self.frameFiles,takefocus=1)\n        self.lbFiles.pack(anchor='nw',fill='y',side='right')\n        self.lbFiles.bind('<ButtonRelease-1>',self.on_lbFiles_mouseClick_1)\n        self.frameMain = Tkinter.Frame(self,borderwidth='1')\n        self.frameMain.pack(expand='yes',fill='both',side='left')\n        self.framePicture = Tkinter.Frame(self.frameMain,borderwidth='1'\n            ,relief='raised')\n        self.framePicture.pack(anchor='nw',expand='yes',fill='both',side='top')\n        self.canvas = Tkinter.Canvas(self.framePicture,borderwidth='1'\n            ,takefocus=1)\n        self.canvas.pack(anchor='nw',expand='yes',fill='both',side='bottom')\n        self.canvas.bind('<B1-Motion>',self.canvas_mouseb1move_callback)\n        self.canvas.bind('<Button-1>',self.canvas_mouse1_callback)\n        self.canvas.bind('<ButtonRelease-1>',self.canvas_mouseup1_callback)\n        self.canvas.bind('<KeyRelease-Down>',self.canvas_KeyRel_ArrowDown)\n        self.canvas.bind('<KeyRelease-KP_Next>' \\\n            ,self.on_canvas_KeyRel_KeyPad_PageDown)\n        self.canvas.bind('<KeyRelease-KP_Prior>' \\\n            ,self.on_canvas_KeyRel_KeyPad_PageUp)\n        self.canvas.bind('<KeyRelease-Left>',self.canvas_KeyRel_ArrowLeft)\n        self.canvas.bind('<KeyRelease-Next>',self.on_canvas_KeyRel_PageDown)\n        self.canvas.bind('<KeyRelease-Prior>',self.on_canvas_KeyRel_PageUp)\n        self.canvas.bind('<KeyRelease-Right>',self.canvas_KeyRel_ArrowRight)\n        self.canvas.bind('<KeyRelease-Up>',self.canvas_KeyRel_ArrowUp)\n        self.canvas.bind('<Shift-KeyRelease-Up>' \\\n            ,self.canvas_KeyRel_ArrowUp_Shift)\n        self.canvas.bind('<KeyRelease-space>',self.canvas_KeyRel_space)\n        self.frameButtons = Tkinter.Frame(self.frameMain,borderwidth='1'\n            ,height='1')\n        self.frameButtons.pack(anchor='nw',fill='x',side='top')\n        self.resetButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#F00',command=self.reset,text='Reset')\n        self.resetButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.undoButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#FF0',command=self.undo_last,text='Undo')\n        self.undoButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.zoomButton = Tkinter.Checkbutton(self.frameButtons\n            ,command=self.zoom_mode,text='Zoom')\n        self.zoomButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.unzoomButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#00F',command=self.unzoom_image,text='<-|->')\n        self.unzoomButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.plusButton = Tkinter.Button(self.frameButtons,command=self.plus_box\n            ,text='+')\n        self.plusButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.goButton = Tkinter.Button(self.frameButtons,activebackground='#0F0'\n            ,command=self.start_cropping,text='Crops')\n        self.goButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.quitButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#F00',command=self.quit,text='Quit')\n        self.quitButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n"
p93
aS'        #\n        #Your code here\n        #\n        self.quitButton_ttp = CreateToolTip(self.quitButton, "Exit")\n        self.resetButton_ttp = CreateToolTip(self.resetButton, "Reset all rectangles")\n        self.undoButton_ttp = CreateToolTip(self.undoButton, "Undo last rectangle")\n        self.zoomButton_ttp = CreateToolTip(self.zoomButton, "On/Off Zoom mode")\n        self.unzoomButton_ttp = CreateToolTip(self.unzoomButton, "Unzoom, view all image")\n        self.plusButton_ttp = CreateToolTip(self.plusButton, "Plus box, extent rectangle")\n        self.goButton_ttp = CreateToolTip(self.goButton, "Go, begin cropping")\n        self.croprect_start = None\n        self.croprect_end = None\n        self.crop_count = 0\n        self.canvas_rects = []\n        self.crop_rects = []\n        self.current_rect = None\n        self.zoommode = False\n        self.w = 1\n        self.h = 1\n        self.x0 = 0\n        self.y0 = 0\n        self.n = 0\n        self.config = None\n        self.delimiters = \' |,|\\t|#|\\|\'\n        self._after_id = None\n        self.filename = None\n        self.lbIndex = None # Keeps item index in listbox\n'
p94
aS'    #\n    #Start of event handler methods\n    #\n'
p95
aS'\n'
aS'\n    def canvas_KeyRel_ArrowDown(self'
p96
aS', event=None):\n        print("Pressed Canvas Arrow Down")\n'
p97
aS'\n    def canvas_KeyRel_ArrowLeft(self'
p98
aS', event=None):\n        print("Pressed Canvas Arrow Left")\n'
p99
aS'\n    def canvas_KeyRel_ArrowRight(self'
p100
aS", event=None):\n        print('Pressed Canvas Arrow Right')\n"
p101
aS'\n    def canvas_KeyRel_ArrowUp(self'
p102
aS", event=None):\n        print('Pressed Canvas Arrow Up')\n"
p103
aS'\n    def canvas_KeyRel_ArrowUp_Shift(self'
p104
aS", event=None):\n        # Shift + ArrowUp\n        print('Pressed Canvas Shift Arrow Up')\n"
p105
aS'\n    def canvas_KeyRel_space(self'
p106
aS", event=None):\n        print('Pressed Canvas SPACE')\n"
p107
aS'\n    def canvas_mouse1_callback(self'
p108
aS', event=None):\n        self.croprect_start = (event.x, event.y)\n'
p109
aS'\n    def canvas_mouseb1move_callback(self'
p110
aS', event=None):\n        if self.current_rect:\n            self.canvas.delete(self.current_rect)\n        x1 = self.croprect_start[0]\n        y1 = self.croprect_start[1]\n        x2 = event.x\n        y2 = event.y\n        bbox = (x1, y1, x2, y2)\n        cr = self.canvas.create_rectangle(bbox)\n        self.current_rect = cr\n'
p111
aS'\n    def canvas_mouseup1_callback(self'
p112
aS', event=None):\n        self.croprect_end = (event.x, event.y)\n        self.set_crop_area()\n        self.canvas.delete(self.current_rect)\n        self.current_rect = None\n'
p113
aS'\n    def on_ScanCropper_Config(self'
p114
aS', event=None):\n        if self._after_id:\n            self.after_cancel(self._after_id)\n        self._after_id = self.after(1200, self.draw_after_resize)\n'
p115
aS'\n    def on_canvas_KeyRel_KeyPad_PageDown(self'
p116
aS',Event=None):\n        self.pressPage(self.PAGE_DOWN)\n'
p117
aS'\n    def on_canvas_KeyRel_KeyPad_PageUp(self'
p118
aS',Event=None):\n        self.pressPage(self.PAGE_UP)\n'
p119
aS'\n    def on_canvas_KeyRel_PageDown(self'
p120
aS', event=None):\n        self.pressPage(self.PAGE_DOWN)\n'
p121
aS'\n    def on_canvas_KeyRel_PageUp(self'
p122
aS', event=None):\n        self.pressPage(self.PAGE_UP)\n'
p123
aS'\n    def on_lbFiles_mouseClick_1(self'
p124
aS', event=None):\n        self.lbIndex = self.lbFiles.curselection()[0]\n        self.load_lbFiles_image(self.lbFiles.get(tk.ACTIVE))\n'
p125
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p126
aS'    \n    PAGE_UP = -1\n    PAGE_DOWN = 1\n    \n    def pressPage(self, direction=0):\n        index = self.lbFiles.curselection()[0] + direction\n        self.lbFiles.selection_clear(0, tk.END)\n        self.lbSelect(index)\n\n    # Programmatically select image in a listbox\n    def lbSelect(self, index):\n        if index < 0:\n            index = 0\n        elif index == self.lbFiles.size():\n            index = self.lbFiles.size()-1  \n        self.lbFiles.select_set(index)\n        self.lbFiles.activate(index)\n        if index != self.lbIndex:\n            self.load_lbFiles_image(self.lbFiles.get(tk.ACTIVE))\n            self.lbIndex = index\n        \n    def draw_after_resize(self):\n        # Check if there is a selection in file list\n        if self.filename:\n            self.loadimage()\n \n    def load_lbFiles_image(self, imagePath):\n        self.filename = os.path.join(self.config[\'input-directory\'], imagePath)\n        if os.path.exists(self.filename):\n            self.loadimage()\n       \n    def set_crop_area(self):\n        r = Rect(self.croprect_start, self.croprect_end)\n\n        # adjust dimensions\n        r.clip_to(self.image_thumb_rect)\n\n        # ignore rects smaller than this size\n        if min(r.h, r.w) < 10:\n            return\n\n        ra = r\n        ra = ra.scale_rect(self.scale)\n        ra = ra.move_rect(self.x0, self.y0)\n        ra = ra.valid_rect(self.w, self.h)\n        if self.zoommode:\n            self.canvas.delete(tk.ALL)\n            self.x0 = ra.left\n            self.y0 = ra.top\n            za = (ra.left, ra.top, ra.right, ra.bottom)\n            self.image_thumb = self.image.crop(za)\n            self.image_thumb.thumbnail(thumbsize)\n            self.image_thumb_rect = Rect(self.image_thumb.size)\n            self.image_thumb_rect.set_thumboffset(int(self.config[\'thumboffset\']))\n            self.displayimage()\n            x_scale = float(ra.w) / self.image_thumb_rect.w\n            y_scale = float(ra.h) / self.image_thumb_rect.h\n            self.scale = (x_scale, y_scale)\n            self.redraw_rect()\n            self.zoommode = False\n            self.zoomButton.deselect()\n        else:\n            self.drawrect(r)\n            self.crop_rects.append(ra)\n            self.n = self.n + 1\n\n    def zoom_mode(self):\n        if self.zoommode:\n            self.zoommode = False\n        else:\n            self.zoommode = True\n\n    def unzoom_image(self):\n        self.canvas.delete(tk.ALL)\n        self.zoommode = False\n        self.zoomButton.deselect()\n        self.x0 = 0\n        self.y0 = 0\n        self.image_thumb = self.image.copy()\n        self.image_thumb.thumbnail(thumbsize)\n        self.image_thumb_rect = Rect(self.image_thumb.size)\n        self.image_thumb_rect.set_thumboffset(int(self.config[\'thumboffset\']))\n        self.displayimage()\n        x_scale = float(self.image_rect.w) / self.image_thumb_rect.w\n        y_scale = float(self.image_rect.h) / self.image_thumb_rect.h\n        self.scale = (x_scale, y_scale)\n        self.redraw_rect()\n\n    def plus_box(self):\n        if self.n > 1:\n            self.canvas.delete(tk.ALL)\n            if self.crop_rects:\n                ra = self.crop_rects[self.n - 1]\n                self.crop_rects.pop()\n                self.n = self.n - 1\n                ra0 = self.crop_rects[self.n - 1]\n                ra0 = ra0.plus_rect(ra)\n                self.crop_rects[self.n - 1] = ra0\n                self.displayimage()\n                self.redraw_rect()\n                self.zoommode = False\n                self.zoomButton.deselect()\n\n    def redraw_rect(self):\n        for croparea in self.crop_rects:\n            self.drawrect(croparea.rescale_rect(self.scale, self.x0, self.y0))\n\n    def undo_last(self):\n        if self.canvas_rects:\n            r = self.canvas_rects.pop()\n            self.canvas.delete(r)\n\n        if self.crop_rects:\n            self.crop_rects.pop()\n\n    def drawrect(self, rect):\n        bbox = (rect.left, rect.top, rect.right, rect.bottom)\n        cr = self.canvas.create_rectangle(\n            bbox, activefill=\'\', fill=\'red\', stipple=\'gray25\')\n        self.canvas_rects.append(cr)\n\n    def reset(self):\n        self.canvas.delete(tk.ALL)\n        self.zoommode = False\n        self.zoomButton.deselect()\n        self.canvas_rects = []\n        self.crop_rects = []\n        self.displayimage()\n        \n    def displayimage(self):\n        self.photoimage = ImageTk.PhotoImage(self.image_thumb)\n        w, h = self.image_thumb.size\n        \n        self.canvas.create_image(\n            int(self.config[\'thumboffset\']),\n            int(self.config[\'thumboffset\']),\n            anchor=tk.NW,\n            image=self.photoimage)\n\n    def loadimage(self):\n        self.image = Image.open(self.filename)\n        self.image_rect = Rect(self.image.size)\n        self.image_rect.set_thumboffset(int(self.config[\'thumboffset\']))\n        self.w = self.image_rect.w\n        self.h = self.image_rect.h\n        # TODO: needed? borderwidth = self.canvas.config()[\'borderwidth\'][4]\n        \n        self.image_thumb = self.image.copy()\n        self.image_thumb.thumbnail(\n            [ self.canvas.winfo_width() - int(self.config[\'thumboffset\']),\n              self.canvas.winfo_height() - int(self.config[\'thumboffset\']) ]\n        )\n        self.image_thumb_rect = Rect(self.image_thumb.size)\n        self.image_thumb_rect.set_thumboffset(int(self.config[\'thumboffset\']))\n\n        self.displayimage()\n        x_scale = float(self.image_rect.w) / self.image_thumb_rect.w\n        y_scale = float(self.image_rect.h) / self.image_thumb_rect.h\n        self.scale = (x_scale, y_scale)\n\n    def newfilename(self, filenum):\n        f, e = os.path.splitext(self.filename)\n        return \'%s_crop_%s%s\' % (f, filenum, e)\n\n    def start_cropping(self):\n        cropcount = 0\n        for croparea in self.crop_rects:\n            cropcount += 1\n            f = self.newfilename(cropcount)\n            print f, croparea\n            self.crop(croparea, f)\n        self.quit()\n\n    def crop(self, croparea, filename):\n        ca = (croparea.left, croparea.top, croparea.right, croparea.bottom)\n        newimg = self.image.crop(ca)\n        newimg.save(filename)\n        \n    def load_image_list(self):\n        if self.config is not None:\n            self.lbFiles.delete(0, tk.END)\n            suffixtuple = tuple(re.split(self.delimiters, self.config[\'image-extensions\']))\n            for item in os.listdir(self.config[\'input-directory\']):\n                if os.path.isfile(os.path.join(self.config[\'input-directory\'], item)):\n                    if item.lower().endswith(suffixtuple): # The arg can be a tuple of suffixes to look for\n                        self.lbFiles.insert(tk.END, item)\n            self.update_idletasks()\n            # If there are items in listbox, select the 1st one\n            if self.lbFiles.size() > 0:\n                self.lbFiles.select_set(0)\n                #self.lbFiles.activate(0)\n                self.load_lbFiles_image(self.lbFiles.get(tk.ACTIVE))\n                self.canvas.focus_set()\n\n\nclass CreateToolTip(object):\n    """\n    create a tooltip for a given widget\n    """\n    def __init__(self, widget, text=\'widget info\'):\n        self.waittime = 500     #miliseconds\n        self.wraplength = 180   #pixels\n        self.widget = widget\n        self.text = text\n        self.widget.bind("<Enter>", self.enter)\n        self.widget.bind("<Leave>", self.leave)\n        self.widget.bind("<ButtonPress>", self.leave)\n        self.id = None\n        self.tw = None\n\n    def enter(self, event=None):\n        self.schedule()\n\n    def leave(self, event=None):\n        self.unschedule()\n        self.hidetip()\n\n    def schedule(self):\n        self.unschedule()\n        self.id = self.widget.after(self.waittime, self.showtip)\n\n    def unschedule(self):\n        id = self.id\n        self.id = None\n        if id:\n            self.widget.after_cancel(id)\n\n    def showtip(self, event=None):\n        x = y = 0\n        x, y, cx, cy = self.widget.bbox("insert")\n        x += self.widget.winfo_rootx() + 25\n        y += self.widget.winfo_rooty() + 20\n        # creates a toplevel window\n        self.tw = tk.Toplevel(self.widget)\n        # Leaves only the label and removes the app window\n        self.tw.wm_overrideredirect(True)\n        self.tw.wm_geometry("+%d+%d" % (x, y))\n        label = tk.Label(self.tw, text=self.text, justify=\'left\',\n            background="#ffffff", relief=\'solid\', borderwidth=1,\n            wraplength = self.wraplength)\n        label.pack(ipadx=1)\n\n    def hidetip(self):\n        tw = self.tw\n        self.tw= None\n        if tw:\n            tw.destroy()\n            \nclass Rect(object):\n    def __init__(self, *args):\n        self.set_points(*args)\n        self.thumboffset = 0\n\n    def set_points(self, *args):\n        if len(args) == 2:\n            pt1 = args[0]\n            pt2 = args[1]\n        elif len(args) == 1:\n            pt1 = (0, 0)\n            pt2 = args[0]\n        elif len(args) == 0:\n            pt1 = (0, 0)\n            pt2 = (0, 0)\n\n        x1, y1 = pt1\n        x2, y2 = pt2\n\n        self.left = min(x1, x2)\n        self.top = min(y1, y2)\n        self.right = max(x1, x2)\n        self.bottom = max(y1, y2)\n\n        self._update_dims()\n\n    def clip_to(self, containing_rect):\n        cr = containing_rect\n        self.top = max(self.top, cr.top + self.thumboffset)\n        self.bottom = min(self.bottom, cr.bottom + self.thumboffset)\n        self.left = max(self.left, cr.left + self.thumboffset)\n        self.right = min(self.right, cr.right + self.thumboffset)\n        self._update_dims()\n\n    def _update_dims(self):\n        """added to provide w and h dimensions."""\n\n        self.w = self.right - self.left\n        self.h = self.bottom - self.top\n\n    def scale_rect(self, scale):\n        x_scale = scale[0]\n        y_scale = scale[1]\n\n        r = Rect()\n        r.top = int((self.top - self.thumboffset) * y_scale)\n        r.bottom = int((self.bottom - self.thumboffset) * y_scale)\n        r.right = int((self.right - self.thumboffset) * x_scale)\n        r.left = int((self.left - self.thumboffset) * x_scale)\n        r._update_dims()\n\n        return r\n\n    def move_rect(self, x0, y0):\n        r = Rect()\n        r.top = int(self.top + y0)\n        r.bottom = int(self.bottom + y0)\n        r.right = int(self.right + x0)\n        r.left = int(self.left + x0)\n        r._update_dims()\n        return r\n\n    def rescale_rect(self, scale, x0, y0):\n        x_scale = scale[0]\n        y_scale = scale[1]\n\n        r = Rect()\n        r.top = int((self.top - y0) / y_scale + self.thumboffset)\n        r.bottom = int((self.bottom - y0) / y_scale + self.thumboffset)\n        r.right = int((self.right - x0) / x_scale + self.thumboffset)\n        r.left = int((self.left - x0) / x_scale + self.thumboffset)\n        r._update_dims()\n        return r\n\n    def plus_rect(self, r0):\n        r = Rect()\n        r.top = min(self.top, r0.top)\n        r.bottom = max(self.bottom, r0.bottom)\n        r.right = max(self.right, r0.right)\n        r.left = min(self.left, r0.left)\n        r._update_dims()\n        return r\n\n    def valid_rect(self, w, h):\n        r = Rect()\n        r.top = self.top\n        if r.top < 0:\n            r.top = 0\n        if r.top > h - 1:\n            r.top = h - 1\n        r.bottom = self.bottom\n        if r.bottom < 1:\n            r.bottom = 1\n        if r.bottom > h:\n            r.bottom = h\n        r.right = self.right\n        if r.right < 1:\n            r.right = 1\n        if r.right > w:\n            r.right = w\n        r.left = self.left\n        if r.left < 0:\n            r.left = 0\n        if r.left > w - 1:\n            r.left = w - 1\n        r._update_dims()\n        return r\n\n    def set_thumboffset(self, thumboffset=0):\n        self.thumboffset = thumboffset\n\n    def __repr__(self):\n        return \'(%d,%d)-(%d,%d)\' % (self.left, self.top, self.right, self.bottom)\n\n# Class that handles configuration\nclass ScanConfig(object):\n\n    def __init__(self, configFile=None):\n        self.section = self.__class__.__name__.upper()\n        self.get_default_config()\n\n        if configFile is None:\n            # Create default configuration in OS-independent "home" directory\n            configPath = os.path.join(os.path.expanduser(\'~\'), \'.config\', self.__class__.__name__.lower())\n            if not os.path.exists(configPath):\n                os.makedirs(configPath)\n            self.configFile = os.path.join(configPath, \'config.ini\')\n            if os.path.exists(self.configFile):\n                self.config = confpars.SafeConfigParser()\n                self.config.read(self.configFile)\n            else:\n                self.config = self.default_config\n                with open(self.configFile, \'wb\') as cf:\n                    self.config.write(cf)\n        elif os.path.exists(configFile):\n            self.configFile = os.path.normpath(configFile)\n            self.config = confpars.SafeConfigParser()\n            self.config.read(self.configFile)\n        else:\n            # Path given, but does not exist\n            raise Exception("Configuration file \'{0}\' does not exist".format(configFile))\n    \n    # Gets default configuration\n    def get_default_config(self):\n        self.default_config = confpars.SafeConfigParser()\n        self.default_config.add_section(self.section)\n        # Position and size of main window\n        self.default_config.set(self.section, \'geometry\', \'1024x768+10+10\')\n        # Directory with pictures to process\n        self.default_config.set(self.section, \'input-directory\', os.path.expanduser(\'~\'))\n        # Directory to write resulting pictures into\n        self.default_config.set(self.section, \'output-directory\', os.path.expanduser(\'~\'))\n        # Extensions of files considered to be pictures\n        self.default_config.set(self.section, \'image-extensions\', \'tif tiff jpg jpeg gif png\')\n        # Thumbnail offset\n        self.default_config.set(self.section, \'thumboffset\', \'4\')\n        \n    def __getitem__(self, key):\n        try:\n            return self.config.get(self.section, key)\n        except confpars.NoOptionError:\n            try:\n                return self.default_config.get(self.section, key)\n            except confpars.NoOptionError:\n                return None\n\n    def __del__(self):\n        with open(self.configFile, \'wb\') as cf:\n            self.config.write(cf)'
p127
asg7
I0
sg45
I5494655
ssg29
(lp128
(dp129
g67
S'Tkinter'
p130
sg50
g82
sg69
S'Frame'
p131
sg71
(lp132
sg24
g73
sg74
g75
sg76
(lp133
(dp134
S'Handler'
p135
S'on_ScanCropper_Config'
p136
sS'Component'
p137
S''
sS'Event'
p138
S'<Configure>'
p139
sasg78
(lp140
(dp141
g50
S'borderwidth'
p142
sS'Value'
p143
S'n:5'
p144
sS'Extra'
p145
Nsa(dp146
g50
S'width'
p147
sg143
S'n:1'
p148
sg145
Nsa(dp149
g50
S'height'
p150
sg143
S'n:1'
p151
sg145
Nsasa(dp152
g67
S'Tkinter'
p153
sg50
S'canvas'
p154
sg69
S'Canvas'
p155
sg71
(lp156
(dp157
g50
S'anchor'
p158
sg143
S'nw'
p159
sa(dp160
g50
S'expand'
p161
sg143
S'yes'
p162
sa(dp163
g50
S'fill'
p164
sg143
S'both'
p165
sasg24
Nsg74
(lp166
I5113
aI5331
asg76
(lp167
(dp168
g135
S'canvas_mouseb1move_callback'
p169
sg137
S''
sg138
S'<B1-Motion>'
p170
sa(dp171
g135
S'canvas_mouse1_callback'
p172
sg137
S''
sg138
S'<Button-1>'
p173
sa(dp174
g135
S'canvas_mouseup1_callback'
p175
sg137
S''
sg138
S'<ButtonRelease-1>'
p176
sa(dp177
g135
S'canvas_KeyRel_ArrowDown'
p178
sg137
S''
sg138
S'<KeyRelease-Down>'
p179
sa(dp180
g135
S'on_canvas_KeyRel_KeyPad_PageDown'
p181
sg137
S''
sg138
S'<KeyRelease-KP_Next>'
p182
sa(dp183
g135
S'on_canvas_KeyRel_KeyPad_PageUp'
p184
sg137
S''
sg138
S'<KeyRelease-KP_Prior>'
p185
sa(dp186
g135
S'canvas_KeyRel_ArrowLeft'
p187
sg137
S''
sg138
S'<KeyRelease-Left>'
p188
sa(dp189
g135
S'on_canvas_KeyRel_PageDown'
p190
sg137
S''
sg138
S'<KeyRelease-Next>'
p191
sa(dp192
g135
S'on_canvas_KeyRel_PageUp'
p193
sg137
S''
sg138
S'<KeyRelease-Prior>'
p194
sa(dp195
g135
S'canvas_KeyRel_ArrowRight'
p196
sg137
S''
sg138
S'<KeyRelease-Right>'
p197
sa(dp198
g135
S'canvas_KeyRel_ArrowUp'
p199
sg137
S''
sg138
S'<KeyRelease-Up>'
p200
sa(dp201
g135
S'canvas_KeyRel_ArrowUp_Shift'
p202
sg137
S''
sg138
S'<Shift-KeyRelease-Up>'
p203
sa(dp204
g135
S'canvas_KeyRel_space'
p205
sg137
S''
sg138
S'<KeyRelease-space>'
p206
sasg78
(lp207
(dp208
g50
S'borderwidth'
p209
sg143
S'n:1'
p210
sg145
Nsa(dp211
g50
S'takefocus'
p212
sg143
I1
sg145
Nsasa(dp213
g67
S'Tkinter'
p214
sg50
S'frameButtons'
p215
sg69
S'Frame'
p216
sg71
(lp217
(dp218
g50
g158
sg143
S'nw'
p219
sa(dp220
g50
g164
sg143
S'x'
sasg24
(I0
I1
I1
tp221
sg74
g75
sg76
(lp222
sg78
(lp223
(dp224
g50
g142
sg143
S'n:1'
p225
sg145
Nsa(dp226
g50
g150
sg143
S'n:1'
p227
sg145
Nsasa(dp228
g67
S'Tkinter'
p229
sg50
S'frameFiles'
p230
sg69
S'Frame'
p231
sg71
(lp232
(dp233
g50
g158
sg143
g159
sa(dp234
g50
g164
sg143
S'y'
sasg24
(I0
I0
tp235
sg74
g75
sg76
(lp236
sg78
(lp237
sa(dp238
g67
g229
sg50
S'frameMain'
p239
sg69
g231
sg71
(lp240
(dp241
g50
g161
sg143
S'yes'
p242
sa(dp243
g50
g164
sg143
S'both'
p244
sasg24
(I0
I1
tp245
sg74
g75
sg76
(lp246
sg78
(lp247
(dp248
g50
g142
sg143
S'n:1'
p249
sg145
Nsasa(dp250
g67
g214
sg50
S'framePicture'
p251
sg69
g216
sg71
(lp252
(dp253
g50
g158
sg143
g159
sa(dp254
g50
g161
sg143
g242
sa(dp255
g50
g164
sg143
g244
sasg24
(I0
I1
I0
tp256
sg74
g75
sg76
(lp257
sg78
(lp258
(dp259
g50
g142
sg143
S'n:1'
p260
sg145
Nsa(dp261
g50
S'relief'
p262
sg143
S'raised'
p263
sg145
Nsasa(dp264
g67
S'Tkinter'
p265
sg50
S'goButton'
p266
sg69
S'Button'
p267
sg71
(lp268
(dp269
g50
g158
sg143
S'sw'
p270
sa(dp271
g50
g161
sg143
g242
sa(dp272
g50
g164
sg143
S'x'
sasg24
Nsg74
(lp273
I6607
aI9343
asg76
(lp274
sg78
(lp275
(dp276
g50
S'text'
p277
sg143
S'Crops'
p278
sg145
Nsa(dp279
g50
S'activebackground'
p280
sg143
S'c:#0F0'
p281
sg145
Nsa(dp282
g50
S'command'
p283
sg143
S'start_cropping'
p284
sg145
I0
sasa(dp285
g67
g153
sg50
S'lbFiles'
p286
sg69
S'Listbox'
p287
sg71
(lp288
(dp289
g50
g158
sg143
g159
sa(dp290
g50
g164
sg143
S'y'
sasg24
Nsg74
(lp291
I1219
aI7964
asg76
(lp292
(dp293
g135
S'on_lbFiles_mouseClick_1'
p294
sg137
S''
sg138
S'<ButtonRelease-1>'
p295
sasg78
(lp296
(dp297
g50
S'takefocus'
p298
sg143
I1
sg145
Nsasa(dp299
g67
g265
sg50
S'plusButton'
p300
sg69
g267
sg71
(lp301
(dp302
g50
g158
sg143
g270
sa(dp303
g50
g161
sg143
g242
sa(dp304
g50
g164
sg143
S'x'
sasg24
Nsg74
(lp305
I5602
aI9343
asg76
(lp306
sg78
(lp307
(dp308
g50
g277
sg143
S'+'
sg145
Nsa(dp309
g50
g283
sg143
S'plus_box'
p310
sg145
I0
sasa(dp311
g67
g265
sg50
S'quitButton'
p312
sg69
g267
sg71
(lp313
(dp314
g50
g158
sg143
g270
sa(dp315
g50
g161
sg143
g242
sa(dp316
g50
g164
sg143
S'x'
sasg24
Nsg74
(lp317
I7377
aI9343
asg76
(lp318
sg78
(lp319
(dp320
g50
g277
sg143
S'Quit'
p321
sg145
Nsa(dp322
g50
g280
sg143
S'c:#F00'
p323
sg145
Nsa(dp324
g50
g283
sg143
S'quit'
p325
sg145
I0
sasa(dp326
g67
g265
sg50
S'resetButton'
p327
sg69
g267
sg71
(lp328
(dp329
g50
g158
sg143
g270
sa(dp330
g50
g161
sg143
g242
sa(dp331
g50
g164
sg143
S'x'
sasg24
Nsg74
(lp332
I3173
aI9343
asg76
(lp333
sg78
(lp334
(dp335
g50
g277
sg143
S'Reset'
p336
sg145
Nsa(dp337
g50
g280
sg143
S'c:#F00'
p338
sg145
Nsa(dp339
g50
g283
sg143
S'reset'
p340
sg145
I0
sasa(dp341
g67
g153
sg50
S'sbFiles'
p342
sg69
S'Scrollbar'
p343
sg71
(lp344
(dp345
g50
g158
sg143
g159
sa(dp346
g50
g164
sg143
S'y'
sasg24
Nsg74
(lp347
I1843
aI7964
asg76
(lp348
sg78
(lp349
sa(dp350
g67
g265
sg50
S'undoButton'
p351
sg69
g267
sg71
(lp352
(dp353
g50
g158
sg143
g270
sa(dp354
g50
g161
sg143
g242
sa(dp355
g50
g164
sg143
S'x'
sasg24
Nsg74
(lp356
I3794
aI9343
asg76
(lp357
sg78
(lp358
(dp359
g50
g277
sg143
S'Undo'
p360
sg145
Nsa(dp361
g50
g280
sg143
S'c:#FF0'
p362
sg145
Nsa(dp363
g50
g283
sg143
S'undo_last'
p364
sg145
I0
sasa(dp365
g67
g265
sg50
S'unzoomButton'
p366
sg69
g267
sg71
(lp367
(dp368
g50
g158
sg143
g270
sa(dp369
g50
g161
sg143
g242
sa(dp370
g50
g164
sg143
S'x'
sasg24
Nsg74
(lp371
I4903
aI9343
asg76
(lp372
sg78
(lp373
(dp374
g50
g277
sg143
S'<-|->'
p375
sg145
Nsa(dp376
g50
g280
sg143
S'c:#00F'
p377
sg145
Nsa(dp378
g50
g283
sg143
S'unzoom_image'
p379
sg145
I0
sasa(dp380
g67
g265
sg50
S'zoomButton'
p381
sg69
S'Checkbutton'
p382
sg71
(lp383
(dp384
g50
g158
sg143
g270
sa(dp385
g50
g161
sg143
g242
sa(dp386
g50
g164
sg143
S'x'
sasg24
Nsg74
(lp387
I4175
aI9343
asg76
(lp388
sg78
(lp389
(dp390
g50
S'text'
p391
sg143
S'Zoom'
p392
sg145
Nsa(dp393
g50
S'command'
p394
sg143
S'zoom_mode'
p395
sg145
I0
sasasg80
g84
sg34
I1
sasS'VisibleForm'
p396
g82
sS'SelectedForm'
p397
g82
sg50
g6
sa.