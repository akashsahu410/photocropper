(lp1
(dp2
S'ModulePrevious'
p3
S'scancropper'
p4
sS'ModuleCurrent'
p5
S'ScanCropper'
p6
sS'Version'
p7
I1
sS'Geometry'
p8
S'3834x2065+3+28'
p9
sS'ProjectName'
p10
g6
sS'ImportTypes'
p11
(lp12
(S'Pmw'
p13
S'import'
p14
tp15
a(S'Tkinter'
p16
S'import'
p17
tp18
asS'EditorWidths'
p19
((lp20
I411
aI324
a(lp21
I378
aI357
a(lp22
I369
aI366
atp23
sS'ID'
p24
S'Rapyd Project'
p25
sS'ParkingLot'
p26
(dp27
S'SelectedWidreq'
p28
NsS'Widreqs'
p29
(lp30
ssa(dp31
S'PreviousForm'
p32
S'Preferences'
p33
sS'OnTab'
p34
I1
sS'-Main-'
p35
(dp36
S'Cursor'
p37
S'9.0'
p38
sS'Text'
p39
(lp40
S''
aS'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n'
p41
aS'import rpErrorHandler\nimport Tkinter\n'
p42
aS'\ndef window_close():\n    conf[\'geometry\'] = Root.geometry()\n    conf.save() # Save configuration to keep window geometry\n    Root.destroy()\n\ntry:\n    #--------------------------------------------------------------------------#\n    # User code should go after this comment so it is inside the "try".        #\n    #     This allows rpErrorHandler to gain control on an error so it         #\n    #     can properly display a Rapyd-aware error message.                    #\n    #--------------------------------------------------------------------------#\n\n    #Adjust sys.path so we can find other modules of this project\n    import sys\n    if \'.\' not in sys.path:\n        sys.path.append(\'.\')\n    #Put lines to import other modules of this project here\n    import argparse    \n    import tkFileDialog\n    import os\n    import re\n    try:\n        # for Python2\n        import ConfigParser as confpars\n    except ImportError:\n        # for Python3\n        import configparser as confpars\n    #\n    from PIL import Image, ImageTk\n    tk = Tkinter\n \n    if __name__ == \'__main__\':\n        # Parse arguments\n        parser = argparse.ArgumentParser(description=\'Picture cropper\')\n        parser.add_argument(\'-c\', \'--config\', \'--config-file\', dest=\'configFile\', default=None, help=\'Configuration file path\')\n        parser.add_argument(\'-d\', \'--debug\', default=0, help=\'Debug level\')\n        args = parser.parse_args()\n\n        # Load configuration\n        conf = ScanConfig(args.configFile)\n'
p43
aS"        Root = Tkinter.Tk()\n        Tkinter.CallWrapper = rpErrorHandler.CallWrapper\n        App = ScanCropper(Root)\n        App.pack(expand='yes',fill='both')\n"
p44
aS'        # Set window\n        Root.geometry(conf[\'geometry\'])\n        # Allow closing windows by clicking "X"\n        Root.protocol("WM_DELETE_WINDOW", window_close)\n        Root.title(\'Scan Cropper\')\n        App.config = conf\n        App.load_image_list()\n        Root.mainloop()\n    #--------------------------------------------------------------------------#\n    # User code should go above this comment.                                  #\n    #--------------------------------------------------------------------------#\nexcept:\n    rpErrorHandler.RunError()'
p45
asg7
I0
sS'Sha'
p46
I9276287
ssS'Forms'
p47
(lp48
(dp49
S'Requested'
p50
S'Gui'
p51
sS'Name'
p52
g33
sg28
NsS'Type'
p53
S'Tkinter.Frame'
p54
sS'Lines'
p55
(lp56
sg39
(dp57
g37
S'24.0'
p58
sg39
(lp59
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                 Preferences                                  #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass Preferences(Tkinter.Frame):\n    def __init__(self,Master=None,*pos,**kw):\n'
p60
aS'        #\n        #Your code here\n        #\n'
p61
aS'\n        apply(Tkinter.Frame.__init__,(self,Master),kw)\n\n'
p62
aS'        #\n        #Your code here\n        #\n'
p63
aS'    #\n    #Start of event handler methods\n    #\n'
p64
aS'\n'
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p65
aS''
asg7
I0
sg46
I9763455
ssg29
(lp66
(dp67
S'ModuleName'
p68
S'Tkinter'
p69
sg52
g33
sS'WidgetName'
p70
S'Frame'
p71
sS'PackOptions'
p72
(lp73
sg24
(I0
tp74
sS'XY'
p75
(I0
I0
tp76
sS'Bindings'
p77
(lp78
sS'Options'
p79
(lp80
sasS'BaseClass'
p81
g54
sg34
I1
sa(dp82
g50
g39
sg52
S'ScanCropper'
p83
sg28
S'canvas'
p84
sg53
S'Tkinter.Frame'
p85
sg55
(lp86
(lp87
I2416
aI5000
aI1
aa(lp88
I6206
aI7908
aI0
aa(lp89
I6206
aI9702
aI0
aasg39
(dp90
g37
S'433.36'
p91
sg39
(lp92
S"#------------------------------------------------------------------------------#\n#                                                                              #\n#                                 ScanCropper                                  #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass ScanCropper(Tkinter.Frame):\n    def __init__(self,Master=None,*pos,**kw):\n        kw['borderwidth'] = '5'\n        kw['height'] = '1'\n        kw['width'] = '1'\n"
p93
aS'        #\n        #Your code here\n        #\n'
p94
aS"\n        apply(Tkinter.Frame.__init__,(self,Master),kw)\n        self.bind('<Configure>',self.on_ScanCropper_Config)\n        self.frameFiles = Tkinter.Frame(self)\n        self.frameFiles.pack(anchor='nw',fill='y',side='left')\n        self.sbFiles = Tkinter.Scrollbar(self.frameFiles)\n        self.sbFiles.pack(anchor='nw',fill='y',side='right')\n        self.lbFiles = Tkinter.Listbox(self.frameFiles,takefocus=1)\n        self.lbFiles.pack(anchor='nw',fill='y',side='right')\n        self.lbFiles.bind('<ButtonRelease-1>',self.on_lbFiles_mouseClick_1)\n        self.frameMain = Tkinter.Frame(self,borderwidth='1')\n        self.frameMain.pack(expand='yes',fill='both',side='left')\n        self.framePicture = Tkinter.Frame(self.frameMain,borderwidth='1'\n            ,relief='raised')\n        self.framePicture.pack(anchor='nw',expand='yes',fill='both',side='top')\n        self.canvas = Tkinter.Canvas(self.framePicture,borderwidth='1'\n            ,takefocus=1)\n        self.canvas.pack(anchor='nw',expand='yes',fill='both',side='bottom')\n        self.canvas.bind('<B1-Motion>',self.canvas_mouseb1move_callback)\n        self.canvas.bind('<Button-1>',self.canvas_mouse1_callback)\n        self.canvas.bind('<ButtonRelease-1>',self.canvas_mouseup1_callback)\n        self.canvas.bind('<KeyRelease-Down>',self.canvas_ArrowDown)\n        self.canvas.bind('<Shift-KeyRelease-Down>',self.canvas_ArrowDown_Shift)\n        self.canvas.bind('<KeyRelease-KP_Down>',self.canvas_KP_ArrowDown)\n        self.canvas.bind('<KeyRelease-KP_Enter>',self.canvas_KP_Enter)\n        self.canvas.bind('<KeyRelease-KP_Left>',self.canvas_KP_ArrowLeft)\n        self.canvas.bind('<KeyRelease-KP_Next>',self.canvas_KP_PageDown)\n        self.canvas.bind('<KeyRelease-KP_Prior>',self.canvas_KP_PageUp)\n        self.canvas.bind('<KeyRelease-KP_Right>',self.canvas_KP_ArrowRight)\n        self.canvas.bind('<KeyRelease-KP_Up>',self.canvas_KP_ArrowUp)\n        self.canvas.bind('<KeyRelease-Left>',self.canvas_ArrowLeft)\n        self.canvas.bind('<Shift-KeyRelease-Left>',self.canvas_ArrowLeft_Shift)\n        self.canvas.bind('<KeyRelease-Next>',self.canvas_PageDown)\n        self.canvas.bind('<KeyRelease-Prior>',self.canvas_PageUp)\n        self.canvas.bind('<KeyRelease-Return>',self.canvas_Return)\n        self.canvas.bind('<KeyRelease-Right>',self.canvas_ArrowRight)\n        self.canvas.bind('<Shift-KeyRelease-Right>' \\\n            ,self.canvas_ArrowRight_Shift)\n        self.canvas.bind('<KeyRelease-Up>',self.canvas_ArrowUp)\n        self.canvas.bind('<Shift-KeyRelease-Up>',self.canvas_ArrowUp_Shift)\n        self.canvas.bind('<KeyRelease-space>',self.canvas_SPACE)\n        self.frameButtons = Tkinter.Frame(self.frameMain,borderwidth='1'\n            ,height='1')\n        self.frameButtons.pack(anchor='nw',fill='x',side='top')\n        self.btnInputDir = Tkinter.Button(self.frameButtons,text='Input ...')\n        self.btnInputDir.pack(anchor='sw',side='left')\n        self.btnInputDir.bind('<ButtonRelease-1>',self.on_btnInputDir_ButRel_1)\n        self.btnOutputDir = Tkinter.Button(self.frameButtons,text='Output ...')\n        self.btnOutputDir.pack(anchor='sw',side='left')\n        self.btnOutputDir.bind('<ButtonRelease-1>' \\\n            ,self.on_btnOutputDir_ButRel_1)\n        self.resetButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#F00',command=self.reset,text='Reset')\n        self.resetButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.undoButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#FF0',command=self.undo_last,text='Undo')\n        self.undoButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.zoomButton = Tkinter.Checkbutton(self.frameButtons\n            ,command=self.zoom_mode,text='Zoom')\n        self.zoomButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.unzoomButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#00F',command=self.unzoom_image,text='<-|->')\n        self.unzoomButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.plusButton = Tkinter.Button(self.frameButtons,command=self.plus_box\n            ,text='+')\n        self.plusButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.goButton = Tkinter.Button(self.frameButtons,activebackground='#0F0'\n            ,command=self.start_cropping,text='Crops')\n        self.goButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.quitButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#F00',command=self.quit,text='Quit')\n        self.quitButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.quitButton.bind('<ButtonRelease-1>',self.on_quitButton_ButRel_1)\n        self.frmStatus = Tkinter.Frame(self.frameMain)\n        self.frmStatus.pack(anchor='nw',fill='y',side='top')\n        self._Label1 = Tkinter.Label(self.frmStatus,relief='sunken'\n            ,text='This is label')\n        self._Label1.pack(anchor='sw',expand='yes',fill='y',side='top')\n"
p95
aS'        #\n        #Your code here\n        #\n        self.quitButton_ttp = CreateToolTip(self.quitButton, "Exit")\n        self.resetButton_ttp = CreateToolTip(self.resetButton, "Reset all rectangles")\n        self.undoButton_ttp = CreateToolTip(self.undoButton, "Undo last rectangle")\n        self.zoomButton_ttp = CreateToolTip(self.zoomButton, "On/Off Zoom mode")\n        self.unzoomButton_ttp = CreateToolTip(self.unzoomButton, "Unzoom, view all image")\n        self.plusButton_ttp = CreateToolTip(self.plusButton, "Plus box, extent rectangle")\n        self.goButton_ttp = CreateToolTip(self.goButton, "Go, begin cropping")\n        self.btnInputDir_ttp = CreateToolTip(self.btnInputDir, "Select input directory")\n        self.bthOutputDir_ttp = CreateToolTip(self.btnOutputDir, "Select output directory")\n        self.croprect_start = None\n        self.croprect_end = None\n        self.crop_count = 0\n        self.canvas_rects = []\n        self.crop_rects = []\n        self.current_rect = None\n        self.zoommode = False\n        self.w = 1\n        self.h = 1\n        self.x0 = 0\n        self.y0 = 0\n        self.n = 0\n        self.config = None\n        self.delimiters = \' |,|\\t|#|\\|\'\n        self._after_id = None\n        self.filename = None\n        self.lbIndex = None # Keeps item index in listbox\n        self.cropIndex = 0\n'
p96
aS'    #\n    #Start of event handler methods\n    #\n'
p97
aS'\n'
aS'\n    def canvas_ArrowDown(self'
p98
aS', event=None):\n        # Moves crop rectangle one pixel DOWN\n        self.move_rect(self.cropIndex, 0, 1)\n'
p99
aS'\n    def canvas_ArrowDown_Shift(self'
p100
aS",Event=None):\n        # Moves crop rectangle AMOUNT OF pixels DOWN\n        self.move_rect(self.cropIndex, 0, int(self.config['movestep']))\n"
p101
aS'\n    def canvas_ArrowLeft(self'
p102
aS', event=None):\n        # Moves crop rectangle one pixel LEFT\n        self.move_rect(self.cropIndex, -1, 0)\n'
p103
aS'\n    def canvas_ArrowLeft_Shift(self'
p104
aS", event=None):\n        # Moves crop rectangle AMOUNT OF pixels LEFT\n        self.move_rect(self.cropIndex, -int(self.config['movestep']), 0)\n"
p105
aS'\n    def canvas_ArrowRight(self'
p106
aS', event=None):\n        # Moves crop rectangle one pixel RIGHT\n        self.move_rect(self.cropIndex, 1, 0)\n'
p107
aS'\n    def canvas_ArrowRight_Shift(self'
p108
aS", event=None):\n        # Moves crop rectangle AMOUNT OF pixels RIGHT\n        self.move_rect(self.cropIndex, int(self.config['movestep']), 0)\n"
p109
aS'\n    def canvas_ArrowUp(self'
p110
aS', event=None):\n        # Moves crop rectangle one pixel UP\n        self.move_rect(self.cropIndex, 0, -1)\n'
p111
aS'\n    def canvas_ArrowUp_Shift(self'
p112
aS", event=None):\n        # Moves crop rectangle AMOUNT OF pixels UP\n        self.move_rect(self.cropIndex, 0, -int(self.config['movestep']))\n"
p113
aS'\n    def canvas_KP_ArrowDown(self'
p114
aS', event=None):\n        # Moves crop rectangle one pixel DOWN\n        self.move_rect(self.cropIndex, 0, 1)\n'
p115
aS'\n    def canvas_KP_ArrowLeft(self'
p116
aS', event=None):\n        # Moves crop rectangle one pixel LEFT\n        self.move_rect(self.cropIndex, -1, 0)\n'
p117
aS'\n    def canvas_KP_ArrowRight(self'
p118
aS', event=None):\n        # Moves crop rectangle one pixel RIGHT\n        self.move_rect(self.cropIndex, 1, 0)\n'
p119
aS'\n    def canvas_KP_ArrowUp(self'
p120
aS', event=None):\n        # Moves crop rectangle one pixel UP\n        self.move_rect(self.cropIndex, 0, -1)\n'
p121
aS'\n    def canvas_KP_Enter(self'
p122
aS',Event=None):\n        # Crops selected areas\n        self.start_cropping()\n'
p123
aS'\n    def canvas_KP_PageDown(self'
p124
aS', event=None):\n        # Moves file selection in listbox one down\n        self.pressPage(self.PAGE_DOWN)\n'
p125
aS'\n    def canvas_KP_PageUp(self'
p126
aS', event=None):\n        # Moves file selection in listbox one up\n        self.pressPage(self.PAGE_UP)\n'
p127
aS'\n    def canvas_PageDown(self'
p128
aS', event=None):\n        # Moves file selection in listbox one DOWN\n        self.pressPage(self.PAGE_DOWN)\n'
p129
aS'\n    def canvas_PageUp(self'
p130
aS', event=None):\n        # Moves file selection in listbox one UP\n        self.pressPage(self.PAGE_UP)\n'
p131
aS'\n    def canvas_Return(self'
p132
aS',Event=None):\n        # Crops selected areas\n        self.start_cropping()\n'
p133
aS'\n    def canvas_SPACE(self'
p134
aS', event=None):\n        # Crops selected areas\n        self.start_cropping()\n'
p135
aS'\n    def canvas_mouse1_callback(self'
p136
aS', event=None):\n        self.croprect_start = (event.x, event.y)\n'
p137
aS'\n    def canvas_mouseb1move_callback(self'
p138
aS', event=None):\n        if self.current_rect:\n            self.canvas.delete(self.current_rect)\n        x1 = self.croprect_start[0]\n        y1 = self.croprect_start[1]\n        x2 = event.x\n        y2 = event.y\n        bbox = (x1, y1, x2, y2)\n        cr = self.canvas.create_rectangle(bbox)\n        self.current_rect = cr\n'
p139
aS'\n    def canvas_mouseup1_callback(self'
p140
aS', event=None):\n        self.croprect_end = (event.x, event.y)\n        self.set_crop_area()\n        self.canvas.delete(self.current_rect)\n        self.current_rect = None\n'
p141
aS'\n    def on_ScanCropper_Config(self'
p142
aS', event=None):\n        if self._after_id:\n            self.after_cancel(self._after_id)\n        self._after_id = self.after(1200, self.draw_after_resize)\n'
p143
aS'\n    def on_btnInputDir_ButRel_1(self'
p144
aS', event=None):\n        pass\n'
p145
aS'\n    def on_btnOutputDir_ButRel_1(self'
p146
aS', event=None):\n        pass\n'
p147
aS'\n    def on_lbFiles_mouseClick_1(self'
p148
aS', event=None):\n        self.lbIndex = self.lbFiles.curselection()[0]\n        self.load_lbFiles_image(self.lbFiles.get(tk.ACTIVE))\n'
p149
aS'\n    def on_quitButton_ButRel_1(self'
p150
aS", event=None):\n        conf['geometry'] = self.winfo_toplevel().geometry()\n        conf.save()\n        self.quit()\n"
p151
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p152
aS'    \n    # Constants for listbox with image file names\n    PAGE_UP = -1\n    PAGE_DOWN = 1\n    \n    # Moves rectangle with "index" by "step" pixels\n    def move_rect(self, index, xstep, ystep):\n        if len(self.crop_rects) == index + 1:\n            cr = self.crop_rects[index]\n            self.canvas.delete(self.canvas_rects[index])\n            self.canvas_rects.pop(index)\n            self.crop_rects[index] = cr.move_rect(xstep, ystep)\n            self.redraw_rect()\n\n    def pressPage(self, direction=0):\n        index = self.lbFiles.curselection()[0] + direction\n        self.lbFiles.selection_clear(0, tk.END)\n        self.lbSelect(index)\n\n    # Programmatically select image in a listbox\n    def lbSelect(self, index):\n        if index < 0:\n            index = 0\n        elif index == self.lbFiles.size():\n            index = self.lbFiles.size()-1  \n        self.lbFiles.select_set(index)\n        self.lbFiles.activate(index)\n        if index != self.lbIndex:\n            self.load_lbFiles_image(self.lbFiles.get(tk.ACTIVE))\n            self.lbIndex = index\n        \n    def draw_after_resize(self):\n        # Check if there is a selection in file list\n        if self.filename:\n            self.loadimage()\n \n    def load_lbFiles_image(self, imagePath):\n        self.filename = os.path.join(self.config[\'input-directory\'], imagePath)\n        if os.path.exists(self.filename):\n            self.loadimage()\n            self.winfo_toplevel().title(\'Scan Cropper - \' + imagePath)\n            self.redraw_rect()\n       \n    def set_crop_area(self):\n        r = Rect(self.croprect_start, self.croprect_end)\n        r.set_thumboffset(int(self.config[\'thumboffset\']))\n        \n        # adjust dimensions\n        r.clip_to(self.image_thumb_rect)\n\n        # ignore rects smaller than this size\n        if min(r.h, r.w) < 10:\n            return\n\n        ra = r\n        ra = ra.scale_rect(self.scale)\n        ra = ra.move_rect(self.x0, self.y0)\n        ra = ra.valid_rect(self.w, self.h)\n        if self.zoommode:\n            self.canvas.delete(tk.ALL)\n            self.x0 = ra.left\n            self.y0 = ra.top\n            za = (ra.left, ra.top, ra.right, ra.bottom)\n            self.image_thumb = self.image.crop(za)\n            self.image_thumb.thumbnail(thumbsize)\n            self.image_thumb_rect = Rect(self.image_thumb.size)\n            self.image_thumb_rect.set_thumboffset(int(self.config[\'thumboffset\']))\n            self.displayimage()\n            x_scale = float(ra.w) / self.image_thumb_rect.w\n            y_scale = float(ra.h) / self.image_thumb_rect.h\n            self.scale = (x_scale, y_scale)\n            self.redraw_rect()\n            self.zoommode = False\n            self.zoomButton.deselect()\n        else:\n            self.drawrect(r)\n            self.crop_rects.append(ra)\n            self.n = self.n + 1\n\n    def zoom_mode(self):\n        if self.zoommode:\n            self.zoommode = False\n        else:\n            self.zoommode = True\n\n    def unzoom_image(self):\n        self.canvas.delete(tk.ALL)\n        self.zoommode = False\n        self.zoomButton.deselect()\n        self.x0 = 0\n        self.y0 = 0\n        self.image_thumb = self.image.copy()\n        self.image_thumb.thumbnail(thumbsize)\n        self.image_thumb_rect = Rect(self.image_thumb.size)\n        self.image_thumb_rect.set_thumboffset(int(self.config[\'thumboffset\']))\n        self.displayimage()\n        x_scale = float(self.image_rect.w) / self.image_thumb_rect.w\n        y_scale = float(self.image_rect.h) / self.image_thumb_rect.h\n        self.scale = (x_scale, y_scale)\n        self.redraw_rect()\n\n    def plus_box(self):\n        if self.n > 1:\n            self.canvas.delete(tk.ALL)\n            if self.crop_rects:\n                ra = self.crop_rects[self.n - 1]\n                self.crop_rects.pop()\n                self.n = self.n - 1\n                ra0 = self.crop_rects[self.n - 1]\n                ra0 = ra0.plus_rect(ra)\n                self.crop_rects[self.n - 1] = ra0\n                self.displayimage()\n                self.redraw_rect()\n                self.zoommode = False\n                self.zoomButton.deselect()\n\n    def redraw_rect(self):\n        for croparea in self.crop_rects:\n            self.drawrect(croparea.rescale_rect(self.scale, self.x0, self.y0))\n\n    def undo_last(self):\n        if self.canvas_rects:\n            r = self.canvas_rects.pop()\n            self.canvas.delete(r)\n\n        if self.crop_rects:\n            self.crop_rects.pop()\n\n    def drawrect(self, rect):\n        bbox = (rect.left, rect.top, rect.right, rect.bottom)\n        cr = self.canvas.create_rectangle(\n            bbox, activefill=\'\', fill=\'yellow\', stipple=self.config[\'stipple\'])\n        self.canvas_rects.append(cr)\n\n    def reset(self):\n        self.canvas.delete(tk.ALL)\n        self.zoommode = False\n        self.zoomButton.deselect()\n        self.canvas_rects = []\n        self.crop_rects = []\n        self.displayimage()\n        \n    def displayimage(self):\n        self.photoimage = ImageTk.PhotoImage(self.image_thumb)\n        w, h = self.image_thumb.size\n        self.canvas.delete("all") # Remove remnants of previous crop area\n        \n        self.canvas.create_image(\n            int(self.config[\'thumboffset\']),\n            int(self.config[\'thumboffset\']),\n            anchor=tk.NW,\n            image=self.photoimage)\n\n    def loadimage(self):\n        self.image = Image.open(self.filename)\n        self.image_rect = Rect(self.image.size)\n        self.image_rect.set_thumboffset(int(self.config[\'thumboffset\']))\n        self.w = self.image_rect.w\n        self.h = self.image_rect.h\n        # TODO: needed? borderwidth = self.canvas.config()[\'borderwidth\'][4]\n        \n        self.image_thumb = self.image.copy()\n        self.image_thumb.thumbnail(\n            [ self.canvas.winfo_width() - int(self.config[\'thumboffset\']),\n              self.canvas.winfo_height() - int(self.config[\'thumboffset\']) ]\n        )\n        self.image_thumb_rect = Rect(self.image_thumb.size)\n        self.image_thumb_rect.set_thumboffset(int(self.config[\'thumboffset\']))\n\n        self.displayimage()\n        x_scale = float(self.image_rect.w) / self.image_thumb_rect.w\n        y_scale = float(self.image_rect.h) / self.image_thumb_rect.h\n        self.scale = (x_scale, y_scale)\n\n    def newfilename(self, filenum):\n        f, e = os.path.splitext(self.filename)\n        return \'%s_crop_%s%s\' % (f, filenum, e)\n\n    def start_cropping(self):\n        cropcount = 0\n        for croparea in self.crop_rects:\n            cropcount += 1\n            f = self.newfilename(cropcount)\n            print f, croparea\n            self.crop(croparea, f)\n\n    def crop(self, croparea, filename):\n        ca = (croparea.left, croparea.top, croparea.right, croparea.bottom)\n        newimg = self.image.crop(ca)\n        imagePath = os.path.join(self.config[\'output-directory\'], filename)\n        newimg.save(imagePath)\n        \n    def load_image_list(self):\n        if self.config is not None:\n            self.lbFiles.delete(0, tk.END)\n            suffixtuple = tuple(re.split(self.delimiters, self.config[\'image-extensions\']))\n            for item in os.listdir(self.config[\'input-directory\']):\n                if os.path.isfile(os.path.join(self.config[\'input-directory\'], item)):\n                    if item.lower().endswith(suffixtuple): # The arg can be a tuple of suffixes to look for\n                        self.lbFiles.insert(tk.END, item)\n            self.update_idletasks()\n            # If there are items in listbox, select the 1st one\n            if self.lbFiles.size() > 0:\n                self.lbFiles.select_set(0)\n                self.load_lbFiles_image(self.lbFiles.get(tk.ACTIVE))\n                self.canvas.focus_set()\n\n\nclass CreateToolTip(object):\n    """\n    create a tooltip for a given widget\n    """\n    def __init__(self, widget, text=\'widget info\'):\n        self.waittime = 500     #miliseconds\n        self.wraplength = 180   #pixels\n        self.widget = widget\n        self.text = text\n        self.widget.bind("<Enter>", self.enter)\n        self.widget.bind("<Leave>", self.leave)\n        self.widget.bind("<ButtonPress>", self.leave)\n        self.id = None\n        self.tw = None\n\n    def enter(self, event=None):\n        self.schedule()\n\n    def leave(self, event=None):\n        self.unschedule()\n        self.hidetip()\n\n    def schedule(self):\n        self.unschedule()\n        self.id = self.widget.after(self.waittime, self.showtip)\n\n    def unschedule(self):\n        id = self.id\n        self.id = None\n        if id:\n            self.widget.after_cancel(id)\n\n    def showtip(self, event=None):\n        x = y = 0\n        x, y, cx, cy = self.widget.bbox("insert")\n        x += self.widget.winfo_rootx() + 25\n        y += self.widget.winfo_rooty() + 20\n        # creates a toplevel window\n        self.tw = tk.Toplevel(self.widget)\n        # Leaves only the label and removes the app window\n        self.tw.wm_overrideredirect(True)\n        self.tw.wm_geometry("+%d+%d" % (x, y))\n        label = tk.Label(self.tw, text=self.text, justify=\'left\',\n            background="#fef9e7", relief=\'solid\', borderwidth=1,\n            wraplength = self.wraplength)\n        label.pack(ipadx=1)\n\n    def hidetip(self):\n        tw = self.tw\n        self.tw= None\n        if tw:\n            tw.destroy()\n            \nclass Rect(object):\n    def __init__(self, *args):\n        self.set_points(*args)\n        self.thumboffset = 0\n\n    def set_points(self, *args):\n        if len(args) == 2:\n            pt1 = args[0]\n            pt2 = args[1]\n        elif len(args) == 1:\n            pt1 = (0, 0)\n            pt2 = args[0]\n        elif len(args) == 0:\n            pt1 = (0, 0)\n            pt2 = (0, 0)\n\n        x1, y1 = pt1\n        x2, y2 = pt2\n\n        self.left = min(x1, x2)\n        self.top = min(y1, y2)\n        self.right = max(x1, x2)\n        self.bottom = max(y1, y2)\n\n        self._update_dims()\n\n    def clip_to(self, containing_rect):\n        cr = containing_rect\n        self.top = max(self.top, cr.top + self.thumboffset)\n        self.bottom = min(self.bottom, cr.bottom + self.thumboffset)\n        self.left = max(self.left, cr.left + self.thumboffset)\n        self.right = min(self.right, cr.right + self.thumboffset)\n        self._update_dims()\n\n    def _update_dims(self):\n        """added to provide w and h dimensions."""\n\n        self.w = self.right - self.left\n        self.h = self.bottom - self.top\n\n    def scale_rect(self, scale):\n        x_scale = scale[0]\n        y_scale = scale[1]\n\n        r = Rect()\n        r.top = int((self.top - self.thumboffset) * y_scale)\n        r.bottom = int((self.bottom - self.thumboffset) * y_scale)\n        r.right = int((self.right - self.thumboffset) * x_scale)\n        r.left = int((self.left - self.thumboffset) * x_scale)\n        r._update_dims()\n\n        return r\n\n    def move_rect(self, x0, y0):\n        r = Rect()\n        r.top = int(self.top + y0)\n        r.bottom = int(self.bottom + y0)\n        r.right = int(self.right + x0)\n        r.left = int(self.left + x0)\n        r._update_dims()\n        return r\n\n    def rescale_rect(self, scale, x0, y0):\n        x_scale = scale[0]\n        y_scale = scale[1]\n\n        r = Rect()\n        r.top = int((self.top - y0) / y_scale + self.thumboffset)\n        r.bottom = int((self.bottom - y0) / y_scale + self.thumboffset)\n        r.right = int((self.right - x0) / x_scale + self.thumboffset)\n        r.left = int((self.left - x0) / x_scale + self.thumboffset)\n        r._update_dims()\n        return r\n\n    def plus_rect(self, r0):\n        r = Rect()\n        r.top = min(self.top, r0.top)\n        r.bottom = max(self.bottom, r0.bottom)\n        r.right = max(self.right, r0.right)\n        r.left = min(self.left, r0.left)\n        r._update_dims()\n        return r\n\n    def valid_rect(self, w, h):\n        r = Rect()\n        r.top = self.top\n        if r.top < 0:\n            r.top = 0\n        if r.top > h - 1:\n            r.top = h - 1\n        r.bottom = self.bottom\n        if r.bottom < 1:\n            r.bottom = 1\n        if r.bottom > h:\n            r.bottom = h\n        r.right = self.right\n        if r.right < 1:\n            r.right = 1\n        if r.right > w:\n            r.right = w\n        r.left = self.left\n        if r.left < 0:\n            r.left = 0\n        if r.left > w - 1:\n            r.left = w - 1\n        r._update_dims()\n        return r\n\n    def set_thumboffset(self, thumboffset=0):\n        self.thumboffset = thumboffset\n\n    def __repr__(self):\n        return \'(%d,%d)-(%d,%d)\' % (self.left, self.top, self.right, self.bottom)\n\n# Class that handles configuration\nclass ScanConfig(object):\n\n    def __init__(self, configFile=None):\n        self.section = self.__class__.__name__.upper()\n        self.get_default_config()\n        \n        if configFile is None:\n            # Create default configuration in OS-independent "home" directory\n            configPath = os.path.join(os.path.expanduser(\'~\'), \'.config\', self.__class__.__name__.lower())\n            if not os.path.exists(configPath):\n                os.makedirs(configPath)\n            self.configFile = os.path.join(configPath, \'config.ini\')\n            self.config = confpars.SafeConfigParser(self.get_default_config())\n            if os.path.exists(self.configFile):\n                self.config.read(self.configFile)\n            else:\n                self.config.add_section(self.section)\n        elif os.path.exists(configFile):\n            self.configFile = os.path.normpath(configFile)\n            self.config = confpars.SafeConfigParser(self.get_default_config())\n            self.config.read(self.configFile)\n        else:\n            # Path given, but does not exist\n            raise Exception("Configuration file \'{0}\' does not exist".format(configFile))\n    \n    # Gets default configuration\n    def get_default_config(self):\n        return {\n            \'geometry\': \'1024x768+10+10\', # Position and size of main window\n            \'input-directory\': os.path.expanduser(\'~\'), # Directory with pictures to process\n            \'output-directory\': os.path.expanduser(\'~\'), # Directory to write resulting pictures into\n            \'image-extensions\': \'tif tiff jpg jpeg gif png\', # Extensions of files considered to be pictures\n            \'thumboffset\': \'4\', # Thumbnail offset\n            \'stipple\': \'gray12\', # Stipple pattern\n            \'movestep\' :\'10\', # Amount of pixels to move rectangle in all directions\n            \'resizestep\': \'10\' # Amount of pixels to resize rectangle\n        }\n\n    def __getitem__(self, key):\n        try:\n            return self.config.get(self.section, key)\n        except confpars.NoOptionError:\n            try:\n                return self.default_config.get(self.section, key)\n            except confpars.NoOptionError:\n                return None\n\n    def __setitem__(self, key, value):\n        self.config.set(self.section, key, value)\n\n    def save(self):\n        with open(self.configFile, \'wb\') as cf:\n            self.config.write(cf)'
p153
asg7
I0
sg46
I8386687
ssg29
(lp154
(dp155
g68
S'Tkinter'
p156
sg52
g83
sg70
S'Frame'
p157
sg72
(lp158
sg24
g74
sg75
g76
sg77
(lp159
(dp160
S'Handler'
p161
S'on_ScanCropper_Config'
p162
sS'Component'
p163
S''
sS'Event'
p164
S'<Configure>'
p165
sasg79
(lp166
(dp167
g52
S'borderwidth'
p168
sS'Value'
p169
S'n:5'
p170
sS'Extra'
p171
Nsa(dp172
g52
S'width'
p173
sg169
S'n:1'
p174
sg171
Nsa(dp175
g52
S'height'
p176
sg169
S'n:1'
p177
sg171
Nsasa(dp178
g68
S'Tkinter'
p179
sg52
S'_Label1'
p180
sg70
S'Label'
p181
sg72
(lp182
(dp183
g52
S'anchor'
p184
sg169
S'sw'
p185
sa(dp186
g52
S'expand'
p187
sg169
S'yes'
p188
sa(dp189
g52
S'fill'
p190
sg169
S'y'
sasg24
Nsg75
(lp191
I4408
aI9790
asg77
(lp192
sg79
(lp193
(dp194
g52
S'text'
p195
sg169
S'This is label'
p196
sg171
Nsa(dp197
g52
S'relief'
p198
sg169
S'sunken'
p199
sg171
Nsasa(dp200
g68
g179
sg52
S'btnInputDir'
p201
sg70
S'Button'
p202
sg72
(lp203
(dp204
g52
g184
sg169
g185
sasg24
Nsg75
(lp205
I2610
aI9332
asg77
(lp206
(dp207
g161
S'on_btnInputDir_ButRel_1'
p208
sg163
S''
sg164
S'<ButtonRelease-1>'
p209
sasg79
(lp210
(dp211
g52
S'text'
p212
sg169
S'Input ...'
p213
sg171
Nsasa(dp214
g68
g179
sg52
S'btnOutputDir'
p215
sg70
g202
sg72
(lp216
(dp217
g52
g184
sg169
g185
sasg24
Nsg75
(lp218
I2914
aI9332
asg77
(lp219
(dp220
g161
S'on_btnOutputDir_ButRel_1'
p221
sg163
S''
sg164
S'<ButtonRelease-1>'
p222
sasg79
(lp223
(dp224
g52
g212
sg169
S'Output ...'
p225
sg171
Nsasa(dp226
g68
S'Tkinter'
p227
sg52
S'canvas'
p228
sg70
S'Canvas'
p229
sg72
(lp230
(dp231
g52
g184
sg169
S'nw'
p232
sa(dp233
g52
g187
sg169
S'yes'
p234
sa(dp235
g52
g190
sg169
S'both'
p236
sasg24
Nsg75
(lp237
I5113
aI5331
asg77
(lp238
(dp239
g161
S'canvas_mouseb1move_callback'
p240
sg163
S''
sg164
S'<B1-Motion>'
p241
sa(dp242
g161
S'canvas_mouse1_callback'
p243
sg163
S''
sg164
S'<Button-1>'
p244
sa(dp245
g161
S'canvas_mouseup1_callback'
p246
sg163
S''
sg164
S'<ButtonRelease-1>'
p247
sa(dp248
g161
S'canvas_ArrowDown'
p249
sg163
S''
sg164
S'<KeyRelease-Down>'
p250
sa(dp251
g161
S'canvas_ArrowDown_Shift'
p252
sg163
S''
sg164
S'<Shift-KeyRelease-Down>'
p253
sa(dp254
g161
S'canvas_KP_ArrowDown'
p255
sg163
S''
sg164
S'<KeyRelease-KP_Down>'
p256
sa(dp257
g161
S'canvas_KP_Enter'
p258
sg163
S''
sg164
S'<KeyRelease-KP_Enter>'
p259
sa(dp260
g161
S'canvas_KP_ArrowLeft'
p261
sg163
S''
sg164
S'<KeyRelease-KP_Left>'
p262
sa(dp263
g161
S'canvas_KP_PageDown'
p264
sg163
S''
sg164
S'<KeyRelease-KP_Next>'
p265
sa(dp266
g161
S'canvas_KP_PageUp'
p267
sg163
S''
sg164
S'<KeyRelease-KP_Prior>'
p268
sa(dp269
g161
S'canvas_KP_ArrowRight'
p270
sg163
S''
sg164
S'<KeyRelease-KP_Right>'
p271
sa(dp272
g161
S'canvas_KP_ArrowUp'
p273
sg163
S''
sg164
S'<KeyRelease-KP_Up>'
p274
sa(dp275
g161
S'canvas_ArrowLeft'
p276
sg163
S''
sg164
S'<KeyRelease-Left>'
p277
sa(dp278
g161
S'canvas_ArrowLeft_Shift'
p279
sg163
S''
sg164
S'<Shift-KeyRelease-Left>'
p280
sa(dp281
g161
S'canvas_PageDown'
p282
sg163
S''
sg164
S'<KeyRelease-Next>'
p283
sa(dp284
g161
S'canvas_PageUp'
p285
sg163
S''
sg164
S'<KeyRelease-Prior>'
p286
sa(dp287
g161
S'canvas_Return'
p288
sg163
S''
sg164
S'<KeyRelease-Return>'
p289
sa(dp290
g161
S'canvas_ArrowRight'
p291
sg163
S''
sg164
S'<KeyRelease-Right>'
p292
sa(dp293
g161
S'canvas_ArrowRight_Shift'
p294
sg163
S''
sg164
S'<Shift-KeyRelease-Right>'
p295
sa(dp296
g161
S'canvas_ArrowUp'
p297
sg163
S''
sg164
S'<KeyRelease-Up>'
p298
sa(dp299
g161
S'canvas_ArrowUp_Shift'
p300
sg163
S''
sg164
S'<Shift-KeyRelease-Up>'
p301
sa(dp302
g161
S'canvas_SPACE'
p303
sg163
S''
sg164
S'<KeyRelease-space>'
p304
sasg79
(lp305
(dp306
g52
S'borderwidth'
p307
sg169
S'n:1'
p308
sg171
Nsa(dp309
g52
S'takefocus'
p310
sg169
I1
sg171
Nsasa(dp311
g68
S'Tkinter'
p312
sg52
S'frameButtons'
p313
sg70
S'Frame'
p314
sg72
(lp315
(dp316
g52
g184
sg169
S'nw'
p317
sa(dp318
g52
g190
sg169
S'x'
sasg24
(I0
I1
I1
tp319
sg75
g76
sg77
(lp320
sg79
(lp321
(dp322
g52
g168
sg169
S'n:1'
p323
sg171
Nsa(dp324
g52
g176
sg169
S'n:1'
p325
sg171
Nsasa(dp326
g68
S'Tkinter'
p327
sg52
S'frameFiles'
p328
sg70
S'Frame'
p329
sg72
(lp330
(dp331
g52
g184
sg169
g232
sa(dp332
g52
g190
sg169
S'y'
sasg24
(I0
I0
tp333
sg75
g76
sg77
(lp334
sg79
(lp335
sa(dp336
g68
g327
sg52
S'frameMain'
p337
sg70
g329
sg72
(lp338
(dp339
g52
g187
sg169
S'yes'
p340
sa(dp341
g52
g190
sg169
S'both'
p342
sasg24
(I0
I1
tp343
sg75
g76
sg77
(lp344
sg79
(lp345
(dp346
g52
g168
sg169
S'n:1'
p347
sg171
Nsasa(dp348
g68
g312
sg52
S'framePicture'
p349
sg70
g314
sg72
(lp350
(dp351
g52
g184
sg169
g232
sa(dp352
g52
g187
sg169
g340
sa(dp353
g52
g190
sg169
g342
sasg24
(I0
I1
I0
tp354
sg75
g76
sg77
(lp355
sg79
(lp356
(dp357
g52
g168
sg169
S'n:1'
p358
sg171
Nsa(dp359
g52
S'relief'
p360
sg169
S'raised'
p361
sg171
Nsasa(dp362
g68
S'Tkinter'
p363
sg52
S'frmStatus'
p364
sg70
S'Frame'
p365
sg72
(lp366
(dp367
g52
g184
sg169
S'nw'
p368
sa(dp369
g52
g190
sg169
S'y'
sasg24
(I0
I1
I2
tp370
sg75
g76
sg77
(lp371
sg79
(lp372
sa(dp373
g68
S'Tkinter'
p374
sg52
S'goButton'
p375
sg70
S'Button'
p376
sg72
(lp377
(dp378
g52
g184
sg169
S'sw'
p379
sa(dp380
g52
g187
sg169
g340
sa(dp381
g52
g190
sg169
S'x'
sasg24
Nsg75
(lp382
I6607
aI9332
asg77
(lp383
sg79
(lp384
(dp385
g52
g212
sg169
S'Crops'
p386
sg171
Nsa(dp387
g52
S'activebackground'
p388
sg169
S'c:#0F0'
p389
sg171
Nsa(dp390
g52
S'command'
p391
sg169
S'start_cropping'
p392
sg171
I0
sasa(dp393
g68
g227
sg52
S'lbFiles'
p394
sg70
S'Listbox'
p395
sg72
(lp396
(dp397
g52
g184
sg169
g232
sa(dp398
g52
g190
sg169
S'y'
sasg24
Nsg75
(lp399
I1219
aI7964
asg77
(lp400
(dp401
g161
S'on_lbFiles_mouseClick_1'
p402
sg163
S''
sg164
S'<ButtonRelease-1>'
p403
sasg79
(lp404
(dp405
g52
S'takefocus'
p406
sg169
I1
sg171
Nsasa(dp407
g68
g374
sg52
S'plusButton'
p408
sg70
g376
sg72
(lp409
(dp410
g52
g184
sg169
g379
sa(dp411
g52
g187
sg169
g340
sa(dp412
g52
g190
sg169
S'x'
sasg24
Nsg75
(lp413
I5602
aI9332
asg77
(lp414
sg79
(lp415
(dp416
g52
g212
sg169
S'+'
sg171
Nsa(dp417
g52
g391
sg169
S'plus_box'
p418
sg171
I0
sasa(dp419
g68
g374
sg52
S'quitButton'
p420
sg70
g376
sg72
(lp421
(dp422
g52
g184
sg169
g379
sa(dp423
g52
g187
sg169
g340
sa(dp424
g52
g190
sg169
S'x'
sasg24
Nsg75
(lp425
I7377
aI9332
asg77
(lp426
(dp427
g161
S'on_quitButton_ButRel_1'
p428
sg163
S''
sg164
S'<ButtonRelease-1>'
p429
sasg79
(lp430
(dp431
g52
g212
sg169
S'Quit'
p432
sg171
Nsa(dp433
g52
g388
sg169
S'c:#F00'
p434
sg171
Nsa(dp435
g52
g391
sg169
S'quit'
p436
sg171
I0
sasa(dp437
g68
g374
sg52
S'resetButton'
p438
sg70
g376
sg72
(lp439
(dp440
g52
g184
sg169
g379
sa(dp441
g52
g187
sg169
g340
sa(dp442
g52
g190
sg169
S'x'
sasg24
Nsg75
(lp443
I3173
aI9332
asg77
(lp444
sg79
(lp445
(dp446
g52
g212
sg169
S'Reset'
p447
sg171
Nsa(dp448
g52
g388
sg169
S'c:#F00'
p449
sg171
Nsa(dp450
g52
g391
sg169
S'reset'
p451
sg171
I0
sasa(dp452
g68
g227
sg52
S'sbFiles'
p453
sg70
S'Scrollbar'
p454
sg72
(lp455
(dp456
g52
g184
sg169
g232
sa(dp457
g52
g190
sg169
S'y'
sasg24
Nsg75
(lp458
I1843
aI7964
asg77
(lp459
sg79
(lp460
sa(dp461
g68
g374
sg52
S'undoButton'
p462
sg70
g376
sg72
(lp463
(dp464
g52
g184
sg169
g379
sa(dp465
g52
g187
sg169
g340
sa(dp466
g52
g190
sg169
S'x'
sasg24
Nsg75
(lp467
I3794
aI9332
asg77
(lp468
sg79
(lp469
(dp470
g52
g212
sg169
S'Undo'
p471
sg171
Nsa(dp472
g52
g388
sg169
S'c:#FF0'
p473
sg171
Nsa(dp474
g52
g391
sg169
S'undo_last'
p475
sg171
I0
sasa(dp476
g68
g374
sg52
S'unzoomButton'
p477
sg70
g376
sg72
(lp478
(dp479
g52
g184
sg169
g379
sa(dp480
g52
g187
sg169
g340
sa(dp481
g52
g190
sg169
S'x'
sasg24
Nsg75
(lp482
I4897
aI9327
asg77
(lp483
sg79
(lp484
(dp485
g52
g212
sg169
S'<-|->'
p486
sg171
Nsa(dp487
g52
g388
sg169
S'c:#00F'
p488
sg171
Nsa(dp489
g52
g391
sg169
S'unzoom_image'
p490
sg171
I0
sasa(dp491
g68
g374
sg52
S'zoomButton'
p492
sg70
S'Checkbutton'
p493
sg72
(lp494
(dp495
g52
g184
sg169
g379
sa(dp496
g52
g187
sg169
g340
sa(dp497
g52
g190
sg169
S'x'
sasg24
Nsg75
(lp498
I4175
aI9332
asg77
(lp499
sg79
(lp500
(dp501
g52
S'text'
p502
sg169
S'Zoom'
p503
sg171
Nsa(dp504
g52
S'command'
p505
sg169
S'zoom_mode'
p506
sg171
I0
sasasg81
g85
sg34
I1
sasS'VisibleForm'
p507
g83
sS'SelectedForm'
p508
g83
sg52
g6
sa.