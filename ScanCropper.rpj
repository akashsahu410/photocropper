(lp1
(dp2
S'ModulePrevious'
p3
S'scancropper'
p4
sS'ModuleCurrent'
p5
S'ScanCropper'
p6
sS'Version'
p7
I1
sS'Geometry'
p8
S'3834x2065+3+28'
p9
sS'ProjectName'
p10
g6
sS'ImportTypes'
p11
(lp12
(S'Pmw'
p13
S'import'
p14
tp15
a(S'Tkinter'
p16
S'import'
p17
tp18
asS'EditorWidths'
p19
((lp20
I411
aI324
a(lp21
I378
aI357
a(lp22
I369
aI366
atp23
sS'ID'
p24
S'Rapyd Project'
p25
sS'ParkingLot'
p26
(dp27
S'SelectedWidreq'
p28
NsS'Widreqs'
p29
(lp30
ssa(dp31
S'PreviousForm'
p32
S'-Main-'
p33
sS'OnTab'
p34
I1
sS'-Main-'
p35
(dp36
S'Cursor'
p37
S'9.0'
p38
sS'Text'
p39
(lp40
S''
aS'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n'
p41
aS'import rpErrorHandler\nimport Tkinter\n'
p42
aS'\ndef window_close():\n    conf[\'geometry\'] = Root.geometry()\n    conf.save() # Save configuration to keep window geometry\n    Root.destroy()\n\ntry:\n    #--------------------------------------------------------------------------#\n    # User code should go after this comment so it is inside the "try".        #\n    #     This allows rpErrorHandler to gain control on an error so it         #\n    #     can properly display a Rapyd-aware error message.                    #\n    #--------------------------------------------------------------------------#\n\n    #Adjust sys.path so we can find other modules of this project\n    import sys\n    if \'.\' not in sys.path:\n        sys.path.append(\'.\')\n    #Put lines to import other modules of this project here\n    import argparse    \n    import tkFileDialog\n    import os\n    import re\n    try:\n        # for Python2\n        import ConfigParser as confpars\n    except ImportError:\n        # for Python3\n        import configparser as confpars\n    #\n    from PIL import Image, ImageTk\n    tk = Tkinter\n \n    if __name__ == \'__main__\':\n        # Parse arguments\n        parser = argparse.ArgumentParser(description=\'Picture cropper\')\n        parser.add_argument(\'-c\', \'--config\', \'--config-file\', dest=\'configFile\', default=None, help=\'Configuration file path\')\n        parser.add_argument(\'-d\', \'--debug\', default=0, help=\'Debug level\')\n        args = parser.parse_args()\n\n        # Load configuration\n        conf = ScanConfig(args.configFile)\n'
p43
aS"        Root = Tkinter.Tk()\n        Tkinter.CallWrapper = rpErrorHandler.CallWrapper\n        App = ScanCropper(Root)\n        App.pack(expand='yes',fill='both')\n"
p44
aS'        # Set window\n        Root.geometry(conf[\'geometry\'])\n        # Allow closing windows by clicking "X"\n        Root.protocol("WM_DELETE_WINDOW", window_close)\n        Root.title(\'Scan Cropper\')\n        App.config = conf\n        App.load_image_list()\n        Root.mainloop()\n    #--------------------------------------------------------------------------#\n    # User code should go above this comment.                                  #\n    #--------------------------------------------------------------------------#\nexcept:\n    rpErrorHandler.RunError()'
p45
asg7
I0
sS'Sha'
p46
I9276287
ssS'Forms'
p47
(lp48
(dp49
S'Requested'
p50
S'Gui'
p51
sS'Name'
p52
S'Preferences'
p53
sS'SelectedWidreq'
p54
NsS'Text'
p55
(dp56
g37
S'24.0'
p57
sg39
(lp58
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                 Preferences                                  #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass Preferences(Tkinter.Frame):\n    def __init__(self,Master=None,*pos,**kw):\n'
p59
aS'        #\n        #Your code here\n        #\n'
p60
aS'\n        apply(Tkinter.Frame.__init__,(self,Master),kw)\n\n'
p61
aS'        #\n        #Your code here\n        #\n'
p62
aS'    #\n    #Start of event handler methods\n    #\n'
p63
aS'\n'
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p64
aS''
asg7
I0
sg46
I9763455
ssS'Lines'
p65
(lp66
sS'BaseClass'
p67
S'Tkinter.Frame'
p68
sS'Widreqs'
p69
(lp70
(dp71
S'ModuleName'
p72
S'Tkinter'
p73
sg52
g53
sS'WidgetName'
p74
S'Frame'
p75
sS'PackOptions'
p76
(lp77
sS'Options'
p78
(lp79
sS'XY'
p80
(I0
I0
tp81
sS'Bindings'
p82
(lp83
sS'ID'
p84
(I0
tp85
sasS'Type'
p86
g68
sS'OnTab'
p87
I1
sa(dp88
S'Requested'
p89
g39
sS'Name'
p90
S'ScanCropper'
p91
sg28
S'canvas'
p92
sS'Type'
p93
S'Tkinter.Frame'
p94
sS'Lines'
p95
(lp96
(lp97
I2416
aI5000
aI1
aa(lp98
I6206
aI7908
aI0
aa(lp99
I6206
aI9702
aI0
aasg39
(dp100
g37
S'155.43'
p101
sg39
(lp102
S"#------------------------------------------------------------------------------#\n#                                                                              #\n#                                 ScanCropper                                  #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass ScanCropper(Tkinter.Frame):\n    def __init__(self,Master=None,*pos,**kw):\n        kw['borderwidth'] = '5'\n        kw['height'] = '1'\n        kw['width'] = '1'\n"
p103
aS'        #\n        #Your code here\n        #\n'
p104
aS"\n        apply(Tkinter.Frame.__init__,(self,Master),kw)\n        self.bind('<Configure>',self.on_ScanCropper_Config)\n        self.frameFiles = Tkinter.Frame(self)\n        self.frameFiles.pack(anchor='nw',fill='y',side='left')\n        self.sbFiles = Tkinter.Scrollbar(self.frameFiles)\n        self.sbFiles.pack(anchor='nw',fill='y',side='right')\n        self.lbFiles = Tkinter.Listbox(self.frameFiles,takefocus=1)\n        self.lbFiles.pack(anchor='nw',fill='y',side='right')\n        self.lbFiles.bind('<ButtonRelease-1>',self.on_lbFiles_mouseClick_1)\n        self.frameMain = Tkinter.Frame(self,borderwidth='1')\n        self.frameMain.pack(expand='yes',fill='both',side='left')\n        self.framePicture = Tkinter.Frame(self.frameMain,borderwidth='1'\n            ,relief='raised')\n        self.framePicture.pack(anchor='nw',expand='yes',fill='both',side='top')\n        self.canvas = Tkinter.Canvas(self.framePicture,borderwidth='1'\n            ,takefocus=1)\n        self.canvas.pack(anchor='nw',expand='yes',fill='both',side='bottom')\n        self.canvas.bind('<B1-Motion>',self.canvas_mouseb1move_callback)\n        self.canvas.bind('<Button-1>',self.canvas_mouse1_callback)\n        self.canvas.bind('<ButtonRelease-1>',self.canvas_mouseup1_callback)\n        self.canvas.bind('<KeyRelease-Down>',self.canvas_ArrowDown)\n        self.canvas.bind('<Shift-KeyRelease-Down>',self.canvas_ArrowDown_Shift)\n        self.canvas.bind('<KeyRelease-KP_Down>',self.canvas_KP_ArrowDown)\n        self.canvas.bind('<KeyRelease-KP_Left>',self.canvas_KP_ArrowLeft)\n        self.canvas.bind('<KeyRelease-KP_Next>',self.canvas_KP_PageDown)\n        self.canvas.bind('<KeyRelease-KP_Prior>',self.canvas_KP_PageUp)\n        self.canvas.bind('<KeyRelease-KP_Right>',self.canvas_KP_ArrowRight)\n        self.canvas.bind('<KeyRelease-KP_Up>',self.canvas_KP_ArrowUp)\n        self.canvas.bind('<KeyRelease-Left>',self.canvas_ArrowLeft)\n        self.canvas.bind('<Shift-KeyRelease-Left>',self.canvas_ArrowLeft_Shift)\n        self.canvas.bind('<KeyRelease-Next>',self.canvas_PageDown)\n        self.canvas.bind('<KeyRelease-Prior>',self.canvas_PageUp)\n        self.canvas.bind('<KeyRelease-Right>',self.canvas_ArrowRight)\n        self.canvas.bind('<Shift-KeyRelease-Right>' \\\n            ,self.canvas_ArrowRight_Shift)\n        self.canvas.bind('<KeyRelease-Up>',self.canvas_ArrowUp)\n        self.canvas.bind('<Shift-KeyRelease-Up>',self.canvas_ArrowUp_Shift)\n        self.canvas.bind('<KeyRelease-space>',self.canvas_SPACE)\n        self.frameButtons = Tkinter.Frame(self.frameMain,borderwidth='1'\n            ,height='1')\n        self.frameButtons.pack(anchor='nw',fill='x',side='top')\n        self.btnInputDir = Tkinter.Button(self.frameButtons,text='Input ...')\n        self.btnInputDir.pack(anchor='sw',side='left')\n        self.btnInputDir.bind('<ButtonRelease-1>',self.on_btnInputDir_ButRel_1)\n        self.btnOutputDir = Tkinter.Button(self.frameButtons,text='Output ...')\n        self.btnOutputDir.pack(anchor='sw',side='left')\n        self.btnOutputDir.bind('<ButtonRelease-1>' \\\n            ,self.on_btnOutputDir_ButRel_1)\n        self.resetButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#F00',command=self.reset,text='Reset')\n        self.resetButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.undoButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#FF0',command=self.undo_last,text='Undo')\n        self.undoButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.zoomButton = Tkinter.Checkbutton(self.frameButtons\n            ,command=self.zoom_mode,text='Zoom')\n        self.zoomButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.unzoomButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#00F',command=self.unzoom_image,text='<-|->')\n        self.unzoomButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.plusButton = Tkinter.Button(self.frameButtons,command=self.plus_box\n            ,text='+')\n        self.plusButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.goButton = Tkinter.Button(self.frameButtons,activebackground='#0F0'\n            ,command=self.start_cropping,text='Crops')\n        self.goButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.quitButton = Tkinter.Button(self.frameButtons\n            ,activebackground='#F00',command=self.quit,text='Quit')\n        self.quitButton.pack(anchor='sw',expand='yes',fill='x',side='left')\n        self.quitButton.bind('<ButtonRelease-1>',self.on_quitButton_ButRel_1)\n        self.frmStatus = Tkinter.Frame(self.frameMain)\n        self.frmStatus.pack(anchor='nw',fill='y',side='top')\n        self._Label1 = Tkinter.Label(self.frmStatus,relief='sunken'\n            ,text='This is label')\n        self._Label1.pack(anchor='sw',expand='yes',fill='y',side='top')\n"
p105
aS'        #\n        #Your code here\n        #\n        self.quitButton_ttp = CreateToolTip(self.quitButton, "Exit")\n        self.resetButton_ttp = CreateToolTip(self.resetButton, "Reset all rectangles")\n        self.undoButton_ttp = CreateToolTip(self.undoButton, "Undo last rectangle")\n        self.zoomButton_ttp = CreateToolTip(self.zoomButton, "On/Off Zoom mode")\n        self.unzoomButton_ttp = CreateToolTip(self.unzoomButton, "Unzoom, view all image")\n        self.plusButton_ttp = CreateToolTip(self.plusButton, "Plus box, extent rectangle")\n        self.goButton_ttp = CreateToolTip(self.goButton, "Go, begin cropping")\n        self.btnInputDir_ttp = CreateToolTip(self.btnInputDir, "Select input directory")\n        self.bthOutputDir_ttp = CreateToolTip(self.btnOutputDir, "Select output directory")\n        self.croprect_start = None\n        self.croprect_end = None\n        self.crop_count = 0\n        self.canvas_rects = []\n        self.crop_rects = []\n        self.current_rect = None\n        self.zoommode = False\n        self.w = 1\n        self.h = 1\n        self.x0 = 0\n        self.y0 = 0\n        self.n = 0\n        self.config = None\n        self.delimiters = \' |,|\\t|#|\\|\'\n        self._after_id = None\n        self.filename = None\n        self.lbIndex = None # Keeps item index in listbox\n        self.cropIndex = 0\n'
p106
aS'    #\n    #Start of event handler methods\n    #\n'
p107
aS'\n'
aS'\n    def canvas_ArrowDown(self'
p108
aS', event=None):\n        # Moves crop rectangle one pixel DOWN\n        self.move_rect(self.cropIndex, 0, 1)\n'
p109
aS'\n    def canvas_ArrowDown_Shift(self'
p110
aS",Event=None):\n        # Moves crop rectangle AMOUNT OF pixels DOWN\n        self.move_rect(self.cropIndex, 0, int(self.config['movestep']))\n"
p111
aS'\n    def canvas_ArrowLeft(self'
p112
aS', event=None):\n        # Moves crop rectangle one pixel LEFT\n        self.move_rect(self.cropIndex, -1, 0)\n'
p113
aS'\n    def canvas_ArrowLeft_Shift(self'
p114
aS", event=None):\n        # Moves crop rectangle AMOUNT OF pixels LEFT\n        self.move_rect(self.cropIndex, -int(self.config['movestep']), 0)\n"
p115
aS'\n    def canvas_ArrowRight(self'
p116
aS', event=None):\n        # Moves crop rectangle one pixel RIGHT\n        self.move_rect(self.cropIndex, 1, 0)\n'
p117
aS'\n    def canvas_ArrowRight_Shift(self'
p118
aS", event=None):\n        # Moves crop rectangle AMOUNT OF pixels RIGHT\n        self.move_rect(self.cropIndex, int(self.config['movestep']), 0)\n"
p119
aS'\n    def canvas_ArrowUp(self'
p120
aS', event=None):\n        # Moves crop rectangle one pixel UP\n        self.move_rect(self.cropIndex, 0, -1)\n'
p121
aS'\n    def canvas_ArrowUp_Shift(self'
p122
aS", event=None):\n        # Moves crop rectangle AMOUNT OF pixels UP\n        self.move_rect(self.cropIndex, 0, -int(self.config['movestep']))\n"
p123
aS'\n    def canvas_KP_ArrowDown(self'
p124
aS', event=None):\n        # Moves crop rectangle one pixel DOWN\n        self.move_rect(self.cropIndex, 0, 1)\n'
p125
aS'\n    def canvas_KP_ArrowLeft(self'
p126
aS', event=None):\n        # Moves crop rectangle one pixel LEFT\n        self.move_rect(self.cropIndex, -1, 0)\n'
p127
aS'\n    def canvas_KP_ArrowRight(self'
p128
aS', event=None):\n        # Moves crop rectangle one pixel RIGHT\n        self.move_rect(self.cropIndex, 1, 0)\n'
p129
aS'\n    def canvas_KP_ArrowUp(self'
p130
aS', event=None):\n        # Moves crop rectangle one pixel UP\n        self.move_rect(self.cropIndex, 0, -1)\n'
p131
aS'\n    def canvas_KP_PageDown(self'
p132
aS', event=None):\n        # Moves file selection in listbox one down\n        self.pressPage(self.PAGE_DOWN)\n'
p133
aS'\n    def canvas_KP_PageUp(self'
p134
aS', event=None):\n        # Moves file selection in listbox one up\n        self.pressPage(self.PAGE_UP)\n'
p135
aS'\n    def canvas_PageDown(self'
p136
aS', event=None):\n        # Moves file selection in listbox one DOWN\n        self.pressPage(self.PAGE_DOWN)\n'
p137
aS'\n    def canvas_PageUp(self'
p138
aS', event=None):\n        # Moves file selection in listbox one UP\n        self.pressPage(self.PAGE_UP)\n'
p139
aS'\n    def canvas_SPACE(self'
p140
aS', event=None):\n        # Crops selected areas\n        self.start_cropping()\n'
p141
aS'\n    def canvas_mouse1_callback(self'
p142
aS', event=None):\n        self.croprect_start = (event.x, event.y)\n'
p143
aS'\n    def canvas_mouseb1move_callback(self'
p144
aS', event=None):\n        if self.current_rect:\n            self.canvas.delete(self.current_rect)\n        x1 = self.croprect_start[0]\n        y1 = self.croprect_start[1]\n        x2 = event.x\n        y2 = event.y\n        bbox = (x1, y1, x2, y2)\n        cr = self.canvas.create_rectangle(bbox)\n        self.current_rect = cr\n'
p145
aS'\n    def canvas_mouseup1_callback(self'
p146
aS', event=None):\n        self.croprect_end = (event.x, event.y)\n        self.set_crop_area()\n        self.canvas.delete(self.current_rect)\n        self.current_rect = None\n'
p147
aS'\n    def on_ScanCropper_Config(self'
p148
aS', event=None):\n        if self._after_id:\n            self.after_cancel(self._after_id)\n        self._after_id = self.after(1200, self.draw_after_resize)\n'
p149
aS'\n    def on_btnInputDir_ButRel_1(self'
p150
aS', event=None):\n        pass\n'
p151
aS'\n    def on_btnOutputDir_ButRel_1(self'
p152
aS', event=None):\n        pass\n'
p153
aS'\n    def on_lbFiles_mouseClick_1(self'
p154
aS', event=None):\n        self.lbIndex = self.lbFiles.curselection()[0]\n        self.load_lbFiles_image(self.lbFiles.get(tk.ACTIVE))\n'
p155
aS'\n    def on_quitButton_ButRel_1(self'
p156
aS", event=None):\n        conf['geometry'] = self.winfo_toplevel().geometry()\n        conf.save()\n        self.quit()\n"
p157
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p158
aS'    \n    # Constants for listbox with image file names\n    PAGE_UP = -1\n    PAGE_DOWN = 1\n    \n    # Moves rectangle with "index" by "step" pixels\n    def move_rect(self, index, xstep, ystep):\n        if len(self.crop_rects) == index + 1:\n            cr = self.crop_rects[index]\n            self.canvas.delete(self.canvas_rects[index])\n            self.canvas_rects.pop(index)\n            self.crop_rects[index] = cr.move_rect(xstep, ystep)\n            self.redraw_rect()\n\n    def pressPage(self, direction=0):\n        index = self.lbFiles.curselection()[0] + direction\n        self.lbFiles.selection_clear(0, tk.END)\n        self.lbSelect(index)\n\n    # Programmatically select image in a listbox\n    def lbSelect(self, index):\n        if index < 0:\n            index = 0\n        elif index == self.lbFiles.size():\n            index = self.lbFiles.size()-1  \n        self.lbFiles.select_set(index)\n        self.lbFiles.activate(index)\n        if index != self.lbIndex:\n            self.load_lbFiles_image(self.lbFiles.get(tk.ACTIVE))\n            self.lbIndex = index\n        \n    def draw_after_resize(self):\n        # Check if there is a selection in file list\n        if self.filename:\n            self.loadimage()\n \n    def load_lbFiles_image(self, imagePath):\n        self.filename = os.path.join(self.config[\'input-directory\'], imagePath)\n        if os.path.exists(self.filename):\n            self.loadimage()\n            self.winfo_toplevel().title(\'Scan Cropper - \' + imagePath)\n            self.redraw_rect()\n       \n    def set_crop_area(self):\n        r = Rect(self.croprect_start, self.croprect_end)\n        r.set_thumboffset(int(self.config[\'thumboffset\']))\n        \n        # adjust dimensions\n        r.clip_to(self.image_thumb_rect)\n\n        # ignore rects smaller than this size\n        if min(r.h, r.w) < 10:\n            return\n\n        ra = r\n        ra = ra.scale_rect(self.scale)\n        ra = ra.move_rect(self.x0, self.y0)\n        ra = ra.valid_rect(self.w, self.h)\n        if self.zoommode:\n            self.canvas.delete(tk.ALL)\n            self.x0 = ra.left\n            self.y0 = ra.top\n            za = (ra.left, ra.top, ra.right, ra.bottom)\n            self.image_thumb = self.image.crop(za)\n            self.image_thumb.thumbnail(thumbsize)\n            self.image_thumb_rect = Rect(self.image_thumb.size)\n            self.image_thumb_rect.set_thumboffset(int(self.config[\'thumboffset\']))\n            self.displayimage()\n            x_scale = float(ra.w) / self.image_thumb_rect.w\n            y_scale = float(ra.h) / self.image_thumb_rect.h\n            self.scale = (x_scale, y_scale)\n            self.redraw_rect()\n            self.zoommode = False\n            self.zoomButton.deselect()\n        else:\n            self.drawrect(r)\n            self.crop_rects.append(ra)\n            self.n = self.n + 1\n\n    def zoom_mode(self):\n        if self.zoommode:\n            self.zoommode = False\n        else:\n            self.zoommode = True\n\n    def unzoom_image(self):\n        self.canvas.delete(tk.ALL)\n        self.zoommode = False\n        self.zoomButton.deselect()\n        self.x0 = 0\n        self.y0 = 0\n        self.image_thumb = self.image.copy()\n        self.image_thumb.thumbnail(thumbsize)\n        self.image_thumb_rect = Rect(self.image_thumb.size)\n        self.image_thumb_rect.set_thumboffset(int(self.config[\'thumboffset\']))\n        self.displayimage()\n        x_scale = float(self.image_rect.w) / self.image_thumb_rect.w\n        y_scale = float(self.image_rect.h) / self.image_thumb_rect.h\n        self.scale = (x_scale, y_scale)\n        self.redraw_rect()\n\n    def plus_box(self):\n        if self.n > 1:\n            self.canvas.delete(tk.ALL)\n            if self.crop_rects:\n                ra = self.crop_rects[self.n - 1]\n                self.crop_rects.pop()\n                self.n = self.n - 1\n                ra0 = self.crop_rects[self.n - 1]\n                ra0 = ra0.plus_rect(ra)\n                self.crop_rects[self.n - 1] = ra0\n                self.displayimage()\n                self.redraw_rect()\n                self.zoommode = False\n                self.zoomButton.deselect()\n\n    def redraw_rect(self):\n        for croparea in self.crop_rects:\n            self.drawrect(croparea.rescale_rect(self.scale, self.x0, self.y0))\n\n    def undo_last(self):\n        if self.canvas_rects:\n            r = self.canvas_rects.pop()\n            self.canvas.delete(r)\n\n        if self.crop_rects:\n            self.crop_rects.pop()\n\n    def drawrect(self, rect):\n        bbox = (rect.left, rect.top, rect.right, rect.bottom)\n        cr = self.canvas.create_rectangle(\n            bbox, activefill=\'\', fill=\'yellow\', stipple=self.config[\'stipple\'])\n        self.canvas_rects.append(cr)\n\n    def reset(self):\n        self.canvas.delete(tk.ALL)\n        self.zoommode = False\n        self.zoomButton.deselect()\n        self.canvas_rects = []\n        self.crop_rects = []\n        self.displayimage()\n        \n    def displayimage(self):\n        self.photoimage = ImageTk.PhotoImage(self.image_thumb)\n        w, h = self.image_thumb.size\n        self.canvas.delete("all") # Remove remnants of previous crop area\n        \n        self.canvas.create_image(\n            int(self.config[\'thumboffset\']),\n            int(self.config[\'thumboffset\']),\n            anchor=tk.NW,\n            image=self.photoimage)\n\n    def loadimage(self):\n        self.image = Image.open(self.filename)\n        self.image_rect = Rect(self.image.size)\n        self.image_rect.set_thumboffset(int(self.config[\'thumboffset\']))\n        self.w = self.image_rect.w\n        self.h = self.image_rect.h\n        # TODO: needed? borderwidth = self.canvas.config()[\'borderwidth\'][4]\n        \n        self.image_thumb = self.image.copy()\n        self.image_thumb.thumbnail(\n            [ self.canvas.winfo_width() - int(self.config[\'thumboffset\']),\n              self.canvas.winfo_height() - int(self.config[\'thumboffset\']) ]\n        )\n        self.image_thumb_rect = Rect(self.image_thumb.size)\n        self.image_thumb_rect.set_thumboffset(int(self.config[\'thumboffset\']))\n\n        self.displayimage()\n        x_scale = float(self.image_rect.w) / self.image_thumb_rect.w\n        y_scale = float(self.image_rect.h) / self.image_thumb_rect.h\n        self.scale = (x_scale, y_scale)\n\n    def newfilename(self, filenum):\n        f, e = os.path.splitext(self.filename)\n        return \'%s_crop_%s%s\' % (f, filenum, e)\n\n    def start_cropping(self):\n        cropcount = 0\n        for croparea in self.crop_rects:\n            cropcount += 1\n            f = self.newfilename(cropcount)\n            #print f, croparea\n            self.crop(croparea, f)\n\n    def crop(self, croparea, filename):\n        ca = (croparea.left, croparea.top, croparea.right, croparea.bottom)\n        newimg = self.image.crop(ca)\n        imagePath = os.path.join(self.config[\'input-directory\'], filename)\n        newimg.save(imagePath)\n        \n    def load_image_list(self):\n        if self.config is not None:\n            self.lbFiles.delete(0, tk.END)\n            suffixtuple = tuple(re.split(self.delimiters, self.config[\'image-extensions\']))\n            for item in os.listdir(self.config[\'input-directory\']):\n                if os.path.isfile(os.path.join(self.config[\'input-directory\'], item)):\n                    if item.lower().endswith(suffixtuple): # The arg can be a tuple of suffixes to look for\n                        self.lbFiles.insert(tk.END, item)\n            self.update_idletasks()\n            # If there are items in listbox, select the 1st one\n            if self.lbFiles.size() > 0:\n                self.lbFiles.select_set(0)\n                self.load_lbFiles_image(self.lbFiles.get(tk.ACTIVE))\n                self.canvas.focus_set()\n\n\nclass CreateToolTip(object):\n    """\n    create a tooltip for a given widget\n    """\n    def __init__(self, widget, text=\'widget info\'):\n        self.waittime = 500     #miliseconds\n        self.wraplength = 180   #pixels\n        self.widget = widget\n        self.text = text\n        self.widget.bind("<Enter>", self.enter)\n        self.widget.bind("<Leave>", self.leave)\n        self.widget.bind("<ButtonPress>", self.leave)\n        self.id = None\n        self.tw = None\n\n    def enter(self, event=None):\n        self.schedule()\n\n    def leave(self, event=None):\n        self.unschedule()\n        self.hidetip()\n\n    def schedule(self):\n        self.unschedule()\n        self.id = self.widget.after(self.waittime, self.showtip)\n\n    def unschedule(self):\n        id = self.id\n        self.id = None\n        if id:\n            self.widget.after_cancel(id)\n\n    def showtip(self, event=None):\n        x = y = 0\n        x, y, cx, cy = self.widget.bbox("insert")\n        x += self.widget.winfo_rootx() + 25\n        y += self.widget.winfo_rooty() + 20\n        # creates a toplevel window\n        self.tw = tk.Toplevel(self.widget)\n        # Leaves only the label and removes the app window\n        self.tw.wm_overrideredirect(True)\n        self.tw.wm_geometry("+%d+%d" % (x, y))\n        label = tk.Label(self.tw, text=self.text, justify=\'left\',\n            background="#fef9e7", relief=\'solid\', borderwidth=1,\n            wraplength = self.wraplength)\n        label.pack(ipadx=1)\n\n    def hidetip(self):\n        tw = self.tw\n        self.tw= None\n        if tw:\n            tw.destroy()\n            \nclass Rect(object):\n    def __init__(self, *args):\n        self.set_points(*args)\n        self.thumboffset = 0\n\n    def set_points(self, *args):\n        if len(args) == 2:\n            pt1 = args[0]\n            pt2 = args[1]\n        elif len(args) == 1:\n            pt1 = (0, 0)\n            pt2 = args[0]\n        elif len(args) == 0:\n            pt1 = (0, 0)\n            pt2 = (0, 0)\n\n        x1, y1 = pt1\n        x2, y2 = pt2\n\n        self.left = min(x1, x2)\n        self.top = min(y1, y2)\n        self.right = max(x1, x2)\n        self.bottom = max(y1, y2)\n\n        self._update_dims()\n\n    def clip_to(self, containing_rect):\n        cr = containing_rect\n        self.top = max(self.top, cr.top + self.thumboffset)\n        self.bottom = min(self.bottom, cr.bottom + self.thumboffset)\n        self.left = max(self.left, cr.left + self.thumboffset)\n        self.right = min(self.right, cr.right + self.thumboffset)\n        self._update_dims()\n\n    def _update_dims(self):\n        """added to provide w and h dimensions."""\n\n        self.w = self.right - self.left\n        self.h = self.bottom - self.top\n\n    def scale_rect(self, scale):\n        x_scale = scale[0]\n        y_scale = scale[1]\n\n        r = Rect()\n        r.top = int((self.top - self.thumboffset) * y_scale)\n        r.bottom = int((self.bottom - self.thumboffset) * y_scale)\n        r.right = int((self.right - self.thumboffset) * x_scale)\n        r.left = int((self.left - self.thumboffset) * x_scale)\n        r._update_dims()\n\n        return r\n\n    def move_rect(self, x0, y0):\n        r = Rect()\n        r.top = int(self.top + y0)\n        r.bottom = int(self.bottom + y0)\n        r.right = int(self.right + x0)\n        r.left = int(self.left + x0)\n        r._update_dims()\n        return r\n\n    def rescale_rect(self, scale, x0, y0):\n        x_scale = scale[0]\n        y_scale = scale[1]\n\n        r = Rect()\n        r.top = int((self.top - y0) / y_scale + self.thumboffset)\n        r.bottom = int((self.bottom - y0) / y_scale + self.thumboffset)\n        r.right = int((self.right - x0) / x_scale + self.thumboffset)\n        r.left = int((self.left - x0) / x_scale + self.thumboffset)\n        r._update_dims()\n        return r\n\n    def plus_rect(self, r0):\n        r = Rect()\n        r.top = min(self.top, r0.top)\n        r.bottom = max(self.bottom, r0.bottom)\n        r.right = max(self.right, r0.right)\n        r.left = min(self.left, r0.left)\n        r._update_dims()\n        return r\n\n    def valid_rect(self, w, h):\n        r = Rect()\n        r.top = self.top\n        if r.top < 0:\n            r.top = 0\n        if r.top > h - 1:\n            r.top = h - 1\n        r.bottom = self.bottom\n        if r.bottom < 1:\n            r.bottom = 1\n        if r.bottom > h:\n            r.bottom = h\n        r.right = self.right\n        if r.right < 1:\n            r.right = 1\n        if r.right > w:\n            r.right = w\n        r.left = self.left\n        if r.left < 0:\n            r.left = 0\n        if r.left > w - 1:\n            r.left = w - 1\n        r._update_dims()\n        return r\n\n    def set_thumboffset(self, thumboffset=0):\n        self.thumboffset = thumboffset\n\n    def __repr__(self):\n        return \'(%d,%d)-(%d,%d)\' % (self.left, self.top, self.right, self.bottom)\n\n# Class that handles configuration\nclass ScanConfig(object):\n\n    def __init__(self, configFile=None):\n        self.section = self.__class__.__name__.upper()\n        self.get_default_config()\n        \n        if configFile is None:\n            # Create default configuration in OS-independent "home" directory\n            configPath = os.path.join(os.path.expanduser(\'~\'), \'.config\', self.__class__.__name__.lower())\n            if not os.path.exists(configPath):\n                os.makedirs(configPath)\n            self.configFile = os.path.join(configPath, \'config.ini\')\n            self.config = confpars.SafeConfigParser(self.get_default_dict())\n            if os.path.exists(self.configFile):\n                self.config.read(self.configFile)\n        elif os.path.exists(configFile):\n            self.configFile = os.path.normpath(configFile)\n            self.config = confpars.SafeConfigParser(self.get_default_dict())\n            self.config.read(self.configFile)\n        else:\n            # Path given, but does not exist\n            raise Exception("Configuration file \'{0}\' does not exist".format(configFile))\n    \n    # Gets default configuration\n    def get_default_config(self):\n        self.default_config = confpars.SafeConfigParser()\n        self.default_config.add_section(self.section)\n        # Position and size of main window\n        self.default_config.set(self.section, \'geometry\', \'1024x768+10+10\')\n        # Directory with pictures to process\n        self.default_config.set(self.section, \'input-directory\', os.path.expanduser(\'~\'))\n        # Directory to write resulting pictures into\n        self.default_config.set(self.section, \'output-directory\', os.path.expanduser(\'~\'))\n        # Extensions of files considered to be pictures\n        self.default_config.set(self.section, \'image-extensions\', \'tif tiff jpg jpeg gif png\')\n        # Thumbnail offset\n        self.default_config.set(self.section, \'thumboffset\', \'4\')\n        # Stipple pattern\n        self.default_config.set(self.section, \'stipple\', \'gray12\')\n        # Amount of pixels to move rectangle in all directions\n        self.default_config.set(self.section, \'movestep\', \'10\')\n        # Amount of pixels to resize rectangle\n        self.default_config.set(self.section, \'resizestep\', \'10\')\n\n    def get_default_dict(self):\n        config_dict = {sect: dict(self.default_config.items(sect)) for sect in self.default_config.sections()}\n        return config_dict\n        \n    def __getitem__(self, key):\n        try:\n            return self.config.get(self.section, key)\n        except confpars.NoOptionError:\n            try:\n                return self.default_config.get(self.section, key)\n            except confpars.NoOptionError:\n                return None\n\n    def __setitem__(self, key, value):\n        self.config.set(self.section, key, value)\n\n    def save(self):\n        with open(self.configFile, \'wb\') as cf:\n            self.config.write(cf)'
p159
asg7
I0
sg46
I13453695
ssg29
(lp160
(dp161
S'ModuleName'
p162
S'Tkinter'
p163
sg90
g91
sS'WidgetName'
p164
S'Frame'
p165
sS'PackOptions'
p166
(lp167
sg24
(I0
tp168
sS'XY'
p169
(I0
I0
tp170
sS'Bindings'
p171
(lp172
(dp173
S'Handler'
p174
S'on_ScanCropper_Config'
p175
sS'Component'
p176
S''
sS'Event'
p177
S'<Configure>'
p178
sasS'Options'
p179
(lp180
(dp181
g90
S'borderwidth'
p182
sS'Value'
p183
S'n:5'
p184
sS'Extra'
p185
Nsa(dp186
g90
S'width'
p187
sg183
S'n:1'
p188
sg185
Nsa(dp189
g90
S'height'
p190
sg183
S'n:1'
p191
sg185
Nsasa(dp192
g162
S'Tkinter'
p193
sg90
S'_Label1'
p194
sg164
S'Label'
p195
sg166
(lp196
(dp197
g90
S'anchor'
p198
sg183
S'sw'
p199
sa(dp200
g90
S'expand'
p201
sg183
S'yes'
p202
sa(dp203
g90
S'fill'
p204
sg183
S'y'
sasg24
Nsg169
(lp205
I4408
aI9790
asg171
(lp206
sg179
(lp207
(dp208
g90
S'text'
p209
sg183
S'This is label'
p210
sg185
Nsa(dp211
g90
S'relief'
p212
sg183
S'sunken'
p213
sg185
Nsasa(dp214
g162
g193
sg90
S'btnInputDir'
p215
sg164
S'Button'
p216
sg166
(lp217
(dp218
g90
g198
sg183
g199
sasg24
Nsg169
(lp219
I2610
aI9332
asg171
(lp220
(dp221
g174
S'on_btnInputDir_ButRel_1'
p222
sg176
S''
sg177
S'<ButtonRelease-1>'
p223
sasg179
(lp224
(dp225
g90
S'text'
p226
sg183
S'Input ...'
p227
sg185
Nsasa(dp228
g162
g193
sg90
S'btnOutputDir'
p229
sg164
g216
sg166
(lp230
(dp231
g90
g198
sg183
g199
sasg24
Nsg169
(lp232
I2914
aI9332
asg171
(lp233
(dp234
g174
S'on_btnOutputDir_ButRel_1'
p235
sg176
S''
sg177
S'<ButtonRelease-1>'
p236
sasg179
(lp237
(dp238
g90
g226
sg183
S'Output ...'
p239
sg185
Nsasa(dp240
g162
S'Tkinter'
p241
sg90
S'canvas'
p242
sg164
S'Canvas'
p243
sg166
(lp244
(dp245
g90
g198
sg183
S'nw'
p246
sa(dp247
g90
g201
sg183
S'yes'
p248
sa(dp249
g90
g204
sg183
S'both'
p250
sasg24
Nsg169
(lp251
I5113
aI5331
asg171
(lp252
(dp253
g174
S'canvas_mouseb1move_callback'
p254
sg176
S''
sg177
S'<B1-Motion>'
p255
sa(dp256
g174
S'canvas_mouse1_callback'
p257
sg176
S''
sg177
S'<Button-1>'
p258
sa(dp259
g174
S'canvas_mouseup1_callback'
p260
sg176
S''
sg177
S'<ButtonRelease-1>'
p261
sa(dp262
g174
S'canvas_ArrowDown'
p263
sg176
S''
sg177
S'<KeyRelease-Down>'
p264
sa(dp265
g174
S'canvas_ArrowDown_Shift'
p266
sg176
S''
sg177
S'<Shift-KeyRelease-Down>'
p267
sa(dp268
g174
S'canvas_KP_ArrowDown'
p269
sg176
S''
sg177
S'<KeyRelease-KP_Down>'
p270
sa(dp271
g174
S'canvas_KP_ArrowLeft'
p272
sg176
S''
sg177
S'<KeyRelease-KP_Left>'
p273
sa(dp274
g174
S'canvas_KP_PageDown'
p275
sg176
S''
sg177
S'<KeyRelease-KP_Next>'
p276
sa(dp277
g174
S'canvas_KP_PageUp'
p278
sg176
S''
sg177
S'<KeyRelease-KP_Prior>'
p279
sa(dp280
g174
S'canvas_KP_ArrowRight'
p281
sg176
S''
sg177
S'<KeyRelease-KP_Right>'
p282
sa(dp283
g174
S'canvas_KP_ArrowUp'
p284
sg176
S''
sg177
S'<KeyRelease-KP_Up>'
p285
sa(dp286
g174
S'canvas_ArrowLeft'
p287
sg176
S''
sg177
S'<KeyRelease-Left>'
p288
sa(dp289
g174
S'canvas_ArrowLeft_Shift'
p290
sg176
S''
sg177
S'<Shift-KeyRelease-Left>'
p291
sa(dp292
g174
S'canvas_PageDown'
p293
sg176
S''
sg177
S'<KeyRelease-Next>'
p294
sa(dp295
g174
S'canvas_PageUp'
p296
sg176
S''
sg177
S'<KeyRelease-Prior>'
p297
sa(dp298
g174
S'canvas_ArrowRight'
p299
sg176
S''
sg177
S'<KeyRelease-Right>'
p300
sa(dp301
g174
S'canvas_ArrowRight_Shift'
p302
sg176
S''
sg177
S'<Shift-KeyRelease-Right>'
p303
sa(dp304
g174
S'canvas_ArrowUp'
p305
sg176
S''
sg177
S'<KeyRelease-Up>'
p306
sa(dp307
g174
S'canvas_ArrowUp_Shift'
p308
sg176
S''
sg177
S'<Shift-KeyRelease-Up>'
p309
sa(dp310
g174
S'canvas_SPACE'
p311
sg176
S''
sg177
S'<KeyRelease-space>'
p312
sasg179
(lp313
(dp314
g90
S'borderwidth'
p315
sg183
S'n:1'
p316
sg185
Nsa(dp317
g90
S'takefocus'
p318
sg183
I1
sg185
Nsasa(dp319
g162
S'Tkinter'
p320
sg90
S'frameButtons'
p321
sg164
S'Frame'
p322
sg166
(lp323
(dp324
g90
g198
sg183
S'nw'
p325
sa(dp326
g90
g204
sg183
S'x'
sasg24
(I0
I1
I1
tp327
sg169
g170
sg171
(lp328
sg179
(lp329
(dp330
g90
g182
sg183
S'n:1'
p331
sg185
Nsa(dp332
g90
g190
sg183
S'n:1'
p333
sg185
Nsasa(dp334
g162
S'Tkinter'
p335
sg90
S'frameFiles'
p336
sg164
S'Frame'
p337
sg166
(lp338
(dp339
g90
g198
sg183
g246
sa(dp340
g90
g204
sg183
S'y'
sasg24
(I0
I0
tp341
sg169
g170
sg171
(lp342
sg179
(lp343
sa(dp344
g162
g335
sg90
S'frameMain'
p345
sg164
g337
sg166
(lp346
(dp347
g90
g201
sg183
S'yes'
p348
sa(dp349
g90
g204
sg183
S'both'
p350
sasg24
(I0
I1
tp351
sg169
g170
sg171
(lp352
sg179
(lp353
(dp354
g90
g182
sg183
S'n:1'
p355
sg185
Nsasa(dp356
g162
g320
sg90
S'framePicture'
p357
sg164
g322
sg166
(lp358
(dp359
g90
g198
sg183
g246
sa(dp360
g90
g201
sg183
g348
sa(dp361
g90
g204
sg183
g350
sasg24
(I0
I1
I0
tp362
sg169
g170
sg171
(lp363
sg179
(lp364
(dp365
g90
g182
sg183
S'n:1'
p366
sg185
Nsa(dp367
g90
S'relief'
p368
sg183
S'raised'
p369
sg185
Nsasa(dp370
g162
S'Tkinter'
p371
sg90
S'frmStatus'
p372
sg164
S'Frame'
p373
sg166
(lp374
(dp375
g90
g198
sg183
S'nw'
p376
sa(dp377
g90
g204
sg183
S'y'
sasg24
(I0
I1
I2
tp378
sg169
g170
sg171
(lp379
sg179
(lp380
sa(dp381
g162
S'Tkinter'
p382
sg90
S'goButton'
p383
sg164
S'Button'
p384
sg166
(lp385
(dp386
g90
g198
sg183
S'sw'
p387
sa(dp388
g90
g201
sg183
g348
sa(dp389
g90
g204
sg183
S'x'
sasg24
Nsg169
(lp390
I6607
aI9332
asg171
(lp391
sg179
(lp392
(dp393
g90
g226
sg183
S'Crops'
p394
sg185
Nsa(dp395
g90
S'activebackground'
p396
sg183
S'c:#0F0'
p397
sg185
Nsa(dp398
g90
S'command'
p399
sg183
S'start_cropping'
p400
sg185
I0
sasa(dp401
g162
g241
sg90
S'lbFiles'
p402
sg164
S'Listbox'
p403
sg166
(lp404
(dp405
g90
g198
sg183
g246
sa(dp406
g90
g204
sg183
S'y'
sasg24
Nsg169
(lp407
I1219
aI7964
asg171
(lp408
(dp409
g174
S'on_lbFiles_mouseClick_1'
p410
sg176
S''
sg177
S'<ButtonRelease-1>'
p411
sasg179
(lp412
(dp413
g90
S'takefocus'
p414
sg183
I1
sg185
Nsasa(dp415
g162
g382
sg90
S'plusButton'
p416
sg164
g384
sg166
(lp417
(dp418
g90
g198
sg183
g387
sa(dp419
g90
g201
sg183
g348
sa(dp420
g90
g204
sg183
S'x'
sasg24
Nsg169
(lp421
I5602
aI9332
asg171
(lp422
sg179
(lp423
(dp424
g90
g226
sg183
S'+'
sg185
Nsa(dp425
g90
g399
sg183
S'plus_box'
p426
sg185
I0
sasa(dp427
g162
g382
sg90
S'quitButton'
p428
sg164
g384
sg166
(lp429
(dp430
g90
g198
sg183
g387
sa(dp431
g90
g201
sg183
g348
sa(dp432
g90
g204
sg183
S'x'
sasg24
Nsg169
(lp433
I7377
aI9332
asg171
(lp434
(dp435
g174
S'on_quitButton_ButRel_1'
p436
sg176
S''
sg177
S'<ButtonRelease-1>'
p437
sasg179
(lp438
(dp439
g90
g226
sg183
S'Quit'
p440
sg185
Nsa(dp441
g90
g396
sg183
S'c:#F00'
p442
sg185
Nsa(dp443
g90
g399
sg183
S'quit'
p444
sg185
I0
sasa(dp445
g162
g382
sg90
S'resetButton'
p446
sg164
g384
sg166
(lp447
(dp448
g90
g198
sg183
g387
sa(dp449
g90
g201
sg183
g348
sa(dp450
g90
g204
sg183
S'x'
sasg24
Nsg169
(lp451
I3173
aI9332
asg171
(lp452
sg179
(lp453
(dp454
g90
g226
sg183
S'Reset'
p455
sg185
Nsa(dp456
g90
g396
sg183
S'c:#F00'
p457
sg185
Nsa(dp458
g90
g399
sg183
S'reset'
p459
sg185
I0
sasa(dp460
g162
g241
sg90
S'sbFiles'
p461
sg164
S'Scrollbar'
p462
sg166
(lp463
(dp464
g90
g198
sg183
g246
sa(dp465
g90
g204
sg183
S'y'
sasg24
Nsg169
(lp466
I1843
aI7964
asg171
(lp467
sg179
(lp468
sa(dp469
g162
g382
sg90
S'undoButton'
p470
sg164
g384
sg166
(lp471
(dp472
g90
g198
sg183
g387
sa(dp473
g90
g201
sg183
g348
sa(dp474
g90
g204
sg183
S'x'
sasg24
Nsg169
(lp475
I3794
aI9332
asg171
(lp476
sg179
(lp477
(dp478
g90
g226
sg183
S'Undo'
p479
sg185
Nsa(dp480
g90
g396
sg183
S'c:#FF0'
p481
sg185
Nsa(dp482
g90
g399
sg183
S'undo_last'
p483
sg185
I0
sasa(dp484
g162
g382
sg90
S'unzoomButton'
p485
sg164
g384
sg166
(lp486
(dp487
g90
g198
sg183
g387
sa(dp488
g90
g201
sg183
g348
sa(dp489
g90
g204
sg183
S'x'
sasg24
Nsg169
(lp490
I4897
aI9327
asg171
(lp491
sg179
(lp492
(dp493
g90
g226
sg183
S'<-|->'
p494
sg185
Nsa(dp495
g90
g396
sg183
S'c:#00F'
p496
sg185
Nsa(dp497
g90
g399
sg183
S'unzoom_image'
p498
sg185
I0
sasa(dp499
g162
g382
sg90
S'zoomButton'
p500
sg164
S'Checkbutton'
p501
sg166
(lp502
(dp503
g90
g198
sg183
g387
sa(dp504
g90
g201
sg183
g348
sa(dp505
g90
g204
sg183
S'x'
sasg24
Nsg169
(lp506
I4175
aI9332
asg171
(lp507
sg179
(lp508
(dp509
g90
S'text'
p510
sg183
S'Zoom'
p511
sg185
Nsa(dp512
g90
S'command'
p513
sg183
S'zoom_mode'
p514
sg185
I0
sasasS'BaseClass'
p515
g94
sg34
I1
sasS'VisibleForm'
p516
g91
sS'SelectedForm'
p517
g91
sg90
g6
sa.